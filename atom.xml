<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Wynter</title>
  
  <subtitle>不甘平庸，就别懒惰</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://wynter.wang/"/>
  <updated>2019-02-28T03:17:17.956Z</updated>
  <id>https://wynter.wang/</id>
  
  <author>
    <name>Wynter</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Git使用总结</title>
    <link href="https://wynter.wang/2019/02/27/Git%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/"/>
    <id>https://wynter.wang/2019/02/27/Git使用总结/</id>
    <published>2019-02-27T12:21:04.000Z</published>
    <updated>2019-02-28T03:17:17.956Z</updated>
    
    <content type="html"><![CDATA[<p>之前项目一直使用的是SVN，唯一使用的Git就是GitHub，但是也是个人项目用到的也是几个简单Git命令，并没有团队合作开发使用过，在使用过程中难免会遇到一些新手都会遇到的问题，这篇文章就专门记录一些Git常用命令及使用过程中遇到的一些问题。</p><a id="more"></a><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p>创建项目并添加文件<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 初始化项目</span></div><div class="line">git init </div><div class="line"><span class="comment"># 添加指定文件到缓存区</span></div><div class="line">git add test.text</div><div class="line"><span class="comment"># 添加所有文件到缓存区，简单粗暴</span></div><div class="line">git add .</div><div class="line"><span class="comment"># 添加提交说明</span></div><div class="line">git commit -m <span class="string">"添加了test.text文件"</span></div></pre></td></tr></table></figure></p><p>git本地仓库关联到github远程仓库<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 关联到远程仓库</span></div><div class="line">git remote add origin https://github.com/UserName/ProjectName.git</div><div class="line"><span class="comment"># 推送到远程仓库实现同步,-u的作用是关联本地和远程仓库并将本地仓推送到远程仓</span></div><div class="line">git push -u origin master</div></pre></td></tr></table></figure></p><p>拉取最新代码<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git pull</div></pre></td></tr></table></figure></p><p>推送本地修改到远程仓库<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 推送本地到远程仓库主干或分支</span></div><div class="line"><span class="comment"># git push origin &lt;branchName&gt;</span></div><div class="line">git push origin master</div></pre></td></tr></table></figure></p><p>克隆项目<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> https://github.com/UserName/ProjectName.git</div></pre></td></tr></table></figure></p><p>分支管理<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 查看分支</span></div><div class="line">git branch</div><div class="line"><span class="comment"># 创建分支</span></div><div class="line">git branch &lt;name&gt;</div><div class="line"><span class="comment"># 切换分支</span></div><div class="line">git checkout &lt;name&gt;</div><div class="line"><span class="comment"># 创建并切换分支</span></div><div class="line">git checkout -b &lt;name&gt;</div><div class="line"><span class="comment"># 合并某分支到当前分支</span></div><div class="line">git merge &lt;name&gt;   </div><div class="line"><span class="comment"># 删除分支，已经推送到远程库需要两步</span></div><div class="line"><span class="comment"># 1、删除本地分支</span></div><div class="line">git branch -d &lt;name&gt;</div><div class="line"><span class="comment"># 2、删除远程分支</span></div><div class="line">git push origin :branchName</div></pre></td></tr></table></figure></p><p>存储和恢复，通常用于分支间切换修复bug<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 存储当前状态</span></div><div class="line">git stash</div><div class="line"><span class="comment"># 查看存储状态</span></div><div class="line">git stash list</div><div class="line"><span class="comment"># 恢复指定的存储状态</span></div><div class="line">git stash apply stash@&#123;0&#125;</div><div class="line"><span class="comment"># 恢复存储状态</span></div><div class="line">git stash apply</div><div class="line"><span class="comment"># 删除存储状态</span></div><div class="line">git stash drop</div><div class="line"><span class="comment"># 恢复存储状态并删除stash,推荐使用</span></div><div class="line">git stash pop</div></pre></td></tr></table></figure></p><p>标签管理<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 查看标签列表</span></div><div class="line">git tag</div><div class="line"><span class="comment"># 创建标签</span></div><div class="line">git tag &lt;tagName&gt;</div><div class="line"><span class="comment"># 创建标签</span></div><div class="line">git tag -a &lt;tagName&gt; -m <span class="string">"V7.0发布了，打个标签"</span></div><div class="line"><span class="comment"># 查看最近commit id列表</span></div><div class="line">git <span class="built_in">log</span> --pretty=oneline --abbrev-commit</div><div class="line"><span class="comment"># 针对指定commit id打标签</span></div><div class="line">git tag &lt;tagName&gt;  &lt;commit id&gt;</div><div class="line"><span class="comment"># 删除标签</span></div><div class="line">git tag -d &lt;tagName&gt;</div><div class="line"><span class="comment"># 推送指定标签到远程仓库</span></div><div class="line">git push origin &lt;tagName&gt;</div><div class="line"><span class="comment"># 推送全部标签到远程仓库</span></div><div class="line">git push origin --tags</div><div class="line"><span class="comment"># 删除标签，已经推送到远程库需要两步</span></div><div class="line"><span class="comment"># 1、删除本地标签</span></div><div class="line">git tag -d &lt;tagName&gt;</div><div class="line"><span class="comment"># 2、删除远程标签</span></div><div class="line">git push origin :refs/tags/&lt;tagName&gt;</div></pre></td></tr></table></figure></p><p>版本回退<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 退回到上一个版本</span></div><div class="line">git reset --hard HEAD^</div><div class="line"><span class="comment"># 退回到指定版本，只输入commit id前几位也可以</span></div><div class="line">git reset --hard commit id</div><div class="line"><span class="comment"># 将提交到缓存中文件回退到工作区</span></div><div class="line">git reset HEAD &lt;fileName&gt;</div><div class="line"><span class="comment"># 将提交到缓存中全部文件回退到工作区</span></div><div class="line">git reset HEAD .</div></pre></td></tr></table></figure></p><p>删除文件<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 删除文件</span></div><div class="line">git rm &lt;fileName&gt;</div><div class="line"><span class="comment"># 删除目录及目录下所包含的文件</span></div><div class="line">git rm &lt;fileName&gt; -r -f </div><div class="line"><span class="comment">#  从缓存中删除文件，但物理文件还在项目中</span></div><div class="line">git rm --cached &lt;fileName&gt;</div><div class="line"><span class="comment"># 缓存和物理文件同时删除</span></div><div class="line">git rm --f  &lt;fileName&gt;</div></pre></td></tr></table></figure></p><p>撤销修改，恢复到最近一次git commit或git add时的状态<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 放弃当前文件的修改，未加入缓存区才有效</span></div><div class="line">git checkout -- &lt;fileName&gt;</div><div class="line"><span class="comment"># 放弃所有的修改，未加入缓存区才有效</span></div><div class="line"><span class="comment"># git checkout -- .</span></div></pre></td></tr></table></figure></p><p>frok更新到最新的源库代码<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># upstream是一个自定义命名，相当于把你克隆的项目与源项目进行一个关联</span></div><div class="line">git remote add upstream https://github.com/UserName/Project.git </div><div class="line"><span class="comment"># 更新源项目代码</span></div><div class="line">git fetch upstream </div><div class="line"><span class="comment"># 更新之后合并到本地，此刻可能发生冲突</span></div><div class="line">git merge upstream/master</div></pre></td></tr></table></figure></p><p>查看远程库的信息<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 忘记git地址可以使用查看</span></div><div class="line">git remote -v</div></pre></td></tr></table></figure></p><p>操作日志<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 查看操作日志</span></div><div class="line">git <span class="built_in">log</span></div><div class="line"><span class="comment"># 查看历史操作日志</span></div><div class="line">git reflog</div></pre></td></tr></table></figure></p><p>查看版本状态<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 可以看修改或操作了那些文件</span></div><div class="line">git status</div></pre></td></tr></table></figure></p><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><p><strong>合并分支<code>UserInterfaceState.xcuserstate</code>引起冲突问题</strong></p><p>方法一：</p><p> 删除<code>xcuserdata</code>目录，重新合并</p><p>方法二：</p><p>全局设置忽略xcuserdata修改<br>1、<code>vi .gitignore_global</code><br>2、添加<code>xcuserdata</code> 到文件中</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>后续使用遇到问题或者小技巧还会持续更新。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前项目一直使用的是SVN，唯一使用的Git就是GitHub，但是也是个人项目用到的也是几个简单Git命令，并没有团队合作开发使用过，在使用过程中难免会遇到一些新手都会遇到的问题，这篇文章就专门记录一些Git常用命令及使用过程中遇到的一些问题。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>上传App Store隐私权限问题导致初审被拒</title>
    <link href="https://wynter.wang/2019/02/15/%E4%B8%8A%E4%BC%A0App%20Store%E9%9A%90%E7%A7%81%E6%9D%83%E9%99%90%E9%97%AE%E9%A2%98%E5%AF%BC%E8%87%B4%E5%88%9D%E5%AE%A1%E8%A2%AB%E6%8B%92/"/>
    <id>https://wynter.wang/2019/02/15/上传App Store隐私权限问题导致初审被拒/</id>
    <published>2019-02-15T03:21:13.000Z</published>
    <updated>2019-06-03T09:11:21.802Z</updated>
    
    <content type="html"><![CDATA[<p>近期公司项目安全整改，应用内获取系统权限都要报备并说明用途，所以就在info.plist文件中删除了部分没用的权限，下次就不用报备了。今天新版本发布打包成功，上传成功，但是没审核通过。</p><a id="more"></a><h3 id="问题如下"><a href="#问题如下" class="headerlink" title="问题如下"></a>问题如下</h3><blockquote><p>Dear Developer,<br> We identified one or more issues with a recent delivery for your app, “xxx”. Please correct the following issues, then upload again.<br>Missing Purpose String in Info.plist File - Your app’s code references one or more APIs that access sensitive user data. The app’s Info.plist file should contain a NSContactsUsageDescription key with a user-facing purpose string explaining clearly and completely why your app needs the data. Starting Spring 2019, all apps submitted to the App Store that access user data will be required to include a purpose string. If you’re using external libraries or SDKs, they may reference APIs that require a purpose string. While your app might not use these APIs, a purpose string is still required. You can contact the developer of the library or SDK and request they release a version of their code that doesn’t contain the APIs. Learn more (<a href="https://developer.apple.com/documentation/uikit/core_app/protecting_the_user_s_privacy" target="_blank" rel="noopener">https://developer.apple.com/documentation/uikit/core_app/protecting_the_user_s_privacy</a>).</p></blockquote><p>大致意思是应用或SDK用到通讯录API，但是缺少NSContactsUsageDescription权限和描述信息。</p><h3 id="如何定位哪里用到了通讯录API及解决审核礼包问题呢？"><a href="#如何定位哪里用到了通讯录API及解决审核礼包问题呢？" class="headerlink" title="如何定位哪里用到了通讯录API及解决审核礼包问题呢？"></a>如何定位哪里用到了通讯录API及解决审核礼包问题呢？</h3><p>在代码中删除通讯录依赖库<code>Contancts.framework</code>、<code>AddressBook.framework</code>，然后运行</p><p>1、包含有通讯录API运行后会报错，就可以定位到具体方法及用途。</p><p><img src="https://upload-images.jianshu.io/upload_images/937490-c8323a07a4a33fa0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>在info.plist中添加如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>NSContactsUsageDescription<span class="tag">&lt;/<span class="name">key</span>&gt;</span> </div><div class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>需要您的同意,才能访问通讯录<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div></pre></td></tr></table></figure></p><p>2、如果删除依赖库运行没有报错，重新打包上传即可</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>删除隐私权限之前最好提前检查代码中或第三方SDK是否使用到相关API，否则发布升级浪费几次打包时间。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;近期公司项目安全整改，应用内获取系统权限都要报备并说明用途，所以就在info.plist文件中删除了部分没用的权限，下次就不用报备了。今天新版本发布打包成功，上传成功，但是没审核通过。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://wynter.wang/categories/iOS/"/>
    
    
      <category term="iOS" scheme="https://wynter.wang/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS 获取控制器</title>
    <link href="https://wynter.wang/2019/02/15/iOS%20%E8%8E%B7%E5%8F%96%E6%8E%A7%E5%88%B6%E5%99%A8/"/>
    <id>https://wynter.wang/2019/02/15/iOS 获取控制器/</id>
    <published>2019-02-15T03:21:13.000Z</published>
    <updated>2019-06-03T09:09:23.437Z</updated>
    
    <content type="html"><![CDATA[<p>在一个单例中控制页面跳转的时候，NSObject无法获取控制器，怎么解决呢？这里总结几种获取控制器的方法</p><a id="more"></a><h3 id="在View中获取UIViewController"><a href="#在View中获取UIViewController" class="headerlink" title="在View中获取UIViewController"></a>在View中获取UIViewController</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">UIViewController</span>*)viewController &#123;</div><div class="line">    <span class="built_in">UIResponder</span> *nextResponder =  <span class="keyword">self</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">do</span> &#123;</div><div class="line">        nextResponder = [nextResponder nextResponder];</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> ([nextResponder isKindOfClass:[<span class="built_in">UIViewController</span> <span class="keyword">class</span>]])</div><div class="line">            <span class="keyword">return</span> (<span class="built_in">UIViewController</span>*)nextResponder;</div><div class="line">        </div><div class="line">    &#125; <span class="keyword">while</span> (nextResponder != <span class="literal">nil</span>);</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="UINavigationController获取顶部ViewController"><a href="#UINavigationController获取顶部ViewController" class="headerlink" title="UINavigationController获取顶部ViewController"></a>UINavigationController获取顶部ViewController</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">self</span>.navigationController.visibleViewController</div></pre></td></tr></table></figure><h3 id="获取当前展示顶层ViewController"><a href="#获取当前展示顶层ViewController" class="headerlink" title="获取当前展示顶层ViewController"></a>获取当前展示顶层ViewController</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">+ (<span class="built_in">UIViewController</span> *)topViewController &#123;</div><div class="line">    <span class="built_in">UIViewController</span> *resultVC;</div><div class="line">    resultVC = [<span class="keyword">self</span> _topViewController:[[<span class="built_in">UIApplication</span> sharedApplication].keyWindow rootViewController]];</div><div class="line">    <span class="keyword">while</span> (resultVC.presentedViewController) &#123;</div><div class="line">        resultVC = [<span class="keyword">self</span> _topViewController:resultVC.presentedViewController];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> resultVC;</div><div class="line">&#125;</div><div class="line"></div><div class="line">+ (<span class="built_in">UIViewController</span> *)_topViewController:(<span class="built_in">UIViewController</span> *)vc &#123;</div><div class="line">    <span class="keyword">if</span> ([vc isKindOfClass:[<span class="built_in">UINavigationController</span> <span class="keyword">class</span>]]) &#123;</div><div class="line">        <span class="keyword">return</span> [<span class="keyword">self</span> _topViewController:[(<span class="built_in">UINavigationController</span> *)vc topViewController]];</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ([vc isKindOfClass:[<span class="built_in">UITabBarController</span> <span class="keyword">class</span>]]) &#123;</div><div class="line">        <span class="keyword">return</span> [<span class="keyword">self</span> _topViewController:[(<span class="built_in">UITabBarController</span> *)vc selectedViewController]];</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> vc;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="获取当前ViewController的UINavigationController"><a href="#获取当前ViewController的UINavigationController" class="headerlink" title="获取当前ViewController的UINavigationController"></a>获取当前ViewController的UINavigationController</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">+ (<span class="built_in">UINavigationController</span> *)nextNavigationController &#123;</div><div class="line">    <span class="built_in">UIResponder</span> *nextResponder = [<span class="keyword">self</span> topViewController];</div><div class="line">    </div><div class="line">    <span class="keyword">do</span> &#123;</div><div class="line">        nextResponder = [nextResponder nextResponder];</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> ([nextResponder isKindOfClass:[<span class="built_in">UINavigationController</span> <span class="keyword">class</span>]])</div><div class="line">        <span class="keyword">return</span> (<span class="built_in">UINavigationController</span>*)nextResponder;</div><div class="line">        </div><div class="line">    &#125; <span class="keyword">while</span> (nextResponder != <span class="literal">nil</span>);</div><div class="line">    </div><div class="line">    <span class="built_in">UITabBarController</span> *rootVC = (<span class="built_in">UITabBarController</span> *)[[<span class="built_in">UIApplication</span> sharedApplication].delegate window].rootViewController;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> rootVC.selectedViewController;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在一个单例中控制页面跳转的时候，NSObject无法获取控制器，怎么解决呢？这里总结几种获取控制器的方法&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://wynter.wang/categories/iOS/"/>
    
    
      <category term="iOS" scheme="https://wynter.wang/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS WebView设置UserAgent</title>
    <link href="https://wynter.wang/2019/02/15/iOS%20WebView%E8%AE%BE%E7%BD%AEUserAgent/"/>
    <id>https://wynter.wang/2019/02/15/iOS WebView设置UserAgent/</id>
    <published>2019-02-15T03:21:13.000Z</published>
    <updated>2019-06-03T09:05:32.469Z</updated>
    
    <content type="html"><![CDATA[<p>在和前端交互过程中，为了区分是我们APP内加载网页还是其他应用或浏览器加载的网页，我们需要使用在UserAgent后追加字符串来区分。下面介绍全局和局部修改UserAgent。</p><a id="more"></a><h2 id="设置全局UserAgent"><a href="#设置全局UserAgent" class="headerlink" title="设置全局UserAgent"></a>设置全局UserAgent</h2><p>下面两种方法都可以修改全局UserAgent，因为修改的是系统配置，等于全局公用属性，所以不论使用UIWebView还是WKWebview，修改都是同一个属性。</p><p>方法一：WKWebView配置UserAgent</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">BOOL</span>)application:(<span class="built_in">UIApplication</span> *)application didFinishLaunchingWithOptions:(<span class="built_in">NSDictionary</span> *)launchOptions &#123;</div><div class="line">    </div><div class="line">    <span class="keyword">self</span>.webView = [[<span class="built_in">WKWebView</span> alloc] init];</div><div class="line">    [<span class="keyword">self</span>.webView evaluateJavaScript:<span class="string">@"navigator.userAgent"</span> completionHandler:^(<span class="keyword">id</span> result, <span class="built_in">NSError</span> *error) &#123;</div><div class="line">        <span class="built_in">NSString</span> *userAgent = result;</div><div class="line">        <span class="built_in">NSString</span> *newUserAgent = [userAgent stringByAppendingString:<span class="string">@" Appended Custom User Agent"</span>];</div><div class="line">        <span class="built_in">NSDictionary</span> *dictionary = [<span class="built_in">NSDictionary</span> dictionaryWithObjectsAndKeys:newUserAgent, <span class="string">@"UserAgent"</span>, <span class="literal">nil</span>];</div><div class="line">        [[<span class="built_in">NSUserDefaults</span> standardUserDefaults] registerDefaults:dictionary];</div><div class="line">    &#125;];</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>注意：WKWebView不能使用局部声明，需要放在类扩展中，否则无效</p></blockquote><p>方法二：UIWebView配置UserAgent<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">BOOL</span>)application:(<span class="built_in">UIApplication</span> *)application didFinishLaunchingWithOptions:(<span class="built_in">NSDictionary</span> *)launchOptions &#123;</div><div class="line">    </div><div class="line">    <span class="built_in">UIWebView</span> *webView = [[<span class="built_in">UIWebView</span> alloc] init];</div><div class="line">    <span class="built_in">NSString</span> *userAgent = [webView stringByEvaluatingJavaScriptFromString:<span class="string">@"navigator.userAgent"</span>];</div><div class="line">    <span class="built_in">NSString</span> *newUserAgent = [userAgent stringByAppendingString:<span class="string">@" Appended Custom User Agent"</span>];</div><div class="line">    <span class="built_in">NSDictionary</span> *dictionary = [<span class="built_in">NSDictionary</span> dictionaryWithObjectsAndKeys:newUserAgent, <span class="string">@"UserAgent"</span>, <span class="literal">nil</span>];</div><div class="line">    [[<span class="built_in">NSUserDefaults</span> standardUserDefaults] registerDefaults:dictionary];</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><blockquote><ul><li>方法二放在其他ViewController也是可以使用，webView初始化要放在设置UserAgent后才会生效。</li><li>需要注意的是在当前页面销毁后，设置的UserAgen就会失效，如果push或者present后面的页面，UserAgen依然有效。<ul><li>AppDelegate不会销毁以一直有效</li></ul></li></ul></blockquote><h2 id="设置局部UserAgent"><a href="#设置局部UserAgent" class="headerlink" title="设置局部UserAgent"></a>设置局部UserAgent</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">UIWebView</span> *tempWebView = [[<span class="built_in">UIWebView</span> alloc] init];</div><div class="line"><span class="built_in">NSString</span> *userAgent = [tempWebView stringByEvaluatingJavaScriptFromString:<span class="string">@"navigator.userAgent"</span>];</div><div class="line"><span class="built_in">NSString</span> *newUserAgent = [userAgent stringByAppendingString:<span class="string">@" Appended Custom User Agent"</span>];</div><div class="line"><span class="keyword">self</span>.webView.customUserAgent = newUserAgent;</div><div class="line"><span class="comment">// 下面这句了打印userAgent，可以不要</span></div><div class="line">[<span class="keyword">self</span>.webView evaluateJavaScript:<span class="string">@"navigator.userAgent"</span> completionHandler:^(<span class="keyword">id</span> result, <span class="built_in">NSError</span> *error) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, result);</div><div class="line">&#125;];</div></pre></td></tr></table></figure><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><ul><li>WKWebView需要等待回调才能设置UserAgent；</li><li>UIWebView可以直接返回UserAgent效率更高；</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在和前端交互过程中，为了区分是我们APP内加载网页还是其他应用或浏览器加载的网页，我们需要使用在UserAgent后追加字符串来区分。下面介绍全局和局部修改UserAgent。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://wynter.wang/categories/iOS/"/>
    
    
      <category term="iOS" scheme="https://wynter.wang/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>VS Code常用快捷键</title>
    <link href="https://wynter.wang/2019/02/15/VS%20Code%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6/"/>
    <id>https://wynter.wang/2019/02/15/VS Code常用插件/</id>
    <published>2019-02-15T03:21:13.000Z</published>
    <updated>2019-06-03T09:18:38.405Z</updated>
    
    <content type="html"><![CDATA[<p>VS Code常用插件及常用快捷键</p><a id="more"></a><p>显示所有命令：Command + Shift + P</p><p>打开文件或文件夹：Command + O<br>打开最近文件夹：Control + R</p><p>新建标签页: Command + \<br>切换标签页: Command + 1 Command + 2 Command + 3<br>新建窗口：Command + Shift + N<br>关闭窗口：Command + Shift + W</p><p>切换问题(错误、警告、信息)视图：Command + Shift + M<br>跳转到文件中的符号：Command + Shift + O</p><p>刪除当前行： Command + Shift + K<br>插入一行在当前行上方： Command + Shift + Enter</p><p>代码格式化：Command + Shift + H</p><h1 id="VS-Code插件常用快捷键："><a href="#VS-Code插件常用快捷键：" class="headerlink" title="VS Code插件常用快捷键："></a>VS Code插件常用快捷键：</h1><ul><li><p>Settings Sync：将设置同步到GitHub</p><p>上传：Shift + Alt + U<br>下载：Shift + Alt + D</p></li></ul><h2 id="插件常用命令：Command-Shift-P"><a href="#插件常用命令：Command-Shift-P" class="headerlink" title="插件常用命令：Command + Shift + P"></a>插件常用命令：Command + Shift + P</h2><ul><li>File Template：文件模板，默认支持JavaScript、HTML、CSS、PHP、Python、Ruby、XML、Vue</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;VS Code常用插件及常用快捷键&lt;/p&gt;
    
    </summary>
    
      <category term="VS Code" scheme="https://wynter.wang/categories/VS-Code/"/>
    
    
      <category term="VS Code" scheme="https://wynter.wang/tags/VS-Code/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins 配置iOS自动构建</title>
    <link href="https://wynter.wang/2019/02/15/Jenkins%20%E9%85%8D%E7%BD%AEiOS%E8%87%AA%E5%8A%A8%E6%9E%84%E5%BB%BA/"/>
    <id>https://wynter.wang/2019/02/15/Jenkins 配置iOS自动构建/</id>
    <published>2019-02-15T03:21:13.000Z</published>
    <updated>2019-06-03T09:13:26.573Z</updated>
    
    <content type="html"><![CDATA[<p>通常我们的测试流程是这样：<br>1、开发人员1、开发人员2……提交代码，否则打包的开发人员拉取最新代码；<br>2、使用Xcode-&gt;Archive-&gt;Export-&gt;生成ipa包；<br>3、发给测试人员；</p><p>搭建Jenkins后，开发完成后，测试可以直接在Jenkins上构建ipa包测试，少了我们开发很多事情。</p><a id="more"></a><h3 id="一、Jenkins初始配置"><a href="#一、Jenkins初始配置" class="headerlink" title="一、Jenkins初始配置"></a>一、Jenkins初始配置</h3><p>1、命令安装启动Jenkins<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span> 安装</div><div class="line">brew install jenkins</div><div class="line"><span class="meta">#</span> 启动</div><div class="line">jenkins</div></pre></td></tr></table></figure></p><p>2、在浏览器输入<a href="http://localhost:8080/，第一次启动要设置Jenkins管理员密码" target="_blank" rel="noopener">http://localhost:8080/，第一次启动要设置Jenkins管理员密码</a><br>3、选择安装推荐插件<br>4、创建管理账号密码<br>5、开始使用Jenkins</p><h6 id="emmmm，有点干，初始化的时候忘记截图了"><a href="#emmmm，有点干，初始化的时候忘记截图了" class="headerlink" title="emmmm，有点干，初始化的时候忘记截图了"></a>emmmm，有点干，初始化的时候忘记截图了</h6><h3 id="二、添加配置插件"><a href="#二、添加配置插件" class="headerlink" title="二、添加配置插件"></a>二、添加配置插件</h3><p>搜索安装插件，安装插件后重启Jenkins生效</p><p><img src="https://upload-images.jianshu.io/upload_images/937490-a420ba0ef520e02b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="插件管理1.png"></p><p><img src="https://upload-images.jianshu.io/upload_images/937490-72e50bfccd5604e3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="安装插件.png"></p><h3 id="三、创建配置项目"><a href="#三、创建配置项目" class="headerlink" title="三、创建配置项目"></a>三、创建配置项目</h3><p>1、新建项目<br><img src="https://upload-images.jianshu.io/upload_images/937490-52bc5023f989e13f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Jenkins2.png"></p><p>2、丢弃旧的构版本，我这里设置保留时间5日，保留最大构建数为20，可自行调整<br><img src="https://upload-images.jianshu.io/upload_images/937490-195645677b4a0d90.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="通用配置.png"></p><p>3、配置代码源，git地址、账号密码<br><img src="https://upload-images.jianshu.io/upload_images/937490-c440cb4b3c803af7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="源码管理.png"></p><p>4、构建版本，Xcode 9使用插件构建超级麻烦，我们选择脚本构建<br><img src="https://upload-images.jianshu.io/upload_images/937490-52ce8f06aed17410.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="使用shell构建.png"></p><p>1）将下面脚本修改后粘贴进去，需要修改的地方已经使用<code>****</code>标出来了<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#</span> 获取项目名称</div><div class="line">__PROJECT_NAME=`find . -name *.xcodeproj | awk -F "[/.]" '&#123;print $(NF-1)&#125;'`</div><div class="line"></div><div class="line"><span class="meta">#</span> 已经指定Target的Info.plist文件路径</div><div class="line">__CURRENT_INFO_PLIST_NAME="Info.plist"</div><div class="line"></div><div class="line"><span class="meta">#</span> 获取时间 如:如:2019-05-17_15_45_58</div><div class="line">__CURRENT_DATE="$(date +%Y-%m-%d_%H_%M_%S)"</div><div class="line"></div><div class="line"><span class="meta">#</span>  ****************** ⬇️以下需要修改的参数 ********************</div><div class="line"></div><div class="line"><span class="meta">#</span> 证书</div><div class="line">__CODE_SIGN_DISTRIBUTION="iPhone Distribution: *****  Co., Ltd. (****)"</div><div class="line"></div><div class="line"><span class="meta">#</span> 上传到蒲公英</div><div class="line">__PGYER_U_KEY=""</div><div class="line">__PGYER_API_KEY=""</div><div class="line"></div><div class="line"><span class="meta">#</span> 指定Target名称</div><div class="line">__SCHEME_NAME="SCHEME_NAME"</div><div class="line"></div><div class="line"><span class="meta">#</span> ExportOptions.plist配置，根据打包导出方式不同plist文件配置也不同(Developmemt、AdHoc、App Store)</div><div class="line">ExportOptionsPlistPath="文件路径/Plist/ExportOptionsAdHoc.plist"</div><div class="line"></div><div class="line"><span class="meta">#</span> 指定打包编译的模式，如：Release, Debug...</div><div class="line">__BUILD_CONFIGURATION="Release"</div><div class="line"></div><div class="line"><span class="meta">#</span> 获取 Info.plist 路径</div><div class="line">__CURRENT_INFO_PLIST_PATH="$&#123;__PROJECT_NAME&#125;/Resouce/Plist/$&#123;__CURRENT_INFO_PLIST_NAME&#125;"</div><div class="line"></div><div class="line"><span class="meta">#</span>  ****************** ⤴️以上需要修改的参数 ********************</div><div class="line"></div><div class="line"><span class="meta">#</span> 分隔符</div><div class="line">__LINE_BREAK_LEFT="\n*********"</div><div class="line">__LINE_BREAK_RIGHT=*********\n"</div><div class="line"></div><div class="line"><span class="meta">#</span> 获取版本号</div><div class="line">__BUNDLE_VERSION=`/usr/libexec/PlistBuddy -c "Print CFBundleShortVersionString" $&#123;__CURRENT_INFO_PLIST_PATH&#125;`</div><div class="line"></div><div class="line"><span class="meta">#</span> 获取编译版本号</div><div class="line">__BUNDLE_BUILD_VERSION=`/usr/libexec/PlistBuddy -c "Print CFBundleVersion" $&#123;__CURRENT_INFO_PLIST_PATH&#125;`</div><div class="line"></div><div class="line"><span class="meta">#</span> 编译生成文件目录</div><div class="line">__EXPORT_PATH="/Users/Wynter/Desktop/Archive/$&#123;__SCHEME_NAME&#125;_$&#123;__CURRENT_DATE&#125;"</div><div class="line">echo "$&#123;__LINE_BREAK_LEFT&#125; 编译生成文件目录 $&#123;__EXPORT_PATH&#125; $&#123;__LINE_BREAK_RIGHT&#125;"</div><div class="line"></div><div class="line"><span class="meta">#</span> 归档文件路径</div><div class="line">__EXPORT_ARCHIVE_PATH="$&#123;__EXPORT_PATH&#125;/$&#123;__SCHEME_NAME&#125;.xcarchive"</div><div class="line"></div><div class="line"><span class="meta">#</span> ipa 导出路径</div><div class="line">__EXPORT_IPA_PATH="$&#123;__EXPORT_PATH&#125;"</div><div class="line"></div><div class="line"><span class="meta">#</span> ipa 名字</div><div class="line">__IPA_NAME="$&#123;__SCHEME_NAME&#125;_V$&#123;__BUNDLE_BUILD_VERSION&#125;_$&#123;__CURRENT_DATE&#125;"</div><div class="line"></div><div class="line"><span class="meta">#</span> clean</div><div class="line">echo "================= Clean一下 ================="</div><div class="line">xcodebuild clean  -workspace $&#123;__SCHEME_NAME&#125;.xcworkspace \</div><div class="line">                  -scheme $&#123;__SCHEME_NAME&#125; \</div><div class="line">                  -configuration $&#123;__BUILD_CONFIGURATION&#125; \</div><div class="line"></div><div class="line"><span class="meta">#</span>-alltargets</div><div class="line">echo "================= Clean一下 Over ================="</div><div class="line"></div><div class="line"><span class="meta">#</span> archive</div><div class="line">echo "============== archive =================="</div><div class="line">xcodebuild archive  -workspace $&#123;__SCHEME_NAME&#125;.xcworkspace \</div><div class="line">                    -scheme $&#123;__SCHEME_NAME&#125; \</div><div class="line">                    -configuration $&#123;__BUILD_CONFIGURATION&#125; \</div><div class="line">                    -archivePath $&#123;__EXPORT_ARCHIVE_PATH&#125; \</div><div class="line">                    CFBundleVersion=$&#123;__BUNDLE_BUILD_VERSION&#125; \</div><div class="line">                    -destination generic/platform=ios \</div><div class="line">                    CODE_SIGN_IDENTITY="$&#123;__CODE_SIGN_DISTRIBUTION&#125;"</div><div class="line"></div><div class="line"><span class="meta">#</span> export ipa</div><div class="line">echo "+++++++++++++++++ exportArchive +++++++++++++++++"</div><div class="line">xcodebuild -exportArchive -archivePath $&#123;__EXPORT_ARCHIVE_PATH&#125; \</div><div class="line">                          -exportPath $&#123;__EXPORT_IPA_PATH&#125;\</div><div class="line">                          -destination generic/platform=ios\</div><div class="line">                          -exportOptionsPlist $&#123;ExportOptionsPlistPath&#125;\</div><div class="line">                          -allowProvisioningUpdates</div><div class="line">                          </div><div class="line"><span class="meta">#</span> 修改ipa文件名称</div><div class="line">mv $&#123;__EXPORT_IPA_PATH&#125;/$&#123;__SCHEME_NAME&#125;.ipa $&#123;__EXPORT_IPA_PATH&#125;/$&#123;__IPA_NAME&#125;.ipa</div><div class="line"></div><div class="line"><span class="meta">#</span> 上传到蒲公英</div><div class="line">curl -F "file=@$&#123;__EXPORT_IPA_PATH&#125;/$&#123;__IPA_NAME&#125;.ipa" \</div><div class="line">-F "uKey=$&#123;__PGYER_U_KEY&#125;" \</div><div class="line">-F "_api_key=$&#123;__PGYER_API_KEY&#125;" \</div><div class="line">"http://www.pgyer.com/apiv1/app/upload"</div><div class="line"></div><div class="line">open $&#123;__EXPORT_IPA_PATH&#125;</div></pre></td></tr></table></figure></p><p>2）修改plist文件配置后保存到本地，然后在ExportOptionsPlistPath变量后写明路径<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="meta">&lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">plist</span> <span class="attr">version</span>=<span class="string">"1.0"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dict</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>compileBitcode<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">false</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>method<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 打包模式 如：ad-hoc、app-store --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>ad-hoc<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>provisioningProfiles<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dict</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- Bundle Identfier --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>com.***<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 配置文件名称 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>projectName_adhoc<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dict</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>signingCertificate<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>iPhone Distribution<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>signingStyle<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>manual<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>stripSwiftSymbols<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">true</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>teamID<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- teamID --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>***<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>thinning<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>&amp;lt;none&amp;gt;<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dict</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">plist</span>&gt;</span></div><div class="line">![创建项目.jpg](https://upload-images.jianshu.io/upload_images/937490-22d67ae7274efa1b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</div></pre></td></tr></table></figure></p><p>5、构建完成后发邮件通知</p><p>1）项目中添加邮件通知</p><p><img src="https://upload-images.jianshu.io/upload_images/937490-91418fb5eb626f49.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="添加邮件通知.png"></p><p>2）配置收发件人信息，系统设置-&gt;邮件插件管理</p><p><img src="https://upload-images.jianshu.io/upload_images/937490-4619d1f21e7a4c30.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="系统设置邮件.png"><br><img src="https://upload-images.jianshu.io/upload_images/937490-b0af0e79bcbd84b5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="邮件通知2.png"></p><p><img src="https://upload-images.jianshu.io/upload_images/937490-5eca64d32d455ac1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="构建成功失败邮件通知.png"></p><h3 id="四、构建项目"><a href="#四、构建项目" class="headerlink" title="四、构建项目"></a>四、构建项目</h3><p>1、点击立即构建，左下方会出现构建历史<br>红色表示失败，蓝色表示成功，灰色表示取消<br><img src="https://upload-images.jianshu.io/upload_images/937490-43903c021cf0b346.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="构建历史.png"><br>2、查看构建日志，如果构建失败我们可以通过日志分析<br><img src="https://upload-images.jianshu.io/upload_images/937490-ffa54375c3bc08fc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="构建日志.png"></p><h3 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h3><p>折腾完了发现还是挺简单的，麻烦的也就是脚本配置。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;通常我们的测试流程是这样：&lt;br&gt;1、开发人员1、开发人员2……提交代码，否则打包的开发人员拉取最新代码；&lt;br&gt;2、使用Xcode-&amp;gt;Archive-&amp;gt;Export-&amp;gt;生成ipa包；&lt;br&gt;3、发给测试人员；&lt;/p&gt;
&lt;p&gt;搭建Jenkins后，开发完成后，测试可以直接在Jenkins上构建ipa包测试，少了我们开发很多事情。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://wynter.wang/categories/iOS/"/>
    
    
      <category term="iOS" scheme="https://wynter.wang/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS 利用KVO和KVC解决SDCycleScrollView功能缺陷</title>
    <link href="https://wynter.wang/2019/02/15/iOS%20%E5%88%A9%E7%94%A8KVO%E5%92%8CKVC%E8%A7%A3%E5%86%B3SDCycleScrollView%E5%8A%9F%E8%83%BD%E7%BC%BA%E9%99%B7/"/>
    <id>https://wynter.wang/2019/02/15/iOS 利用KVO和KVC解决SDCycleScrollView功能缺陷/</id>
    <published>2019-02-15T03:21:13.000Z</published>
    <updated>2019-02-15T08:50:17.388Z</updated>
    
    <content type="html"><![CDATA[<p>SDCycleScrollView使用起来非常便利，可能一些小细节会自己的需求不符，在不修改源代码的情况下项目中做了调整来满足UI需求，记录下一下。</p><a id="more"></a><h2 id="解决分页控件不能靠右问题"><a href="#解决分页控件不能靠右问题" class="headerlink" title="解决分页控件不能靠右问题"></a>解决分页控件不能靠右问题</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">[[self.adScrollView valueForKeyPath:@&quot;_pageControl&quot;] addObserver:self forKeyPath:@&quot;hidden&quot; options:NSKeyValueObservingOptionNew context:nil];</div><div class="line"></div><div class="line">- (void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary *)change context:(void *)context&#123;</div><div class="line">    if([keyPath isEqualToString:@&quot;hidden&quot;]) &#123;</div><div class="line">        UIControl *pageControl = [self.adScrollView valueForKeyPath:@&quot;_pageControl&quot;];</div><div class="line">        CGRect frame = pageControl.frame;</div><div class="line">        frame.origin.x = 15;</div><div class="line">        pageControl.frame = frame;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 注销监听</div><div class="line">- (void)dealloc&#123;</div><div class="line">    [[self.adScrollView valueForKeyPath:@&quot;_pageControl&quot;] removeObserver:self forKeyPath:@&quot;hidden&quot;];</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="解决背景图片不能铺满问题"><a href="#解决背景图片不能铺满问题" class="headerlink" title="解决背景图片不能铺满问题"></a>解决背景图片不能铺满问题</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">UIImageView *backgroundImageView = [cycleScrollView valueForKeyPath:@&quot;_backgroundImageView&quot;];</div><div class="line">backgroundImageView.contentMode = UIViewContentModeScaleToFill;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;SDCycleScrollView使用起来非常便利，可能一些小细节会自己的需求不符，在不修改源代码的情况下项目中做了调整来满足UI需求，记录下一下。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://wynter.wang/categories/iOS/"/>
    
    
      <category term="iOS" scheme="https://wynter.wang/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS  处理导致JSON解析失败的特殊字符</title>
    <link href="https://wynter.wang/2019/02/15/iOS%20%20%E5%A4%84%E7%90%86%E5%AF%BC%E8%87%B4JSON%E8%A7%A3%E6%9E%90%E5%A4%B1%E8%B4%A5%E7%9A%84%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6/"/>
    <id>https://wynter.wang/2019/02/15/iOS  处理导致JSON解析失败的特殊字符/</id>
    <published>2019-02-15T03:21:13.000Z</published>
    <updated>2019-02-15T08:02:22.749Z</updated>
    
    <content type="html"><![CDATA[<p>在网络请求完成后会获得NSData类型的数据，通常情况下直接使用<code>+ ( id)JSONObjectWithData:options: error:</code>方法转换即可，但实际开发数据中会包含一些特殊字符导致解析失败。</p><a id="more"></a><p>目前找到导致JSON解析失败的字符串如下：</p><blockquote><p>\ \’     \n    \r    \t    \\    \f    \b    \v</p></blockquote><h2 id="方法一：删除特殊字符"><a href="#方法一：删除特殊字符" class="headerlink" title="方法一：删除特殊字符"></a>方法一：删除特殊字符</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">NSString *jsonStr = @&quot;&#123;\&quot;code\&quot;:\&quot;0\&quot;,\&quot;data\&quot;:&#123;\&quot;content\&quot;:\&quot;1、\&apos;    2、\r\n    3、\n    4、\r    5、\t    6、\\    7、\f    8、\b   9、\v  \&quot;&#125;,\&quot;message\&quot;:\&quot;操作成功\&quot;&#125;&quot;;</div><div class="line"></div><div class="line">jsonStr = [jsonStr stringByReplacingOccurrencesOfString:@&quot;\&apos;&quot; withString:@&quot;&quot;];</div><div class="line">jsonStr = [jsonStr stringByReplacingOccurrencesOfString:@&quot;\n&quot; withString:@&quot;&quot;];</div><div class="line">jsonStr = [jsonStr stringByReplacingOccurrencesOfString:@&quot;\r&quot; withString:@&quot;&quot;];</div><div class="line">jsonStr = [jsonStr stringByReplacingOccurrencesOfString:@&quot;\t&quot; withString:@&quot;&quot;];</div><div class="line">jsonStr = [jsonStr stringByReplacingOccurrencesOfString:@&quot;\\&quot; withString:@&quot;&quot;];</div><div class="line">jsonStr = [jsonStr stringByReplacingOccurrencesOfString:@&quot;\f&quot; withString:@&quot;&quot;];</div><div class="line">jsonStr = [jsonStr stringByReplacingOccurrencesOfString:@&quot;\b&quot; withString:@&quot;&quot;];</div><div class="line">jsonStr = [jsonStr stringByReplacingOccurrencesOfString:@&quot;\v&quot; withString:@&quot;&quot;];</div><div class="line">NSData *jsonData = [jsonStr dataUsingEncoding:NSUTF8StringEncoding];</div><div class="line">NSDictionary *dic = [NSJSONSerialization JSONObjectWithData:jsonData options:NSJSONReadingMutableContainers error:nil];</div></pre></td></tr></table></figure><h2 id="方法二：使用-进行转译处理"><a href="#方法二：使用-进行转译处理" class="headerlink" title="方法二：使用 \ 进行转译处理"></a>方法二：使用 \ 进行转译处理</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">NSString *jsonStr = @&quot;&#123;\&quot;code\&quot;:\&quot;0\&quot;,\&quot;data\&quot;:&#123;\&quot;content\&quot;:\&quot;1、\&apos;    2、\r\n    3、\n    4、\r    5、\t    6、\\    7、\f    8、\b   9、\v  \&quot;&#125;,\&quot;message\&quot;:\&quot;操作成功\&quot;&#125;&quot;;</div><div class="line">jsonStr = [jsonStr stringByReplacingOccurrencesOfString:@&quot;(\&apos;)&quot; withString:@&quot;\\\\&apos;&quot; options:NSRegularExpressionSearch range:NSMakeRange(0, jsonStr.length)];</div><div class="line">jsonStr = [jsonStr stringByReplacingOccurrencesOfString:@&quot;(\n)&quot; withString:@&quot;\\\\n&quot; options:NSRegularExpressionSearch range:NSMakeRange(0, jsonStr.length)];</div><div class="line">jsonStr = [jsonStr stringByReplacingOccurrencesOfString:@&quot;(\r)&quot; withString:@&quot;\\\\r&quot; options:NSRegularExpressionSearch range:NSMakeRange(0, jsonStr.length)];</div><div class="line">jsonStr = [jsonStr stringByReplacingOccurrencesOfString:@&quot;(\t)&quot; withString:@&quot;\\\\t&quot; options:NSRegularExpressionSearch range:NSMakeRange(0, jsonStr.length)];</div><div class="line">jsonStr = [jsonStr stringByReplacingOccurrencesOfString:@&quot;(\f)&quot; withString:@&quot;\\\\f&quot; options:NSRegularExpressionSearch range:NSMakeRange(0, jsonStr.length)];</div><div class="line">jsonStr = [jsonStr stringByReplacingOccurrencesOfString:@&quot;(\b)&quot; withString:@&quot;\\\\b&quot; options:NSRegularExpressionSearch range:NSMakeRange(0, jsonStr.length)];</div><div class="line">jsonStr = [jsonStr stringByReplacingOccurrencesOfString:@&quot;(\v)&quot; withString:@&quot;\\\\v&quot; options:NSRegularExpressionSearch range:NSMakeRange(0, jsonStr.length)];</div><div class="line">jsonStr = [jsonStr stringByReplacingOccurrencesOfString:@&quot;(\\\\)&quot; withString:@&quot;\\\\\\\\&quot; options:NSRegularExpressionSearch range:NSMakeRange(0, jsonStr.length)];</div><div class="line">NSData *jsonData = [jsonStr dataUsingEncoding:NSUTF8StringEncoding];</div><div class="line">NSDictionary *dic = [NSJSONSerialization JSONObjectWithData:jsonData options:NSJSONReadingMutableContainers error:nil];</div></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>直接删除特殊字符相对来说比较暴力，推荐使用\进行转译处理特殊字符串</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在网络请求完成后会获得NSData类型的数据，通常情况下直接使用&lt;code&gt;+ ( id)JSONObjectWithData:options: error:&lt;/code&gt;方法转换即可，但实际开发数据中会包含一些特殊字符导致解析失败。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://wynter.wang/categories/iOS/"/>
    
    
      <category term="iOS" scheme="https://wynter.wang/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS 获取隐私权限大全</title>
    <link href="https://wynter.wang/2018/12/10/iOS-10-%E8%8E%B7%E5%8F%96%E7%B3%BB%E7%BB%9F%E6%9D%83%E9%99%90/"/>
    <id>https://wynter.wang/2018/12/10/iOS-10-获取系统权限/</id>
    <published>2018-12-10T01:13:16.000Z</published>
    <updated>2018-12-10T03:23:19.007Z</updated>
    
    <content type="html"><![CDATA[<p>从iOS 10开始获取用户隐私数据都需要在info.plist文件中配置对应的权限。在没有配置权限下调系统接口直接闪退，也是很苹果。</p><p>目前涉及16种隐私权限，分别是蓝牙、日历、相机、通讯录、Face ID、健康分享、住宅配件、位置、麦克风、运动与健身、媒体与Apple Music、NFC、相册、提醒事项、Siri、 语音识别。</p><a id="more"></a><h2 id="配置权限的XML格式"><a href="#配置权限的XML格式" class="headerlink" title="配置权限的XML格式"></a>配置权限的XML格式</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 蓝牙 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>NSBluetoothPeripheralUsageDescription<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>App需要您的同意,才能访问蓝牙<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 日历 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>NSCalendarsUsageDescription<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>App需要您的同意,才能访问日历<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 相机 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>NSCameraUsageDescription<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>App需要您的同意,才能访问相机<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 通讯录 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>NSContactsUsageDescription<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>App需要您的同意,才能访问通讯录<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Face ID --&gt;</span> </div><div class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>NSFaceIDUsageDescription<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>App需要您的同意,才能访问Face ID<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 健康分享 --&gt;</span> </div><div class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>NSHealthShareUsageDescription<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>App需要您的同意,才能访问健康分享<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 健康更新 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>NSHealthUpdateUsageDescription<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>App需要您的同意,才能访问健康更新 <span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 住宅配件 --&gt;</span> </div><div class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>NSHomeKitUsageDescription<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>App需要您的同意,才能访问住宅配件 <span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 位置 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>NSLocationUsageDescription<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>App需要您的同意,才能访问位置<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 始终访问位置 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>NSLocationAlwaysUsageDescription<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>App需要您的同意,才能始终访问位置<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 在使用期间访问位置 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>NSLocationWhenInUseUsageDescription<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>App需要您的同意,才能在使用期间访问位置<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 麦克风 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>NSMicrophoneUsageDescription<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>App需要您的同意,才能访问麦克风<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 运动与健身 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>NSMotionUsageDescription<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>App需要您的同意,才能访问运动与健身<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 媒体资料库 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>NSAppleMusicUsageDescription<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>App需要您的同意,才能访问媒体资料库<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- NFC --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>NFCReaderUsageDescription<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>App需要您的同意,才能访问NFC<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 相册 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>NSPhotoLibraryUsageDescription<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>App需要您的同意,才能访问相册<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 提醒事项 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>NSRemindersUsageDescription<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>App需要您的同意,才能访问提醒事项<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Siri --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>NSSiriUsageDescription<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>App需要您的同意,才能使用Siri功能<span class="tag">&lt;/<span class="name">string</span>&gt;</span> </div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 语音识别 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>NSSpeechRecognitionUsageDescription<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>App需要您的同意,才能使用语音识别功能<span class="tag">&lt;/<span class="name">string</span>&gt;</span> </div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 电视提供商 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>NSVideoSubscriberAccountUsageDescription<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>App需要您的同意,才能访问电视提供商<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div></pre></td></tr></table></figure><h2 id="需要引入的库"><a href="#需要引入的库" class="headerlink" title="需要引入的库"></a>需要引入的库</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">#import &lt;CoreBluetooth/CoreBluetooth.h&gt;</div><div class="line">#import &lt;EventKit/EventKit.h&gt;</div><div class="line">#import &lt;AVFoundation/AVFoundation.h&gt;</div><div class="line">#import &lt;Contacts/Contacts.h&gt;</div><div class="line">#import &lt;LocalAuthentication/LocalAuthentication.h&gt;</div><div class="line">#import &lt;HealthKit/HealthKit.h&gt;</div><div class="line">#import &lt;HomeKit/HomeKit.h&gt;</div><div class="line">#import &lt;CoreLocation/CoreLocation.h&gt;</div><div class="line">#import &lt;CoreMotion/CoreMotion.h&gt;</div><div class="line">#import &lt;StoreKit/StoreKit.h&gt;</div><div class="line">#import &lt;CoreNFC/CoreNFC.h&gt;</div><div class="line">#import &lt;Photos/Photos.h&gt;</div><div class="line">#import &lt;Intents/Intents.h&gt;</div><div class="line">#import &lt;Speech/Speech.h&gt;</div></pre></td></tr></table></figure><h2 id="Capabilities中开启相应开关"><a href="#Capabilities中开启相应开关" class="headerlink" title="Capabilities中开启相应开关"></a>Capabilities中开启相应开关</h2><p><img src="https://upload-images.jianshu.io/upload_images/937490-b315a845fe199715.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Capabilities.png"></p><h2 id="请求获取隐私权限"><a href="#请求获取隐私权限" class="headerlink" title="请求获取隐私权限"></a>请求获取隐私权限</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">#pragma mark - 请求访问蓝牙权限</div><div class="line">- (void)requestAccessBluetoothWithCompletionBlock:(AuthorizationStateCompletionBlock)completionBlock  &#123;</div><div class="line">    self.bluetoothManager = [[CBCentralManager alloc]initWithDelegate:self queue:nil];</div><div class="line">    self.bluetoothStateCompletionBlock = completionBlock;</div><div class="line">&#125;</div><div class="line"></div><div class="line">#pragma mark - CBCentralManagerDelegate</div><div class="line">- (void)centralManagerDidUpdateState:(CBCentralManager *)central &#123;</div><div class="line">    CBManagerState state = central.state;</div><div class="line">    </div><div class="line">    WTAuthorizationState wtState = WTAuthorizationStateUnkonw;</div><div class="line">    if (state == CBManagerStateResetting) &#123; // 重置或重新连接</div><div class="line">        wtState = WTAuthorizationStateUnkonw;</div><div class="line">    &#125; else if (state == CBManagerStateUnsupported) &#123;</div><div class="line">        wtState = WTAuthorizationStateUnsupported;</div><div class="line">    &#125; else if (state == CBManagerStateUnauthorized) &#123;</div><div class="line">        wtState = WTAuthorizationStateUnauthorized;</div><div class="line">    &#125; else if (state == CBManagerStatePoweredOff) &#123;</div><div class="line">        wtState = WTAuthorizationStateDenied;</div><div class="line">    &#125; else if (state == CBManagerStatePoweredOn) &#123;</div><div class="line">        wtState = WTAuthorizationStateAuthorized;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    [self respondWithState:wtState CompletionBlock:self.bluetoothStateCompletionBlock];</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">#pragma mark - 请求日历访问权限</div><div class="line">- (void)requestAccessCalendarWithCompletionBlock:(AuthorizationStateCompletionBlock)completionBlock &#123;</div><div class="line">    EKAuthorizationStatus status = [EKEventStore authorizationStatusForEntityType:EKEntityTypeEvent];</div><div class="line">    </div><div class="line">    __block WTAuthorizationState wtState = WTAuthorizationStateUnkonw;</div><div class="line">    if (status == EKAuthorizationStatusNotDetermined) &#123;</div><div class="line">        EKEventStore *store = [[EKEventStore alloc] init];</div><div class="line">        __weak __typeof(self)weakSelf = self;</div><div class="line">        [store requestAccessToEntityType:EKEntityTypeEvent completion:^(BOOL granted, NSError *error) &#123;</div><div class="line">            if (error) &#123;&#125; else &#123;</div><div class="line">                if (granted) &#123;</div><div class="line">                    wtState = WTAuthorizationStateAuthorized;</div><div class="line">                &#125; else &#123;</div><div class="line">                    wtState = WTAuthorizationStateDenied;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            [weakSelf respondWithState:wtState CompletionBlock:completionBlock];</div><div class="line">        &#125;];</div><div class="line">        return;</div><div class="line">    &#125; else if (status == EKAuthorizationStatusRestricted) &#123;</div><div class="line">        wtState = WTAuthorizationStateUnkonw;</div><div class="line">    &#125; else if (status == EKAuthorizationStatusDenied) &#123;</div><div class="line">        wtState = WTAuthorizationStateDenied;</div><div class="line">    &#125; else &#123;</div><div class="line">        wtState = WTAuthorizationStateAuthorized;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    [self respondWithState:wtState CompletionBlock:completionBlock];</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"> #pragma mark - 请求相机访问权限</div><div class="line">- (void)requestAccessCameraWithCompletionBlock:(AuthorizationStateCompletionBlock)completionBlock &#123;</div><div class="line">    __weak __typeof(self)weakSelf = self;</div><div class="line">    __block WTAuthorizationState wtState = WTAuthorizationStateUnkonw;</div><div class="line">    if ([UIImagePickerController isSourceTypeAvailable:UIImagePickerControllerSourceTypeCamera]) &#123;</div><div class="line">    </div><div class="line">        AVAuthorizationStatus status = [AVCaptureDevice authorizationStatusForMediaType:AVMediaTypeVideo];</div><div class="line">        </div><div class="line">        if (status == AVAuthorizationStatusNotDetermined) &#123;</div><div class="line">            </div><div class="line">            [AVCaptureDevice requestAccessForMediaType:AVMediaTypeVideo completionHandler:^(BOOL granted) &#123;</div><div class="line">                if (granted) &#123;</div><div class="line">                    wtState = WTAuthorizationStateAuthorized;</div><div class="line">                &#125;else&#123;</div><div class="line">                    wtState = WTAuthorizationStateDenied;</div><div class="line">                &#125;</div><div class="line">                [weakSelf respondWithState:wtState CompletionBlock:completionBlock];</div><div class="line">            &#125;];</div><div class="line">            return;</div><div class="line">        &#125; else if (status == AVAuthorizationStatusRestricted) &#123;</div><div class="line">        &#125; else if (status == AVAuthorizationStatusDenied) &#123;</div><div class="line">            wtState = WTAuthorizationStateDenied;</div><div class="line">        &#125; else &#123;</div><div class="line">            wtState = WTAuthorizationStateAuthorized;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">    &#125; else &#123;</div><div class="line">        wtState = WTAuthorizationStateUnsupported;</div><div class="line">    &#125;</div><div class="line">    [self respondWithState:wtState CompletionBlock:completionBlock];</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">#pragma mark - 请求通讯录访问权限</div><div class="line">- (void)requestAccessContactsWithCompletionBlock:(AuthorizationStateCompletionBlock)completionBlock &#123;</div><div class="line">    CNAuthorizationStatus status = [CNContactStore authorizationStatusForEntityType:CNEntityTypeContacts];</div><div class="line">    __weak __typeof(self)weakSelf = self;</div><div class="line">    __block WTAuthorizationState wtState = WTAuthorizationStateUnkonw;</div><div class="line">    if (status == CNAuthorizationStatusNotDetermined) &#123;</div><div class="line">        CNContactStore *contactStore = [[CNContactStore alloc] init];</div><div class="line">        [contactStore requestAccessForEntityType:CNEntityTypeContacts completionHandler:^(BOOL granted, NSError *error) &#123;</div><div class="line">            if (error) &#123;&#125; else &#123;</div><div class="line">                if (granted) &#123;</div><div class="line">                    wtState = WTAuthorizationStateAuthorized;</div><div class="line">                &#125; else &#123;</div><div class="line">                    wtState = WTAuthorizationStateDenied;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            [weakSelf respondWithState:wtState CompletionBlock:completionBlock];</div><div class="line">        &#125;];</div><div class="line">        return;</div><div class="line">    &#125; else if (status == CNAuthorizationStatusRestricted) &#123;</div><div class="line">    &#125; else if (status == CNAuthorizationStatusDenied) &#123;</div><div class="line">        wtState = WTAuthorizationStateDenied;</div><div class="line">    &#125; else &#123;</div><div class="line">        wtState = WTAuthorizationStateAuthorized;</div><div class="line">    &#125;</div><div class="line">    [self respondWithState:wtState CompletionBlock:completionBlock];</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">#pragma mark - Face ID访问权限</div><div class="line">- (void)requestAccessFaceIDWithCompletionBlock:(AuthorizationStateCompletionBlock)completionBlock &#123;</div><div class="line">    if ([UIDevice currentDevice].systemVersion.floatValue &lt; 11.0f) &#123;</div><div class="line">        [self respondWithState:WTAuthorizationStateUnsupported CompletionBlock:completionBlock];</div><div class="line">    &#125;</div><div class="line">    LAContext *authenticationContext = [[LAContext alloc]init];</div><div class="line">    NSError *error = nil;</div><div class="line">    __weak __typeof(self)weakSelf = self;</div><div class="line">    __block WTAuthorizationState wtState = WTAuthorizationStateUnkonw;</div><div class="line">    BOOL canEvaluatePolicy = [authenticationContext canEvaluatePolicy:LAPolicyDeviceOwnerAuthenticationWithBiometrics error:&amp;error];</div><div class="line">    if (canEvaluatePolicy) &#123;</div><div class="line">        if (authenticationContext.biometryType == LABiometryTypeFaceID) &#123;</div><div class="line">            [authenticationContext evaluatePolicy:LAPolicyDeviceOwnerAuthenticationWithBiometrics localizedReason:@&quot;&quot; reply:^(BOOL success, NSError * _Nullable error) &#123;</div><div class="line">                if (error) &#123;&#125; else &#123;</div><div class="line">                    if (success) &#123;</div><div class="line">                        wtState = WTAuthorizationStateAuthorized;</div><div class="line">                    &#125; else &#123;</div><div class="line">                        wtState = WTAuthorizationStateDenied;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                [weakSelf respondWithState:wtState CompletionBlock:completionBlock];</div><div class="line">            &#125;];</div><div class="line">            return;</div><div class="line">        &#125; else &#123;</div><div class="line">            wtState = WTAuthorizationStateUnsupported;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    [self respondWithState:wtState CompletionBlock:completionBlock];</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">#pragma mark - 获取健康心率 需要具体权限可以修改 HKQuantityTypeIdentifier</div><div class="line">- (void)requestAccessHealthWithCompletionBlock:(AuthorizationStateCompletionBlock)completionBlock &#123;</div><div class="line">    __block WTAuthorizationState wtState = WTAuthorizationStateUnkonw;</div><div class="line">    if ([HKHealthStore isHealthDataAvailable]) &#123;</div><div class="line">        HKHealthStore *healthStore = [[HKHealthStore alloc] init];</div><div class="line">        __weak __typeof(self)weakSelf = self;</div><div class="line">        HKQuantityType *heartRateType = [HKQuantityType quantityTypeForIdentifier:HKQuantityTypeIdentifierHeartRate];</div><div class="line">        HKAuthorizationStatus status = [healthStore authorizationStatusForType:heartRateType];</div><div class="line">        </div><div class="line">        if (status == HKAuthorizationStatusNotDetermined) &#123;</div><div class="line">            NSSet *typeSet = [NSSet setWithObject:heartRateType];</div><div class="line">            [healthStore requestAuthorizationToShareTypes:typeSet readTypes:typeSet completion:^(BOOL success, NSError * _Nullable error) &#123;</div><div class="line">                if (success) &#123;</div><div class="line">                    HKAuthorizationStatus status = [healthStore authorizationStatusForType:heartRateType];</div><div class="line">                    if (status == HKAuthorizationStatusNotDetermined) &#123;</div><div class="line">                        wtState = WTAuthorizationStateUnauthorized;</div><div class="line">                    &#125; else if (status == HKAuthorizationStatusSharingAuthorized) &#123;</div><div class="line">                        wtState = WTAuthorizationStateAuthorized;</div><div class="line">                    &#125; else &#123;</div><div class="line">                        wtState = WTAuthorizationStateDenied;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                [weakSelf respondWithState:wtState CompletionBlock:completionBlock];</div><div class="line">            &#125;];</div><div class="line">            return;</div><div class="line">        &#125; else if (status == HKAuthorizationStatusSharingAuthorized) &#123;</div><div class="line">            wtState = WTAuthorizationStateAuthorized;</div><div class="line">        &#125; else &#123;</div><div class="line">            wtState = WTAuthorizationStateDenied;</div><div class="line">        &#125;</div><div class="line">    &#125; else &#123;</div><div class="line">        wtState = WTAuthorizationStateUnsupported;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    [self respondWithState:wtState CompletionBlock:completionBlock];</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">#pragma mark - HomeKit</div><div class="line">- (void)requestAccessHomeKitWithCompletionBlock:(AuthorizationStateCompletionBlock)completionBlock &#123;</div><div class="line">    self.homeManager = [[HMHomeManager alloc] init];</div><div class="line">    self.homeManager.delegate = self;</div><div class="line">    self.homeKitCompletionBlock = completionBlock;</div><div class="line">&#125;</div><div class="line"></div><div class="line">#pragma mark - HMHomeManagerDelegate</div><div class="line">- (void)homeManagerDidUpdateHomes:(HMHomeManager *)manager &#123;</div><div class="line">    __block WTAuthorizationState wtState = WTAuthorizationStateUnkonw;</div><div class="line">    if (manager.homes.count &gt; 0) &#123;</div><div class="line">        wtState = WTAuthorizationStateAuthorized;</div><div class="line">       [self respondWithState:wtState CompletionBlock:self.homeKitCompletionBlock];</div><div class="line">    &#125; else &#123;</div><div class="line">        __weak __typeof(self)weakSelf = self;</div><div class="line">        __weak HMHomeManager *weakHomeManager = manager;</div><div class="line">        [manager addHomeWithName:@&quot;Test Home&quot; completionHandler:^(HMHome * _Nullable home, NSError * _Nullable error) &#123;</div><div class="line">            if (error) &#123;</div><div class="line">                wtState = WTAuthorizationStateAuthorized;</div><div class="line">            &#125; else &#123;</div><div class="line">                if (error.code == HMErrorCodeHomeAccessNotAuthorized) &#123;</div><div class="line">                    wtState = WTAuthorizationStateDenied;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            [weakSelf respondWithState:wtState CompletionBlock:self.homeKitCompletionBlock];</div><div class="line">            </div><div class="line">            if (home) &#123;</div><div class="line">                [weakHomeManager removeHome:home completionHandler:^(NSError * _Nullable error) &#123;</div><div class="line">                &#125;];</div><div class="line">            &#125;</div><div class="line">        &#125;];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">#pragma mark - 位置访问权限</div><div class="line">- (void)requestAccessLocationWithCompletionBlock:(AuthorizationStateCompletionBlock)completionBlock &#123;</div><div class="line">    self.locationCompletionBlock = completionBlock;</div><div class="line">    self.locationManager = [[CLLocationManager alloc] init];</div><div class="line">    self.locationManager.delegate = self;</div><div class="line">    [self.locationManager requestWhenInUseAuthorization];</div><div class="line">    [self.locationManager startUpdatingLocation];</div><div class="line">&#125;</div><div class="line"></div><div class="line">#pragma mark - CLLocationManagerDelegate</div><div class="line">- (void)locationManager:(CLLocationManager *)manager didChangeAuthorizationStatus:(CLAuthorizationStatus)status &#123;</div><div class="line">    WTAuthorizationState wtState = WTAuthorizationStateUnkonw;</div><div class="line">    switch (status) &#123;</div><div class="line">        case kCLAuthorizationStatusNotDetermined:&#123;</div><div class="line">            wtState = WTAuthorizationStateUnauthorized;</div><div class="line">            break;</div><div class="line">        &#125;</div><div class="line">        case kCLAuthorizationStatusRestricted:&#123;</div><div class="line">            break;</div><div class="line">        &#125;</div><div class="line">        case kCLAuthorizationStatusDenied:&#123;</div><div class="line">            wtState = WTAuthorizationStateDenied;</div><div class="line">            break;</div><div class="line">        &#125;</div><div class="line">        case kCLAuthorizationStatusAuthorizedAlways:&#123;</div><div class="line">            wtState = WTAuthorizationStateAuthorized;</div><div class="line">            break;</div><div class="line">        &#125;</div><div class="line">        case kCLAuthorizationStatusAuthorizedWhenInUse:&#123;</div><div class="line">            wtState = WTAuthorizationStateAuthorized;</div><div class="line">            break;</div><div class="line">        &#125;</div><div class="line">        default:</div><div class="line">            break;</div><div class="line">    &#125;</div><div class="line">    [self respondWithState:wtState CompletionBlock:self.locationCompletionBlock];</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">#pragma mark - 麦克风</div><div class="line">- (void)requestAccessMicrophoneWithCompletionBlock:(AuthorizationStateCompletionBlock)completionBlock &#123;</div><div class="line">    __weak __typeof(self)weakSelf = self;</div><div class="line">   __block WTAuthorizationState wtState = WTAuthorizationStateUnkonw;</div><div class="line">    AVAuthorizationStatus status = [AVCaptureDevice authorizationStatusForMediaType:AVMediaTypeAudio];</div><div class="line">    </div><div class="line">    if (status == AVAuthorizationStatusNotDetermined) &#123;</div><div class="line">        [[AVAudioSession sharedInstance] requestRecordPermission:^(BOOL granted) &#123;</div><div class="line">            if (granted) &#123;</div><div class="line">                wtState = WTAuthorizationStateAuthorized;</div><div class="line">            &#125; else &#123;</div><div class="line">                wtState = WTAuthorizationStateDenied;</div><div class="line">            &#125;</div><div class="line">            [weakSelf respondWithState:wtState CompletionBlock:completionBlock];</div><div class="line">        &#125;];</div><div class="line">        return;</div><div class="line">    &#125; else if (status == AVAuthorizationStatusRestricted) &#123;</div><div class="line">    &#125; else if (status == AVAuthorizationStatusDenied) &#123;</div><div class="line">       wtState = WTAuthorizationStateDenied;</div><div class="line">    &#125; else &#123;</div><div class="line">        wtState = WTAuthorizationStateAuthorized;</div><div class="line">    &#125;</div><div class="line">    [self respondWithState:wtState CompletionBlock:completionBlock];</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">#pragma mark - 运动与健身 不需要回调</div><div class="line">- (void)requestAccessMotionWithCompletionBlock:(AuthorizationStateCompletionBlock)completionBlock &#123;</div><div class="line">    __weak __typeof(self)weakSelf = self;</div><div class="line">    CMMotionActivityManager *manager = [[CMMotionActivityManager alloc] init];</div><div class="line">    NSOperationQueue *queue = [[NSOperationQueue alloc] init];</div><div class="line">    [manager startActivityUpdatesToQueue:queue withHandler:^(CMMotionActivity * _Nullable activity) &#123;</div><div class="line">        [manager stopActivityUpdates];</div><div class="line">        [weakSelf respondWithState:WTAuthorizationStateAuthorized CompletionBlock:completionBlock];</div><div class="line">    &#125;];</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">#pragma mark - 媒体与Apple Music</div><div class="line">- (void)requestAccessMediaWithCompletionBlock:(AuthorizationStateCompletionBlock)completionBlock &#123;</div><div class="line">    if ([UIDevice currentDevice].systemVersion.floatValue &lt; 9.3f) &#123;</div><div class="line">        [self respondWithState:WTAuthorizationStateUnsupported CompletionBlock:completionBlock];</div><div class="line">    &#125;</div><div class="line">    __weak __typeof(self)weakSelf = self;</div><div class="line">    __block WTAuthorizationState wtState = WTAuthorizationStateUnkonw;</div><div class="line">    </div><div class="line">    SKCloudServiceAuthorizationStatus status = [SKCloudServiceController authorizationStatus];</div><div class="line">    if (status == SKCloudServiceAuthorizationStatusNotDetermined) &#123;</div><div class="line">        </div><div class="line">        [SKCloudServiceController requestAuthorization:^(SKCloudServiceAuthorizationStatus status) &#123;</div><div class="line">            switch (status) &#123;</div><div class="line">                case SKCloudServiceAuthorizationStatusNotDetermined: &#123;</div><div class="line">                    wtState = WTAuthorizationStateUnauthorized;</div><div class="line">                &#125;</div><div class="line">                    break;</div><div class="line">                case SKCloudServiceAuthorizationStatusRestricted: &#123;</div><div class="line">                &#125;</div><div class="line">                    break;</div><div class="line">                case SKCloudServiceAuthorizationStatusDenied: &#123;</div><div class="line">                    wtState = WTAuthorizationStateDenied;</div><div class="line">                &#125;</div><div class="line">                    break;</div><div class="line">                case SKCloudServiceAuthorizationStatusAuthorized: &#123;</div><div class="line">                    wtState = WTAuthorizationStateAuthorized;</div><div class="line">                &#125;</div><div class="line">                    break;</div><div class="line">                default:</div><div class="line">                    break;</div><div class="line">            &#125;</div><div class="line">            [weakSelf respondWithState:wtState CompletionBlock:completionBlock];</div><div class="line">        &#125;];</div><div class="line">        return;</div><div class="line">    &#125; else if (status == SKCloudServiceAuthorizationStatusRestricted) &#123;</div><div class="line">    &#125; else if (status == SKCloudServiceAuthorizationStatusDenied) &#123;</div><div class="line">        wtState = WTAuthorizationStateDenied;</div><div class="line">    &#125; else&#123;</div><div class="line">        wtState = WTAuthorizationStateAuthorized;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    [self respondWithState:wtState CompletionBlock:completionBlock];</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">#pragma mark - NFC</div><div class="line">- (void)requestAccessNFCWithCompletionBlock:(AuthorizationStateCompletionBlock)completionBlock &#123;</div><div class="line">    if ([UIDevice currentDevice].systemVersion.floatValue &lt; 11.0f) &#123;</div><div class="line">        [self respondWithState:WTAuthorizationStateUnsupported CompletionBlock:completionBlock];</div><div class="line">    &#125;</div><div class="line">    NFCNDEFReaderSession *session = [[NFCNDEFReaderSession alloc]initWithDelegate:self queue:nil invalidateAfterFirstRead:YES];</div><div class="line">    [session beginSession];</div><div class="line">    self.NFCCompletionBlock = completionBlock;</div><div class="line">&#125;</div><div class="line"></div><div class="line">#pragma mark - NFCNDEFReaderSessionDelegate</div><div class="line">- (void)readerSession:(NFCNDEFReaderSession *)session didInvalidateWithError:(NSError *)error &#123;</div><div class="line">    [self respondWithState:WTAuthorizationStateUnsupported CompletionBlock:self.NFCCompletionBlock];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)readerSession:(NFCNDEFReaderSession *)session didDetectNDEFs:(NSArray&lt;NFCNDEFMessage *&gt; *)messages &#123;</div><div class="line">        [self respondWithState:WTAuthorizationStateAuthorized CompletionBlock:self.NFCCompletionBlock];</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">#pragma mark - 相册权限</div><div class="line">- (void)requestAccessPhotosWithCompletionBlock:(AuthorizationStateCompletionBlock)completionBlock &#123;</div><div class="line">    __weak __typeof(self)weakSelf = self;</div><div class="line">    __block WTAuthorizationState wtState = WTAuthorizationStateUnkonw;</div><div class="line">    PHAuthorizationStatus status = [PHPhotoLibrary authorizationStatus];</div><div class="line">    if (status == PHAuthorizationStatusNotDetermined) &#123;</div><div class="line">        [PHPhotoLibrary requestAuthorization:^(PHAuthorizationStatus status) &#123;</div><div class="line">            if (status == PHAuthorizationStatusNotDetermined) &#123;</div><div class="line">                wtState = WTAuthorizationStateUnauthorized;</div><div class="line">            &#125; else if (status == PHAuthorizationStatusRestricted) &#123;</div><div class="line">                </div><div class="line">            &#125; else if (status == PHAuthorizationStatusDenied) &#123;</div><div class="line">                wtState = WTAuthorizationStateDenied;</div><div class="line">            &#125; else &#123;</div><div class="line">                wtState = WTAuthorizationStateAuthorized;</div><div class="line">            &#125;</div><div class="line">            [weakSelf respondWithState:wtState CompletionBlock:completionBlock];</div><div class="line">        &#125;];</div><div class="line">        return;</div><div class="line">    &#125; else if (status == PHAuthorizationStatusRestricted) &#123;</div><div class="line">    &#125; else if (status == PHAuthorizationStatusDenied) &#123;</div><div class="line">        wtState = WTAuthorizationStateDenied;</div><div class="line">    &#125; else &#123;</div><div class="line">        wtState = WTAuthorizationStateAuthorized;</div><div class="line">    &#125;</div><div class="line">    [self respondWithState:wtState CompletionBlock:completionBlock];</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">#pragma mark - 提醒事项</div><div class="line">- (void)requestAccessRemindersWithCompletionBlock:(AuthorizationStateCompletionBlock)completionBlock &#123;</div><div class="line">    __weak __typeof(self)weakSelf = self;</div><div class="line">    __block WTAuthorizationState wtState = WTAuthorizationStateUnkonw;</div><div class="line">    EKAuthorizationStatus status = [EKEventStore authorizationStatusForEntityType:EKEntityTypeReminder];</div><div class="line">    </div><div class="line">    if (status == EKAuthorizationStatusNotDetermined) &#123;</div><div class="line">        EKEventStore *store = [[EKEventStore alloc] init];</div><div class="line"></div><div class="line">        [store requestAccessToEntityType:EKEntityTypeReminder completion:^(BOOL granted, NSError * _Nullable error) &#123;</div><div class="line">            if (error) &#123;&#125; else &#123;</div><div class="line">                if (granted) &#123;</div><div class="line">                    wtState = WTAuthorizationStateAuthorized;</div><div class="line">                &#125; else &#123;</div><div class="line">                    wtState = WTAuthorizationStateDenied;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            [weakSelf respondWithState:wtState CompletionBlock:completionBlock];</div><div class="line">        &#125;];</div><div class="line">        return;</div><div class="line">    &#125; else if (status == EKAuthorizationStatusRestricted) &#123;</div><div class="line">        </div><div class="line">    &#125; else if (status == EKAuthorizationStatusDenied) &#123;</div><div class="line">       wtState = WTAuthorizationStateDenied;</div><div class="line">        </div><div class="line">    &#125; else &#123;</div><div class="line">        wtState = WTAuthorizationStateAuthorized;</div><div class="line">    &#125;</div><div class="line">    [self respondWithState:wtState CompletionBlock:completionBlock];</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">#pragma mark - Siri</div><div class="line">- (void)requestAccessSiriWithCompletionBlock:(AuthorizationStateCompletionBlock)completionBlock &#123;</div><div class="line">    if ([UIDevice currentDevice].systemVersion.floatValue &lt; 10.0f) &#123;</div><div class="line">        [self respondWithState:WTAuthorizationStateUnsupported CompletionBlock:completionBlock];</div><div class="line">    &#125;</div><div class="line">    __weak __typeof(self)weakSelf = self;</div><div class="line">    __block WTAuthorizationState wtState = WTAuthorizationStateUnkonw;</div><div class="line">    INSiriAuthorizationStatus status = [INPreferences siriAuthorizationStatus];</div><div class="line">    if (status == INSiriAuthorizationStatusNotDetermined) &#123;</div><div class="line">        [INPreferences requestSiriAuthorization:^(INSiriAuthorizationStatus status) &#123;</div><div class="line">            if (status == INSiriAuthorizationStatusNotDetermined) &#123;</div><div class="line">                wtState = WTAuthorizationStateUnauthorized;</div><div class="line">            &#125; else if (status == INSiriAuthorizationStatusDenied) &#123;</div><div class="line">                wtState = WTAuthorizationStateDenied;</div><div class="line">            &#125; else if (status == INSiriAuthorizationStatusAuthorized) &#123;</div><div class="line">                wtState = WTAuthorizationStateAuthorized;</div><div class="line">            &#125;</div><div class="line">            [weakSelf respondWithState:wtState CompletionBlock:completionBlock];</div><div class="line">        &#125;];</div><div class="line">        return;</div><div class="line">    &#125; else if (status == EKAuthorizationStatusRestricted) &#123;</div><div class="line"></div><div class="line">    &#125; else if (status == EKAuthorizationStatusDenied) &#123;</div><div class="line">        wtState = WTAuthorizationStateDenied;</div><div class="line">    &#125; else &#123;</div><div class="line">        wtState = WTAuthorizationStateAuthorized;</div><div class="line">    &#125;</div><div class="line">    [self respondWithState:wtState CompletionBlock:completionBlock];</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">#pragma mark - 语音识别</div><div class="line">- (void)requestAccessSpeechWithCompletionBlock:(AuthorizationStateCompletionBlock)completionBlock &#123;</div><div class="line">    if ([UIDevice currentDevice].systemVersion.floatValue &lt; 10.0f) &#123;</div><div class="line">         [self respondWithState:WTAuthorizationStateUnsupported CompletionBlock:completionBlock];</div><div class="line">    &#125;</div><div class="line">    __weak __typeof(self)weakSelf = self;</div><div class="line">    __block WTAuthorizationState wtState = WTAuthorizationStateUnkonw;</div><div class="line">    SFSpeechRecognizerAuthorizationStatus status = [SFSpeechRecognizer authorizationStatus];</div><div class="line">    </div><div class="line">    if (status == SFSpeechRecognizerAuthorizationStatusNotDetermined) &#123;</div><div class="line">        [SFSpeechRecognizer requestAuthorization:^(SFSpeechRecognizerAuthorizationStatus status) &#123;</div><div class="line">            </div><div class="line">            if (status == SFSpeechRecognizerAuthorizationStatusNotDetermined) &#123;</div><div class="line">                wtState = WTAuthorizationStateUnauthorized;</div><div class="line">                </div><div class="line">            &#125; else if (status == SFSpeechRecognizerAuthorizationStatusDenied) &#123;</div><div class="line">                wtState = WTAuthorizationStateDenied;</div><div class="line">                </div><div class="line">            &#125; else if (status == SFSpeechRecognizerAuthorizationStatusAuthorized) &#123;</div><div class="line">                wtState = WTAuthorizationStateAuthorized;</div><div class="line">            &#125;</div><div class="line">            [weakSelf respondWithState:wtState CompletionBlock:completionBlock];</div><div class="line">        &#125;];</div><div class="line">        return;</div><div class="line">    &#125; else if (status == SFSpeechRecognizerAuthorizationStatusDenied) &#123;</div><div class="line">        wtState = WTAuthorizationStateDenied;</div><div class="line">    &#125; else if (status == SFSpeechRecognizerAuthorizationStatusRestricted) &#123;</div><div class="line">        </div><div class="line">    &#125; else &#123;</div><div class="line">        wtState = WTAuthorizationStateAuthorized;</div><div class="line">    &#125;</div><div class="line">    [self respondWithState:wtState CompletionBlock:completionBlock];</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>隐私权限请求完成应在主线程中完成回调</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">#pragma mark - 在主线程中完成回调</div><div class="line">- (void)respondWithState:(WTAuthorizationState)state CompletionBlock:(AuthorizationStateCompletionBlock)completionBlock &#123;</div><div class="line">    dispatch_async(dispatch_get_main_queue(), ^&#123;</div><div class="line">        if (completionBlock) &#123;</div><div class="line">            completionBlock(state);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>获取隐私权限需要分为四步：</p><ul><li>在Info.plist文件中配置应用所需权限；</li><li>在项目的Targets-&gt;Capabilities中开启相应开关，目前Siri、Health、NFC、HomeKit需要开启；</li><li>引入相关库；</li><li>使用代码获取对应的隐私权限。</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://developer.apple.com/documentation/uikit/core_app/protecting_the_user_s_privacy?language=objc" target="_blank" rel="noopener">Protecting the User’s Privacy</a></p><p><a href="https://developer.apple.com/library/archive/samplecode/PrivacyPrompts/Introduction/Intro.html" target="_blank" rel="noopener">Checking and Requesting Access to Data Classes in Privacy Settings</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从iOS 10开始获取用户隐私数据都需要在info.plist文件中配置对应的权限。在没有配置权限下调系统接口直接闪退，也是很苹果。&lt;/p&gt;
&lt;p&gt;目前涉及16种隐私权限，分别是蓝牙、日历、相机、通讯录、Face ID、健康分享、住宅配件、位置、麦克风、运动与健身、媒体与Apple Music、NFC、相册、提醒事项、Siri、 语音识别。&lt;/p&gt;
    
    </summary>
    
      <category term="blog" scheme="https://wynter.wang/categories/blog/"/>
    
    
  </entry>
  
  <entry>
    <title>XCode 10 注释及代码格式化扩展插件失效行</title>
    <link href="https://wynter.wang/2018/11/20/XCode%2010%20%E6%B3%A8%E9%87%8A%E5%8F%8A%E4%BB%A3%E7%A0%81%E6%A0%BC%E5%BC%8F%E5%8C%96%E6%89%A9%E5%B1%95%E6%8F%92%E4%BB%B6%E5%A4%B1%E6%95%88/"/>
    <id>https://wynter.wang/2018/11/20/XCode 10 注释及代码格式化扩展插件失效/</id>
    <published>2018-11-20T01:13:16.000Z</published>
    <updated>2018-11-20T07:03:39.053Z</updated>
    
    <content type="html"><![CDATA[<p>升级Xcode 10后发现<code>Alt + Command + /</code>无法使用，同时也发现之前使用的代码格式化插件也无法使用。</p><p>猜测是Xcode 10不让使用这些插件了，搜了一波也没有找到解决方法或相应的替换插件，就没有多在理会这个事情了。</p><p>后来无意间发现一篇网友简单粗暴的解决办法，我也是下巴都能掉地上。</p><a id="more"></a><h2 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h2><blockquote><p>应用程序 &gt; 重新命名XCode &gt; 再改回来</p></blockquote><p>XCode注释功能也可以用了，代码格式化插件也能用了，心情简直不要太美丽，赶紧来广而告之。</p><p>如果重命名还不行只能重装XCode或者升级电脑系统。</p><h2 id="推荐插件"><a href="#推荐插件" class="headerlink" title="推荐插件"></a>推荐插件</h2><p> <strong><a href="https://github.com/qfish/XAlign" target="_blank" rel="noopener">XAlign</a></strong>：代码对齐插件，主要用于宏定义、属性群、代码内等号对齐三种代码对齐。</p><p> <strong><a href="https://github.com/mapbox/XcodeClangFormat" target="_blank" rel="noopener">XcodeClangFormat</a></strong>：代码格式化插件，支持定义代码格式。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;升级Xcode 10后发现&lt;code&gt;Alt + Command + /&lt;/code&gt;无法使用，同时也发现之前使用的代码格式化插件也无法使用。&lt;/p&gt;
&lt;p&gt;猜测是Xcode 10不让使用这些插件了，搜了一波也没有找到解决方法或相应的替换插件，就没有多在理会这个事情了。&lt;/p&gt;
&lt;p&gt;后来无意间发现一篇网友简单粗暴的解决办法，我也是下巴都能掉地上。&lt;/p&gt;
    
    </summary>
    
      <category term="blog" scheme="https://wynter.wang/categories/blog/"/>
    
    
      <category term="Xcode" scheme="https://wynter.wang/tags/Xcode/"/>
    
  </entry>
  
  <entry>
    <title>使用SSH连接GitHub，修改密码后记得执行</title>
    <link href="https://wynter.wang/2018/09/17/%E4%BD%BF%E7%94%A8SSH%E8%BF%9E%E6%8E%A5GitHub%EF%BC%8C%E4%BF%AE%E6%94%B9%E5%AF%86%E7%A0%81%E5%90%8E%E8%AE%B0%E5%BE%97%E6%89%A7%E8%A1%8C/"/>
    <id>https://wynter.wang/2018/09/17/使用SSH连接GitHub，修改密码后记得执行/</id>
    <published>2018-09-17T01:13:16.000Z</published>
    <updated>2018-09-17T03:23:01.553Z</updated>
    
    <content type="html"><![CDATA[<p>好久没有改过GitHub密码了，前几天GitHub提示密码有可能泄露，于是改了下密码。</p><p>天真的我以为，修改完密码本地密钥要GitHub会同步更新，最多需要重新验证下密码就可以了。</p><p>周末想更新下文章，使用hexo d -g生成静态文件并部署，结果卡了15分钟都没有反应，我就怀疑是hexo坏了吗？各种找原因，差点就重新初始化hexo了。怀着试试看的心态更下了SSH，结果就好了…好了…了</p><a id="more"></a><h3 id="打开终端进入-ssh目录"><a href="#打开终端进入-ssh目录" class="headerlink" title="打开终端进入.ssh目录"></a>打开终端进入.ssh目录</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> ~/.ssh</div></pre></td></tr></table></figure><p>如果.ssh文件夹不存在，执行指令自动创建<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mkdir ~/.ssh</div></pre></td></tr></table></figure></p><h3 id="生成RSA密钥"><a href="#生成RSA密钥" class="headerlink" title="生成RSA密钥"></a>生成RSA密钥</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-keygen -t rsa -C <span class="string">"你的邮箱@xxx.com"</span></div></pre></td></tr></table></figure><blockquote><p>出现让输入密码的直接回车即可</p></blockquote><h3 id="查看公钥内容"><a href="#查看公钥内容" class="headerlink" title="查看公钥内容"></a>查看公钥内容</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat ~/.ssh/id_rsa.pub</div></pre></td></tr></table></figure><h3 id="在GitHub账户中添加公钥"><a href="#在GitHub账户中添加公钥" class="headerlink" title="在GitHub账户中添加公钥"></a>在GitHub账户中添加公钥</h3><ul><li>跳转网址到：<a href="https://github.com/settings/keys" target="_blank" rel="noopener">https://github.com/settings/keys</a></li><li>点击右侧<code>Nes SSH key</code>按钮</li><li>将<code>id_rsa.pub</code>中的内容粘贴进去保存，title随意可以不填</li></ul><h3 id="验证是否添加成功"><a href="#验证是否添加成功" class="headerlink" title="验证是否添加成功"></a>验证是否添加成功</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh -T git@github.com</div></pre></td></tr></table></figure><p>出现如下提示成功：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Hi username! You’ve successfully authenticated, but GitHub does not provide shell access.</div></pre></td></tr></table></figure></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>解决问题，找对方向 方向 方向很重要！！!</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;好久没有改过GitHub密码了，前几天GitHub提示密码有可能泄露，于是改了下密码。&lt;/p&gt;
&lt;p&gt;天真的我以为，修改完密码本地密钥要GitHub会同步更新，最多需要重新验证下密码就可以了。&lt;/p&gt;
&lt;p&gt;周末想更新下文章，使用hexo d -g生成静态文件并部署，结果卡了15分钟都没有反应，我就怀疑是hexo坏了吗？各种找原因，差点就重新初始化hexo了。怀着试试看的心态更下了SSH，结果就好了…好了…了&lt;/p&gt;
    
    </summary>
    
      <category term="blog" scheme="https://wynter.wang/categories/blog/"/>
    
    
      <category term="git" scheme="https://wynter.wang/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Mac 制作一个可执行脚本</title>
    <link href="https://wynter.wang/2018/07/25/Mac%E5%88%B6%E4%BD%9C%E4%B8%80%E4%B8%AA%E5%8F%AF%E6%89%A7%E8%A1%8C%E8%84%9A%E6%9C%AC/"/>
    <id>https://wynter.wang/2018/07/25/Mac制作一个可执行脚本/</id>
    <published>2018-07-25T11:13:16.000Z</published>
    <updated>2018-07-26T00:58:11.786Z</updated>
    
    <content type="html"><![CDATA[<p>在工作中我们经常会用到一些命令来完成指定工作，最常用的还是Git和SVN一些更新、提交操作，虽然命令不是很复杂，但是肯定会有三个步骤：</p><p>1、打开终端；<br>2、cd到指定目录下；<br>3、执行一系列相关操作命令。</p><p>一些常用的操作我们就可以制作一个脚本来简化步骤。</p><a id="more"></a><h3 id="制作一个可执行脚本，分为以下步骤："><a href="#制作一个可执行脚本，分为以下步骤：" class="headerlink" title="制作一个可执行脚本，分为以下步骤："></a>制作一个可执行脚本，分为以下步骤：</h3><ul><li><p>创建脚本文件，在终端中执行（文件想要保存在哪里在那个目录下执行命令）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">touch fileName.sh</div></pre></td></tr></table></figure></li><li><p>给脚本添加可执行权限，具体可以参考<a href="https://www.jianshu.com/p/40ae805472bc" target="_blank" rel="noopener">Mac 修改文件读写权限</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chmod 755 fileName.sh</div></pre></td></tr></table></figure></li><li><p>使用终端cd到脚本所在目录执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./fileName.sh</div></pre></td></tr></table></figure></li></ul><h3 id="简单应用"><a href="#简单应用" class="headerlink" title="简单应用"></a>简单应用</h3><p>以下是我正在使用一个简易脚本，可以用它来实现：</p><p>1、将写好的博客生成静态文件并部署<br>2、备份博客所有文件到git，防止本地文件丢失</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">！ /bin/bash</span></div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> dirname <span class="variable">$0</span>，取得当前执行的脚本文件的父目录</span></div><div class="line">basepath=$(cd `dirname $0`; pwd)</div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash">进入到hexo所在的目录</span></div><div class="line">cd $&#123;basepath&#125;/Wynter.github.io</div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> 打印当前路径</span></div><div class="line">currentPath=$(pwd)</div><div class="line">echo "当前文件夹路径: $currentPath"</div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> 生成静态文件并部署</span></div><div class="line">echo "start update hexo"</div><div class="line">hexo d -g</div><div class="line">echo "end hexo"</div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> 返回到上级目录</span></div><div class="line">cd ..</div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> 拉去git上最新数据</span></div><div class="line">git pull</div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> 备份博客所有文件到git</span></div><div class="line">echo "start update git"</div><div class="line">git add .</div><div class="line">git commit -m "update blog"</div><div class="line">git push origin master</div><div class="line">date=$(date +%Y%m%d%H%M)</div></pre></td></tr></table></figure><p>在iOS应用开发完成后，经常要使用Xcode打包给测试人员，不仅编译时间长，期间还不能敲代码，编译完成后还需要手动导入，发给测试人员等一系列操作，这完全可以使用脚本来实现来提升工作效率。</p><p>附上一个<a href="https://github.com/stackhou/AutoPacking-iOS" target="_blank" rel="noopener">iOS自动打包脚本传送门</a>。</p><h3 id="答疑解惑"><a href="#答疑解惑" class="headerlink" title="答疑解惑"></a>答疑解惑</h3><p><strong>既然都是脚本，为什么还要在终端里<code>./fileName.sh</code>才能执行，这so不智能了吧！为什么不能双击执行呢？</strong></p><p>它的确是可执行脚本，因为脚本的后缀是.sh，而我们的mac中刚好有应用能识别并打开.sh结尾的文件，如果删除电脑上所有能识别.sh的应用，再次双击脚本就直接执行脚本了。<br><br>显然删除这么多应用是不现实的，我们可以在创建的时候不给文件添加后缀来实现双击执行脚本的目的。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>可以说没有什么操作是一个脚本解决不了的，如果解决不了那就再来一个。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在工作中我们经常会用到一些命令来完成指定工作，最常用的还是Git和SVN一些更新、提交操作，虽然命令不是很复杂，但是肯定会有三个步骤：&lt;/p&gt;
&lt;p&gt;1、打开终端；&lt;br&gt;2、cd到指定目录下；&lt;br&gt;3、执行一系列相关操作命令。&lt;/p&gt;
&lt;p&gt;一些常用的操作我们就可以制作一个脚本来简化步骤。&lt;/p&gt;
    
    </summary>
    
      <category term="blog" scheme="https://wynter.wang/categories/blog/"/>
    
    
      <category term="Linux" scheme="https://wynter.wang/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>iOS 自定义-苹方字体的使用</title>
    <link href="https://wynter.wang/2018/05/11/iOS%20%E8%87%AA%E5%AE%9A%E4%B9%89-%E8%8B%B9%E6%96%B9%E5%AD%97%E4%BD%93%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://wynter.wang/2018/05/11/iOS 自定义-苹方字体的使用/</id>
    <published>2018-05-11T06:13:02.000Z</published>
    <updated>2018-06-08T07:44:22.097Z</updated>
    
    <content type="html"><![CDATA[<p>不是系统已经自带苹方字体了为什么还要自定义呢？因为苹方字体是在iOS 9引入的，所以如果要支持iOS 9以下都要手动引入苹方字体。<br><a id="more"></a></p><h2 id="添加苹方字体到项目中"><a href="#添加苹方字体到项目中" class="headerlink" title="添加苹方字体到项目中"></a>添加苹方字体到项目中</h2><ul><li><p>获取苹方字体，Command+G输入<code>/System/Library/Fonts/PingFang.ttc</code></p></li><li><p>直接拖到将PingFang.ttc文件拖到项目中</p></li><li><p>在 info.plist文件中添加<code>Fonts provided by application</code>，并设置字体包名称<br><img src="https://upload-images.jianshu.io/upload_images/937490-b46bb7fd12d74358.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="添加设置字体"></p></li></ul><blockquote><p>我在iOS 8系统的模拟器中没有在Info.plist中添加<code>Fonts provided by application</code>，也已经可以正常使用苹方字体了</p></blockquote><h2 id="获取当前系统支持的字体"><a href="#获取当前系统支持的字体" class="headerlink" title="获取当前系统支持的字体"></a>获取当前系统支持的字体</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="built_in">NSString</span> *fontFamilyName <span class="keyword">in</span> <span class="built_in">UIFont</span>.familyNames) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"familyName:%@"</span>, fontFamilyName);</div><div class="line">    <span class="keyword">for</span> (<span class="built_in">NSString</span> *fontName <span class="keyword">in</span> [<span class="built_in">UIFont</span> fontNamesForFamilyName:fontFamilyName]) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"fontName:%@"</span>, fontName);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">打印结果省略了苹方字体以外的字体</div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> ……</span></div><div class="line"><span class="comment"> 2018-04-28 11:07:52.217401+0800 QYLY[5900:238352] familyName:PingFang TC</span></div><div class="line"><span class="comment"> 2018-04-28 11:07:52.218150+0800 QYLY[5900:238352] fontName:PingFangTC-Regular</span></div><div class="line"><span class="comment"> 2018-04-28 11:07:52.218609+0800 QYLY[5900:238352] fontName:PingFangTC-Thin</span></div><div class="line"><span class="comment"> 2018-04-28 11:07:52.219340+0800 QYLY[5900:238352] fontName:PingFangTC-Medium</span></div><div class="line"><span class="comment"> 2018-04-28 11:07:52.220841+0800 QYLY[5900:238352] fontName:PingFangTC-Semibold</span></div><div class="line"><span class="comment"> 2018-04-28 11:07:52.222403+0800 QYLY[5900:238352] fontName:PingFangTC-Light</span></div><div class="line"><span class="comment"> 2018-04-28 11:07:52.223328+0800 QYLY[5900:238352] fontName:PingFangTC-Ultralight</span></div><div class="line"><span class="comment"> ……</span></div><div class="line"><span class="comment"> 2018-04-28 11:07:52.299506+0800 QYLY[5900:238352] familyName:PingFang HK</span></div><div class="line"><span class="comment"> 2018-04-28 11:07:52.300103+0800 QYLY[5900:238352] fontName:PingFangHK-Medium</span></div><div class="line"><span class="comment"> 2018-04-28 11:07:52.300944+0800 QYLY[5900:238352] fontName:PingFangHK-Thin</span></div><div class="line"><span class="comment"> 2018-04-28 11:07:52.301597+0800 QYLY[5900:238352] fontName:PingFangHK-Regular</span></div><div class="line"><span class="comment"> 2018-04-28 11:07:52.302162+0800 QYLY[5900:238352] fontName:PingFangHK-Ultralight</span></div><div class="line"><span class="comment"> 2018-04-28 11:07:52.302652+0800 QYLY[5900:238352] fontName:PingFangHK-Semibold</span></div><div class="line"><span class="comment"> 2018-04-28 11:07:52.303029+0800 QYLY[5900:238352] fontName:PingFangHK-Light</span></div><div class="line"><span class="comment"> ……</span></div><div class="line"><span class="comment"> 2018-04-28 11:07:52.423305+0800 QYLY[5900:238352] familyName:PingFang SC</span></div><div class="line"><span class="comment"> 2018-04-28 11:07:52.423714+0800 QYLY[5900:238352] fontName:PingFangSC-Medium</span></div><div class="line"><span class="comment"> 2018-04-28 11:07:52.424151+0800 QYLY[5900:238352] fontName:PingFangSC-Semibold</span></div><div class="line"><span class="comment"> 2018-04-28 11:07:52.424397+0800 QYLY[5900:238352] fontName:PingFangSC-Light</span></div><div class="line"><span class="comment"> 2018-04-28 11:07:52.424621+0800 QYLY[5900:238352] fontName:PingFangSC-Ultralight</span></div><div class="line"><span class="comment"> 2018-04-28 11:07:52.424934+0800 QYLY[5900:238352] fontName:PingFangSC-Regular</span></div><div class="line"><span class="comment"> 2018-04-28 11:07:52.425314+0800 QYLY[5900:238352] fontName:PingFangSC-Thin</span></div><div class="line"><span class="comment"> ……</span></div><div class="line"><span class="comment"> */</span></div></pre></td></tr></table></figure><p>苹方字体怎么会有PingFang SC、PingFang TC、PingFang HK三种呢？对应的是苹方-简、苹方-繁、苹方-港，而且都有六种字重，具体可以在字体册中查看。</p><blockquote><p>苹方-简 中黑体 PingFangSC-Medium<br>苹方-简 中粗体 PingFangSC-Semibold<br>苹方-简 细体 PingFangSC-Light<br>苹方-简 极细体 PingFangSC-Ultralight<br>苹方-简 常规体 PingFangSC-Regular<br>苹方-简 纤细体 PingFangSC-Thin<br><img src="https://upload-images.jianshu.io/upload_images/937490-5afaf5974290fddd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="字体册-苹方"></p></blockquote><h2 id="设置苹方字体"><a href="#设置苹方字体" class="headerlink" title="设置苹方字体"></a>设置苹方字体</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 苹方字体，默认为PingFangSC-Regular</span></div><div class="line"><span class="built_in">UIFont</span> *font = [<span class="built_in">UIFont</span> fontWithName:<span class="string">@"PingFangSC-Regular"</span> size:<span class="number">14</span>];</div><div class="line"><span class="built_in">NSString</span> *familyName = font.familyName;</div><div class="line"><span class="built_in">NSString</span> *fontName = font.fontName;</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"familyName:%@\nfontName:%@"</span>, familyName, fontName);</div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> familyName:PingFang SC</span></div><div class="line"><span class="comment"> fontName:PingFangSC-Regular</span></div><div class="line"><span class="comment"> */</span></div></pre></td></tr></table></figure><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><p>每次都要输入字体名称比较麻烦，并且还要支持iOS 9以下，使用分类方法比较好。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">&lt;UIKit/UIKit.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span>(<span class="built_in">NSInteger</span>, FontWeightStyle) &#123;</div><div class="line">    FontWeightStyleMedium, <span class="comment">// 中黑体</span></div><div class="line">    FontWeightStyleSemibold, <span class="comment">// 中粗体</span></div><div class="line">    FontWeightStyleLight, <span class="comment">// 细体</span></div><div class="line">    FontWeightStyleUltralight, <span class="comment">// 极细体</span></div><div class="line">    FontWeightStyleRegular, <span class="comment">// 常规体</span></div><div class="line">    FontWeightStyleThin, <span class="comment">// 纤细体</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">UIFont</span> (<span class="title">Ex</span>)</span></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> 苹方字体</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment"> @param fontWeight 字体粗细（字重)</span></div><div class="line"><span class="comment"> @param fontSize 字体大小</span></div><div class="line"><span class="comment"> @return 返回指定字重大小的苹方字体</span></div><div class="line"><span class="comment"> */</span></div><div class="line">+ (<span class="built_in">UIFont</span> *)pingFangSCWithWeight:(FontWeightStyle)fontWeight size:(<span class="built_in">CGFloat</span>)fontSize;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">"UIFont+Ex.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">UIFont</span> (<span class="title">Ex</span>)</span></div><div class="line"></div><div class="line">+ (<span class="built_in">UIFont</span> *)pingFangSCWithWeight:(FontWeightStyle)fontWeight size:(<span class="built_in">CGFloat</span>)fontSize &#123;</div><div class="line">    <span class="keyword">if</span> (fontWeight &lt; FontWeightStyleMedium || fontWeight &gt; FontWeightStyleThin) &#123;</div><div class="line">        fontWeight = FontWeightStyleRegular;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">NSString</span> *fontName = <span class="string">@"PingFangSC-Regular"</span>;</div><div class="line">    <span class="keyword">switch</span> (fontWeight) &#123;</div><div class="line">        <span class="keyword">case</span> FontWeightStyleMedium:</div><div class="line">            fontName = <span class="string">@"PingFangSC-Medium"</span>;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> FontWeightStyleSemibold:</div><div class="line">            fontName = <span class="string">@"PingFangSC-Semibold"</span>;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> FontWeightStyleLight:</div><div class="line">            fontName = <span class="string">@"PingFangSC-Light"</span>;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> FontWeightStyleUltralight:</div><div class="line">            fontName = <span class="string">@"PingFangSC-Ultralight"</span>;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> FontWeightStyleRegular:</div><div class="line">            fontName = <span class="string">@"PingFangSC-Regular"</span>;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> FontWeightStyleThin:</div><div class="line">            fontName = <span class="string">@"PingFangSC-Thin"</span>;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="built_in">UIFont</span> *font = [<span class="built_in">UIFont</span> fontWithName:fontName size:fontSize];</div><div class="line"> </div><div class="line">    <span class="keyword">return</span> font ?: [<span class="built_in">UIFont</span> systemFontOfSize:fontSize];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;不是系统已经自带苹方字体了为什么还要自定义呢？因为苹方字体是在iOS 9引入的，所以如果要支持iOS 9以下都要手动引入苹方字体。&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://wynter.wang/categories/iOS/"/>
    
    
      <category term="blog" scheme="https://wynter.wang/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>SVN命令使用汇总</title>
    <link href="https://wynter.wang/2018/05/11/SVN%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8%E6%B1%87%E6%80%BB/"/>
    <id>https://wynter.wang/2018/05/11/SVN命令使用汇总/</id>
    <published>2018-05-11T06:13:02.000Z</published>
    <updated>2018-06-08T07:46:21.880Z</updated>
    
    <content type="html"><![CDATA[<p>总结一下SVN使用中一些常用命令及示例。<br><a id="more"></a></p><h3 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">svn import 本地文件路径 http://server/项目路径 --username=用户名 --password=密码 -m "批注"</div></pre></td></tr></table></figure><p>例如：<br>svn import /Users/Wynter/Desktop/项目目录 <a href="http://server/项目路径" target="_blank" rel="noopener">http://server/项目路径</a> –username=Wynter –password=Wynter -m “import”</p><h3 id="下载项目到本地"><a href="#下载项目到本地" class="headerlink" title="下载项目到本地"></a>下载项目到本地</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">svn checkout 服务器项目路径 -username=用户名 --password=密码 本地项目路径</div><div class="line">svn co</div></pre></td></tr></table></figure><p>例如：<br>svn checkout <a href="http://server/项目路径" target="_blank" rel="noopener">http://server/项目路径</a> –username=Wynter –password=Wynter /Users/Wynter/Desktop/本地项目路径</p><h3 id="添加文件"><a href="#添加文件" class="headerlink" title="添加文件"></a>添加文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">svn add  file </div><div class="line">svn add .</div></pre></td></tr></table></figure><p>例如：<br>svn add test.txt(添加test.txt)<br>svn add *.php(添加当前目录下所有的php文件)<br>svn add . （添加当前目录下所有文件)</p><h3 id="提交添加的文件，或者本地做的修改提交到版本库"><a href="#提交添加的文件，或者本地做的修改提交到版本库" class="headerlink" title="提交添加的文件，或者本地做的修改提交到版本库"></a>提交添加的文件，或者本地做的修改提交到版本库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">svn commit -m "批注" [-N] [--no-unlock] path(如果选择了保持锁，就使用–no-unlock开关) </div><div class="line">svn ci -m "批注"</div></pre></td></tr></table></figure><p>例如：<br>svn ci -m “add test.txt by test”</p><h3 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">svn delete path -m "批注" </div><div class="line">svn (del, remove, rm)  path -m "批注"</div></pre></td></tr></table></figure><p>例如：<br>svn delete <a href="https://server/项目目录/test.text" target="_blank" rel="noopener">https://server/项目目录/test.text</a> -m “删除test.text 文件”<br>svn delete /Users/Wynter/本地项目目录 -m “删除目录”</p><h3 id="更新最新版本或指定版本"><a href="#更新最新版本或指定版本" class="headerlink" title="更新最新版本或指定版本"></a>更新最新版本或指定版本</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">svn update</div><div class="line">svn update -r 回滚到的版本号</div><div class="line">svn up</div></pre></td></tr></table></figure><p>例如：<br>svn update  （如果后面没有目录，默认将当前目录以及子目录下的所有文件都更新到最新版本）<br>svn update -r 200 test.txt    (更新指定的版本)</p><blockquote><p>注意：<br>如果在提交的时候提示过期的话，是因为冲突，需要先 svn update，修改文件，然后清除svn resolved，最后再提交 svn ci -m “”</p></blockquote><h3 id="查看本地修改的文件状态"><a href="#查看本地修改的文件状态" class="headerlink" title="查看本地修改的文件状态"></a>查看本地修改的文件状态</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">svn status</div><div class="line">svn st</div></pre></td></tr></table></figure><p>例如：<br>svn status path（目录下的文件和子目录的状态，正常状态不显示）<br>【?：不在svn的控制中；M：内容被修改；C：发生冲突；A：预定加入到版本库；K：被锁定】</p><p>svn status -v path(显示文件和子目录状态)<br>第一列保持相同，第二列显示工作版本号，第三和第四列显示最后一次修改的版本号和修改人。</p><h3 id="下载不带版本控制的项目到本地（没有svn隐藏记录信息）"><a href="#下载不带版本控制的项目到本地（没有svn隐藏记录信息）" class="headerlink" title="下载不带版本控制的项目到本地（没有svn隐藏记录信息）"></a>下载不带版本控制的项目到本地（没有svn隐藏记录信息）</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">svn export 服务器项目路径 -username=用户名 --password=密码 本地项目路径</div></pre></td></tr></table></figure><p>例如：<br>svn export <a href="http://server/项目路径" target="_blank" rel="noopener">http://server/项目路径</a> –username=Wynter –password=Wynter /Users/Wynter/Desktop/本地项目目录</p><h3 id="加锁-解锁"><a href="#加锁-解锁" class="headerlink" title="加锁/解锁"></a>加锁/解锁</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">svn lock path </div><div class="line">svn unlock path</div></pre></td></tr></table></figure><p>例如：<br>svn lock /Users/Wynter/Desktop/本地项目目录（或文件名）－m “批注”<br>svn unlock /Users/Wynter/Desktop/本地项目目录（或文件名）</p><h3 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">svn log path</div></pre></td></tr></table></figure><p>例如：<br>svn log /Users/Wynter/Desktop/本地项目目录/test.txt </p><h3 id="比较差异"><a href="#比较差异" class="headerlink" title="比较差异"></a>比较差异</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">svn diff path(将修改的文件与基础版本比较) </div><div class="line">svn diff -r m:n path (对版本m和版本n比较差异)</div><div class="line">svn di</div></pre></td></tr></table></figure><p>例如：<br>svn diff text.txt<br>svn diff -r 200:201 text.txt  </p><h3 id="合并两个版本"><a href="#合并两个版本" class="headerlink" title="合并两个版本"></a>合并两个版本</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">svn merge -r m:n path</div></pre></td></tr></table></figure><p>例如：<br>svn merge -r 12:14 text.txt  (把版本12和14之间的差异合并到当前的文件中)</p><h3 id="冲突合并"><a href="#冲突合并" class="headerlink" title="冲突合并"></a>冲突合并</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">svn resolved path  （移除工作副本的目录或文件的"冲突"状态）</div></pre></td></tr></table></figure><p>例如：<br>svn resolve test.txt</p><h3 id="恢复本地修改"><a href="#恢复本地修改" class="headerlink" title="恢复本地修改"></a>恢复本地修改</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">svn revert  file path</div><div class="line">svn revert -R path</div></pre></td></tr></table></figure><p>例如：<br>svn revert test.text<br>svn revert -r /Users/Wynter/Desktop/本地项目目录</p><h3 id="复制一个项目（打标签-打分支）"><a href="#复制一个项目（打标签-打分支）" class="headerlink" title="复制一个项目（打标签/打分支）"></a>复制一个项目（打标签/打分支）</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">svn copy 原地址URL 目标地址URL -m "批注"</div><div class="line">svn copy . 目标地址 -m "批注" (必须要原地址目录下)</div><div class="line">svn cp</div></pre></td></tr></table></figure><p>例如：<br>svn copy <a href="http://server/项目路径/branch/IPM" target="_blank" rel="noopener">http://server/项目路径/branch/IPM</a>  <a href="http://server/项目路径/tag/IPM_V1" target="_blank" rel="noopener">http://server/项目路径/tag/IPM_V1</a> -m “在分支中打个tag”<br>svn copy . <a href="http://server/项目路径/tag/tag目录目录" target="_blank" rel="noopener">http://server/项目路径/tag/tag目录目录</a> -m “在分支中打个tag”</p><h3 id="合并代码"><a href="#合并代码" class="headerlink" title="合并代码"></a>合并代码</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">svn merge -r m:n path</div></pre></td></tr></table></figure><p>例如：<br>合并文件：<br>svn merge -r 200:205 test.php（将版本200与205之间的差异合并到当前文件）</p><p>主干合并到分支<br>cd branch<br>svn merge <a href="http://server/trunk" target="_blank" rel="noopener">http://server/trunk</a> </p><p>分支合并到主干<br>cd trunk<br>svn merge –reintegrate <a href="http://server/branchs/IPM_V1_1" target="_blank" rel="noopener">http://server/branchs/IPM_V1_1</a> </p><p>合并版本并将合并后的结果应用到现有的分支上<br>svn merge -r 200:205 <a href="http://server/trunk" target="_blank" rel="noopener">http://server/trunk</a></p><h3 id="代码库URL变更"><a href="#代码库URL变更" class="headerlink" title="代码库URL变更"></a>代码库URL变更</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">svn switch &lt;branch_full_url&gt;   (切换分支)</div><div class="line">svn switch --relocate &lt;from_url&gt; &lt;to_url&gt; [path]  (切换资源库)</div><div class="line">svn sw</div></pre></td></tr></table></figure><p>例如：<br>svn switch <a href="http://server/branchs/IPM_V1_1" target="_blank" rel="noopener">http://server/branchs/IPM_V1_1</a><br>svn sw –relocate <a href="http://old_server/项目目录" target="_blank" rel="noopener">http://old_server/项目目录</a> <a href="http://new_server/项目目录" target="_blank" rel="noopener">http://new_server/项目目录</a></p><h3 id="svn帮助"><a href="#svn帮助" class="headerlink" title="svn帮助"></a>svn帮助</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">svn help</div><div class="line">svn help commit</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;总结一下SVN使用中一些常用命令及示例。&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://wynter.wang/categories/iOS/"/>
    
    
      <category term="API" scheme="https://wynter.wang/tags/API/"/>
    
  </entry>
  
  <entry>
    <title>iOS 使用AFNetworking传输字符串</title>
    <link href="https://wynter.wang/2018/05/11/iOS%20%E4%BD%BF%E7%94%A8AFNetworking%E4%BC%A0%E8%BE%93%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>https://wynter.wang/2018/05/11/iOS 使用AFNetworking传输字符串/</id>
    <published>2018-05-11T06:13:02.000Z</published>
    <updated>2018-06-08T07:43:57.873Z</updated>
    
    <content type="html"><![CDATA[<p>通常网络请求使用AFNetworking我们都会将字典作为参数传给服务端，如果应用对数据的安全级别要求较高，这时肯定会将参数加密后再传输，那么上传的参数就变成一串看不懂的字符串，我们只需要设置<code>AFHTTPSessionManager</code>中几个类型即可直接上传字符。<br><a id="more"></a></p><h3 id="配置参数请求和接收类型"><a href="#配置参数请求和接收类型" class="headerlink" title="配置参数请求和接收类型"></a>配置参数请求和接收类型</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">+ (AFHTTPSessionManager *)getRequstManager &#123;</div><div class="line">    AFHTTPSessionManager *manager = [AFHTTPSessionManager manager];</div><div class="line">    manager.requestSerializer.timeoutInterval = 30;</div><div class="line">    manager.requestSerializer.stringEncoding = NSUTF8StringEncoding;</div><div class="line">    manager.requestSerializer = [AFHTTPRequestSerializer serializer];</div><div class="line">    manager.responseSerializer = [AFHTTPResponseSerializer serializer];</div><div class="line">    [manager.requestSerializer setValue:@&quot;text/html&quot; forHTTPHeaderField:@&quot;Accept&quot;];</div><div class="line">    [manager.requestSerializer setValue:@&quot;text/html&quot; forHTTPHeaderField:@&quot;Content-Type&quot;];</div><div class="line">    return manager;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>配置完成后发送请求，可能会发现服务端接收的字符串前面莫名的多出’=’符号，查看源码发现<code>AFURLRequestSerialization</code>文件中下面的方法引起的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">- (NSString *)URLEncodedStringValue &#123;</div><div class="line">    if (!self.value || [self.value isEqual:[NSNull null]]) &#123;</div><div class="line">        return AFPercentEscapedStringFromString([self.field description]);</div><div class="line">    &#125; else &#123;</div><div class="line">        return [NSString stringWithFormat:@&quot;%@=%@&quot;, AFPercentEscapedStringFromString([self.field description]), AFPercentEscapedStringFromString([self.value description])];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>顺藤摸瓜发现<code>AFQueryStringFromParameters</code>函数中使用到了<code>- URLEncodedStringValue</code>方法。发现如下代码使用到了<code>AFQueryStringFromParameters</code>函数，如果实现<code>self.queryStringSerialization</code>属性就可以解决’=’问题。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">if (self.queryStringSerialization) &#123;</div><div class="line">    NSError *serializationError;</div><div class="line">    query = self.queryStringSerialization(request, parameters, &amp;serializationError);</div><div class="line">    </div><div class="line">    if (serializationError) &#123;</div><div class="line">        if (error) &#123;</div><div class="line">            *error = serializationError;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        return nil;</div><div class="line">    &#125;</div><div class="line">&#125; else &#123;</div><div class="line">    switch (self.queryStringSerializationStyle) &#123;</div><div class="line">        case AFHTTPRequestQueryStringDefaultStyle:</div><div class="line">            query = AFQueryStringFromParameters(parameters);</div><div class="line">            break;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="解决’-’方法"><a href="#解决’-’方法" class="headerlink" title="解决’=’方法"></a>解决’=’方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">AFHTTPSessionManager *manager = [self sessionManager];</div><div class="line">[manager.requestSerializer setQueryStringSerializationWithBlock:^NSString *(NSURLRequest *request, NSDictionary *parameters, NSError *__autoreleasing *error) &#123;</div><div class="line">    return paramsStr;</div><div class="line">&#125;];</div><div class="line">[manager POST:urlStr parameters:paramsStr progress:^(NSProgress * _Nonnull uploadProgress) &#123;</div><div class="line">    </div><div class="line">&#125; success:^(NSURLSessionDataTask * _Nonnull task, id  _Nullable responseObject) &#123;</div><div class="line">    </div><div class="line">&#125; failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) &#123;</div><div class="line">    </div><div class="line">&#125;];</div></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>不建议修改直接源码达到去掉’=’目的，通常可能因为源码版本更新而遗忘。</li><li>如果使用原生网络请求可以直接通过<code>[request setHTTPBody:data]</code>来实现字符串或其他数据传输。  </li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;通常网络请求使用AFNetworking我们都会将字典作为参数传给服务端，如果应用对数据的安全级别要求较高，这时肯定会将参数加密后再传输，那么上传的参数就变成一串看不懂的字符串，我们只需要设置&lt;code&gt;AFHTTPSessionManager&lt;/code&gt;中几个类型即可直接上传字符。&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://wynter.wang/categories/iOS/"/>
    
    
      <category term="blog" scheme="https://wynter.wang/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>iOS 模型数组深拷贝</title>
    <link href="https://wynter.wang/2018/05/11/iOS%20%E6%A8%A1%E5%9E%8B%E6%95%B0%E7%BB%84%E6%B7%B1%E6%8B%B7%E8%B4%9D/"/>
    <id>https://wynter.wang/2018/05/11/iOS 模型数组深拷贝/</id>
    <published>2018-05-11T06:13:02.000Z</published>
    <updated>2018-06-08T07:43:26.389Z</updated>
    
    <content type="html"><![CDATA[<p>通常需要实现对模型的拷贝都需要先实现<code>NSCopying、 NSMutableCopying</code>协议，在这里我一直有个误区，以为实现了copy协议，数组使用拷贝操作都会对数组内实现copy协议的对象进行拷贝。<br><a id="more"></a></p><h3 id="创建两个model并实现copying协议"><a href="#创建两个model并实现copying协议" class="headerlink" title="创建两个model并实现copying协议"></a>创建两个model并实现copying协议</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Dog.h</span></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Dog</span> : <span class="title">NSObject</span> &lt;<span class="title">NSCopying</span>, <span class="title">NSMutableCopying</span>&gt;</span></div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *name;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="comment">// Dog.m</span></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Dog</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">nonnull</span> <span class="keyword">id</span>)copyWithZone:(<span class="keyword">nullable</span> <span class="built_in">NSZone</span> *)zone &#123;</div><div class="line">    Dog *<span class="keyword">copy</span> = [[Dog allocWithZone:zone]init];</div><div class="line">    <span class="keyword">copy</span>.name = <span class="keyword">self</span>.name;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">copy</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">id</span>)mutableCopyWithZone:(<span class="built_in">NSZone</span> *)zone &#123;</div><div class="line">    Dog *<span class="keyword">copy</span> = [[Dog allocWithZone:zone]init];</div><div class="line">    <span class="keyword">copy</span>.name = <span class="keyword">self</span>.name;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">copy</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Person.h</span></div><div class="line"><span class="meta">#import <span class="meta-string">"Dog.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Person</span> : <span class="title">NSObject</span> &lt;<span class="title">NSCopying</span>, <span class="title">NSMutableCopying</span>&gt;</span></div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *name;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">NSInteger</span> age;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) Dog *dog;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="comment">// Person.m</span></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Person</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">nonnull</span> <span class="keyword">id</span>)copyWithZone:(<span class="keyword">nullable</span> <span class="built_in">NSZone</span> *)zone &#123;</div><div class="line">    Person *<span class="keyword">copy</span> = [[Person allocWithZone:zone]init];</div><div class="line">    <span class="keyword">copy</span>.name = <span class="keyword">self</span>.name;</div><div class="line">    <span class="keyword">copy</span>.age = <span class="keyword">self</span>.age;</div><div class="line">    <span class="keyword">copy</span>.dog = [<span class="keyword">self</span>.dog <span class="keyword">copy</span>];</div><div class="line">    <span class="keyword">return</span> <span class="keyword">copy</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">id</span>)mutableCopyWithZone:(<span class="built_in">NSZone</span> *)zone &#123;</div><div class="line">    Person *<span class="keyword">copy</span> = [[Person allocWithZone:zone]init];</div><div class="line">    <span class="keyword">copy</span>.name = <span class="keyword">self</span>.name;</div><div class="line">    <span class="keyword">copy</span>.age = <span class="keyword">self</span>.age;</div><div class="line">    <span class="keyword">copy</span>.dog = [<span class="keyword">self</span>.dog <span class="keyword">copy</span>];</div><div class="line">    <span class="keyword">return</span> <span class="keyword">copy</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure><h3 id="对模型数组使用mutablCopy操作并不是深拷贝"><a href="#对模型数组使用mutablCopy操作并不是深拷贝" class="headerlink" title="对模型数组使用mutablCopy操作并不是深拷贝"></a>对模型数组使用mutablCopy操作并不是深拷贝</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSMutableArray</span> &lt;Person *&gt;*dataSourceAry = [<span class="built_in">NSMutableArray</span> new];</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</div><div class="line">    Dog *dog = [[Dog alloc]init];</div><div class="line">    dog.name = <span class="string">@"拉不拉多不多就拉倒"</span>;</div><div class="line">    </div><div class="line">    Person *item = [[Person alloc]init];</div><div class="line">    item.name = <span class="string">@"杰克"</span>;</div><div class="line">    item.age = <span class="number">18</span>;</div><div class="line">    item.dog = [dog <span class="keyword">copy</span>];</div><div class="line">    [dataSourceAry addObject:item];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">NSArray</span> &lt;Person *&gt;*array = [dataSourceAry mutableCopy];</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"&lt;dataSourceAry: %@&gt;"</span>, dataSourceAry);</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"&lt;array: %@&gt;"</span>, array);</div><div class="line"></div><div class="line"></div><div class="line">[array enumerateObjectsUsingBlock:^(Person *obj, <span class="built_in">NSUInteger</span> idx, <span class="built_in">BOOL</span> * _Nonnull stop) &#123;</div><div class="line">    obj.name = <span class="string">@"肉丝"</span>;</div><div class="line">&#125;];</div><div class="line"></div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"dataSourceAry[0].name = %@"</span>, dataSourceAry[<span class="number">0</span>].name);</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"array[0].name = %@"</span>, array[<span class="number">0</span>].name);</div><div class="line"></div><div class="line"><span class="comment">/** 打印结果</span></div><div class="line"><span class="comment"> &lt;dataSourceAry: ("&lt;Person: 0x60000043ec00&gt;", "&lt;Person: 0x60000043e9c0&gt;")&gt;</span></div><div class="line"><span class="comment"> &lt;array: ("&lt;Person: 0x60000043ec00&gt;","&lt;Person: 0x60000043e9c0&gt;")&gt;</span></div><div class="line"><span class="comment"> dataSourceAry[0].name = 肉丝</span></div><div class="line"><span class="comment"> array[0].name = 肉丝</span></div><div class="line"><span class="comment"> */</span></div></pre></td></tr></table></figure><p>可以从打印的结果看出，数组内元素的内存地址是相同的，所以出现了修改拷贝后数组的第一个元素，导致原数组的第一个元素也发生了同样的改变。虽然两个数组的内存地址不一样，但是内部元素内存地址还是同一地址，不是我们想要的结果。</p><h3 id="实现模型数组深拷贝的方法"><a href="#实现模型数组深拷贝的方法" class="headerlink" title="实现模型数组深拷贝的方法"></a>实现模型数组深拷贝的方法</h3><p>1、最笨的方法就是通过遍历逐个拷贝元素<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSMutableArray</span> *array = [<span class="built_in">NSMutableArray</span> array];</div><div class="line"><span class="keyword">for</span> (Person *person <span class="keyword">in</span> dataSourceAry) &#123;</div><div class="line">    [array addObject:[person <span class="keyword">copy</span>]];</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>2、也有人使用归档解档实现数组内部元素拷贝</p><p>3、这么好用的一个方法现在才发现（推荐）</p><p>flag=YES当模型数组内元素对象遵守了copy协议，数组元素对象才能进行深拷贝。数组元素对象没有遵守copy协议或者flag=NO，则会进行浅拷贝<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">instancetype</span>)initWithArray:(<span class="built_in">NSArray</span>&lt;ObjectType&gt; *)array copyItems:(<span class="built_in">BOOL</span>)flag</div></pre></td></tr></table></figure></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSArray</span> &lt;Person *&gt;*deepCopyAry = [[<span class="built_in">NSArray</span> alloc]initWithArray:dataSourceAry copyItems:<span class="literal">YES</span>];</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"&lt;dataSourceAry: %@&gt;"</span>, dataSourceAry);</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"&lt;deepCopyAry: %@&gt;"</span>, deepCopyAry);</div><div class="line">    </div><div class="line">[deepCopyAry enumerateObjectsUsingBlock:^(Person *obj, <span class="built_in">NSUInteger</span> idx, <span class="built_in">BOOL</span> * _Nonnull stop) &#123;</div><div class="line">    obj.name = <span class="string">@"弗兰克"</span>;</div><div class="line">    obj.dog.name = <span class="string">@"弗兰克的dog"</span>;</div><div class="line">&#125;];</div><div class="line"></div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"dataSourceAry[0].name = %@"</span>, dataSourceAry[<span class="number">0</span>].name);</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"deepCopyAry[0].name = %@"</span>, deepCopyAry[<span class="number">0</span>].name);</div><div class="line">    </div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"dataSourceAry[0].dog.name = %@"</span>, dataSourceAry[<span class="number">0</span>].dog.name);</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"deepCopyAry[0].dog.name = %@"</span>, deepCopyAry[<span class="number">0</span>].dog.name);</div><div class="line">    </div><div class="line"><span class="comment">/** 打印结果</span></div><div class="line"><span class="comment">&lt;dataSourceAry: ("&lt;Person: 0x604000427680&gt;", "&lt;Person: 0x604000425220&gt;")&gt;</span></div><div class="line"><span class="comment">&lt;deepCopyAry: ("&lt;Person: 0x60000042cb80&gt;", "&lt;Person: 0x60000042cae0&gt;")&gt;</span></div><div class="line"><span class="comment"> </span></div><div class="line"><span class="comment">dataSourceAry[0].name = 肉丝</span></div><div class="line"><span class="comment">deepCopyAry[0].name = 弗兰克</span></div><div class="line"><span class="comment"> </span></div><div class="line"><span class="comment">dataSourceAry[0].dog.name = 拉不拉多不多就拉倒</span></div><div class="line"><span class="comment">deepCopyAry[0].dog.name = 弗兰克的dog</span></div><div class="line"><span class="comment"> */</span></div></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>1、模型数组内元素中模型必须要实现copy协议，模型内如果有嵌套模型，也需要实现copy协议，否则执行对对象拷贝操作会出现崩溃；<br>2、使用<code>- (instancetype)initWithArray:(NSArray&lt;ObjectType&gt; *)array copyItems:(BOOL)flag</code>实现模型数组拷贝；</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;通常需要实现对模型的拷贝都需要先实现&lt;code&gt;NSCopying、 NSMutableCopying&lt;/code&gt;协议，在这里我一直有个误区，以为实现了copy协议，数组使用拷贝操作都会对数组内实现copy协议的对象进行拷贝。&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://wynter.wang/categories/iOS/"/>
    
    
      <category term="blog" scheme="https://wynter.wang/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>iOS-GCD系列之dispatch_group_t</title>
    <link href="https://wynter.wang/2017/12/15/iOS-GCD%E7%B3%BB%E5%88%97%E4%B9%8B%E4%BB%BB%E5%8A%A1%E7%BB%84dispatch_group_t/"/>
    <id>https://wynter.wang/2017/12/15/iOS-GCD系列之任务组dispatch_group_t/</id>
    <published>2017-12-15T11:14:26.000Z</published>
    <updated>2018-01-16T01:36:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>这篇主要将对<code>dispatch_group_t</code>进行梳理应用，其主要用于监听管理任务组中任务完成情况，在任务完成后做一些操作处理。</p><a id="more"></a><h3 id="最常见的几个方法"><a href="#最常见的几个方法" class="headerlink" title="最常见的几个方法"></a>最常见的几个方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">// 创建一个任务组</div><div class="line">dispatch_group_create();</div><div class="line"></div><div class="line">// 将任务异步提交到任务组里</div><div class="line">dispatch_group_async(group, queue, block);</div><div class="line"></div><div class="line">// 不使用dispatch_group_async来提交任务</div><div class="line">// 任务组中任务数+1</div><div class="line">dispatch_group_enter(group);</div><div class="line"></div><div class="line">// 任务组中任务数-1与dispatch_group_enter必须成对出现</div><div class="line">dispatch_group_leave(group);</div><div class="line"></div><div class="line">// 等待之前任务执行完成后才继续执行</div><div class="line">dispatch_group_wait(group1, DISPATCH_TIME_FOREVER);</div><div class="line"></div><div class="line">// 当任务组中任务完成，会出发出发此方法的block</div><div class="line">dispatch_group_notify(group1, queue1,block);</div></pre></td></tr></table></figure><h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 创建任务组</span></div><div class="line">dispatch_group_t group = dispatch_group_create();</div><div class="line"><span class="comment">// 创建串行队列</span></div><div class="line"><span class="built_in">dispatch_queue_t</span> serialQueue = dispatch_queue_create(<span class="string">"com.wynter.serial"</span>, DISPATCH_QUEUE_SERIAL);</div><div class="line"><span class="comment">// 创建并发队列</span></div><div class="line"><span class="built_in">dispatch_queue_t</span> concurrentQueue = dispatch_queue_create(<span class="string">"com.wynter.concurrentQueue"</span>, DISPATCH_QUEUE_CONCURRENT);</div><div class="line"></div><div class="line">dispatch_group_async(group, concurrentQueue, ^&#123;</div><div class="line">    sleep(<span class="number">3</span>);</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"并发队列任务1，当前线程：%@"</span>, [<span class="built_in">NSThread</span> currentThread]);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">dispatch_group_async(group, serialQueue, ^&#123;</div><div class="line">    sleep(<span class="number">2</span>);</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"串行队列任务1，当前线程：%@"</span>, [<span class="built_in">NSThread</span> currentThread]);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">dispatch_group_async(group, serialQueue, ^&#123;</div><div class="line">     sleep(<span class="number">2</span>);</div><div class="line">     <span class="built_in">NSLog</span>(<span class="string">@"串行队列任务2，当前线程：%@"</span>, [<span class="built_in">NSThread</span> currentThread]);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 在任务组中并发执行，等同与dispatch_group_async(group, concurrentQueue, block)</span></div><div class="line">dispatch_group_enter(group);</div><div class="line"><span class="built_in">dispatch_async</span>(concurrentQueue, ^&#123;</div><div class="line">    sleep(<span class="number">2</span>);</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"并发队列任务2（enter/leave），当前线程：%@"</span>, [<span class="built_in">NSThread</span> currentThread]);</div><div class="line">    dispatch_group_leave(group);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 开始等待阻塞全部线程，直到任务中之前任务执行完成</span></div><div class="line">dispatch_group_wait(group, DISPATCH_TIME_FOREVER);</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"结束任务组中已执行任务的等待，继续向下执行任务"</span>);</div><div class="line">    </div><div class="line">dispatch_group_async(group, concurrentQueue, ^&#123;</div><div class="line">    sleep(<span class="number">1</span>);</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"并发队列任务3，当前线程：%@"</span>, [<span class="built_in">NSThread</span> currentThread]);</div><div class="line">&#125;);</div><div class="line">    </div><div class="line"><span class="comment">// 同一线程中通知任务组中队列中任务已经完成，故顺序打印通知结果</span></div><div class="line">dispatch_group_notify(group, concurrentQueue, ^&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"并发队列任务执行完毕，当前线程：%@"</span>, [<span class="built_in">NSThread</span> currentThread]);</div><div class="line">&#125;);</div><div class="line">    </div><div class="line">dispatch_group_notify(group, serialQueue, ^&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"串行队列任务执行完毕，当前线程：%@"</span>, [<span class="built_in">NSThread</span> currentThread]);</div><div class="line">&#125;);</div><div class="line">    </div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment"> 2017-12-15 11:11:46.761678+0800 GCD[32253:17053663] 并发队列任务2（enter/leave），当前线程&lt;NSThread: 0x60400026d0c0&gt;&#123;number = 4, name = (null)&#125;</span></div><div class="line"><span class="comment"> 2017-12-15 11:11:46.761678+0800 GCD[32253:17053661] 串行队列任务1，当前线程：&lt;NSThread: 0x60000026c280&gt;&#123;number = 3, name = (null)&#125;</span></div><div class="line"><span class="comment"> 2017-12-15 11:11:47.761193+0800 GCD[32253:17053660] 并发队列任务1，当前线程：&lt;NSThread: 0x60000026c540&gt;&#123;number = 5, name = (null)&#125;</span></div><div class="line"><span class="comment"> 2017-12-15 11:11:48.762938+0800 GCD[32253:17053661] 串行队列任务2，当前线程：&lt;NSThread: 0x60000026c280&gt;&#123;number = 3, name = (null)&#125;</span></div><div class="line"><span class="comment"> 2017-12-15 11:11:48.762940+0800 GCD[32356:17074006] 结束任务组中已执行任务的等待，继续向下执行任务</span></div><div class="line"><span class="comment"> 2017-12-15 11:11:49.767551+0800 GCD[32253:17053661] 并发队列任务3，当前线程：&lt;NSThread: 0x60000026c280&gt;&#123;number = 3, name = (null)&#125;</span></div><div class="line"><span class="comment"> 2017-12-15 11:11:49.768026+0800 GCD[33057:17230402] 并发队列任务执行完毕，当前线程：&lt;NSThread: 0x60000026c480&gt;&#123;number = 3, name = (null)&#125;</span></div><div class="line"><span class="comment"> 2017-12-15 11:11:49.768248+0800 GCD[33057:17230226] 串行队列任务执行完毕，当前线程：&lt;NSThread: 0x60400027e300&gt;&#123;number = 5, name = (null)&#125;</span></div><div class="line"><span class="comment"> */</span></div></pre></td></tr></table></figure><p>1、创建串行、并发队列各一个<br>2、向任务组的并发队列中添加了 3秒后执行<em>并发队列任务1</em>、2秒后<em>并发队列任务2（enter/leave）</em>、1秒后执行<em>任务3</em><br>3、向任务组的串行队列中添加了 2秒后执行<em>串行队列任务1</em>、2秒后执行<em>串行队列任务2</em><br>4、在<em>并发队列任务2（enter/leave）</em>后添加了任务等待<br>5、通知任务完成</p><p>2个并发队列任务开辟两条新线程，并发执行耗时3秒，同时串行队列中的2个任务在同一线程中执行耗时4秒。因为在并发任务后添加任务组等待方法，所以并发队列任务3要等前面4个任务执行完毕才能执行，任务组总共耗时5秒，如果去掉任务等待耗时为4秒。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>使用<code>dispatch_sync/dispatch_async</code>来处理同步或异步，其实完没有必要，串行并发队列完全可以满足需求，并且使用<code>dispatch_async</code>会导致任务组提前通知完成；</li><li>任务组通知不区分串还是并行队列，任务组中所有任务执行完成才会收到通知。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这篇主要将对&lt;code&gt;dispatch_group_t&lt;/code&gt;进行梳理应用，其主要用于监听管理任务组中任务完成情况，在任务完成后做一些操作处理。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://wynter.wang/categories/iOS/"/>
    
    
      <category term="GCD" scheme="https://wynter.wang/tags/GCD/"/>
    
  </entry>
  
  <entry>
    <title>iOS-GCD系列之dispatch_queue_t</title>
    <link href="https://wynter.wang/2017/12/11/iOS-GCD%E7%B3%BB%E5%88%97%E4%B9%8Bdispatch_queue_t/"/>
    <id>https://wynter.wang/2017/12/11/iOS-GCD系列之dispatch_queue_t/</id>
    <published>2017-12-11T06:14:26.000Z</published>
    <updated>2018-01-16T01:53:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>在一个即时聊天项目中创建一个同步任务来执行数据库操作，在获取数据时忽略了这一点，获取数据时又将同步任务添加到队列中，导致应用启动后事件无响应，甚至导致了死锁，使用应用crash。找了半天发现原来是对GCD的使用不当，引起的死锁。主要还是没有对GCD深入了解，对有些方法也是现学现用，才会引起这样的问题，因此准备用此系列文章记录GCD的学习使用过程。<br><a id="more"></a></p><h3 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h3><p>GCD：全称是Grand Central Dispatch，中文名字大脑中枢派发，基于C语言的是苹果公司为解决多核并行问题研发，线程及生命周期都有系统自动管理。</p><p>任务：执行什么操作<br>队列：用来存放任务，将需要执行的任务添加到队列中，队列会遵循FIFO原则（先进先出、后进后出），将队列中的任务取出，放到对应的线程中执行</p><p>同步：不创建新的线程，只在当前线程中执行任务<br>异步：创建多条线程执行任务</p><p>串行：同一时间每次只能执行一个任务，当前任务未完成下一个任务只能在队列中等候<br>并发：同一时间可以执行多个任务</p><p>死锁：两个或多个任务互相等待形成死循环阻塞了线程，甚至导致应用无响应</p><h3 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h3><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">串行</th><th style="text-align:center">并行</th><th style="text-align:center">主队列</th></tr></thead><tbody><tr><td style="text-align:center">同步</td><td style="text-align:center">没有开启新线程<br><br>串行执行任务</td><td style="text-align:center">没有开启新线程<br><br>串行执行任务</td><td style="text-align:center">发生死锁</td></tr><tr><td style="text-align:center">异步</td><td style="text-align:center">开启新线程<br><br>串行执行任务</td><td style="text-align:center">开启新线程<br><br>并发执行任务</td><td style="text-align:center">没有开启新线程<br><br>串行执行任务</td></tr></tbody></table><h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3><p>创建队列使用<code>dispatch_queue_create</code>，有两个参数，第一个参数是队列的名称，第二个参数是队列类型，通常创建串行队列都传<code>NULL</code>，我们也可以使用<code>dispatch_queue_attr_t</code>定义好的常量创建同步/并发队列</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">dispatch_queue_attr_t</span></div><div class="line"><span class="comment">DISPATCH_QUEUE_SERIAL: 同步队列</span></div><div class="line"><span class="comment">DISPATCH_QUEUE_CONCURRENT：并发队列</span></div><div class="line"><span class="comment">*/</span></div><div class="line"><span class="built_in">dispatch_queue_t</span> dispatch_queue_create ( <span class="keyword">const</span> <span class="keyword">char</span> *label, dispatch_queue_attr_t attr );</div></pre></td></tr></table></figure><h4 id="串行队列"><a href="#串行队列" class="headerlink" title="串行队列"></a>串行队列</h4><ul><li><p>手动创建串行队列，当任务需要按特定的顺序执行时，就需要使用串行调度队列，串行调度队列每次只能执行一个任务</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">dispatch_queue_t</span> queue = dispatch_queue_create(<span class="string">"com.wynter.customQueue"</span>, <span class="literal">NULL</span>);</div></pre></td></tr></table></figure></li><li><p>获取串行主队列，应用程序创建时系统自带串行队列，主队列中的任务都会在主线程中执行，一般会用于更新UI</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">dispatch_queue_t</span> queue = dispatch_get_main_queue();</div></pre></td></tr></table></figure></li></ul><h4 id="并发队列"><a href="#并发队列" class="headerlink" title="并发队列"></a>并发队列</h4><p>全局并发队列由系统提供，供整个应用使用，不需要我们手动创建可以同时并行执行多个任务，同样也遵循FIFO原则</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">队列优先级</span></div><div class="line"><span class="comment">DISPATCH_QUEUE_PRIORITY_HIGH 2 // 高</span></div><div class="line"><span class="comment">DISPATCH_QUEUE_PRIORITY_DEFAULT 0 // 默认（中）</span></div><div class="line"><span class="comment">DISPATCH_QUEUE_PRIORITY_LOW (-2) // 低</span></div><div class="line"><span class="comment">DISPATCH_QUEUE_PRIORITY_BACKGROUND INT16_MIN // 后台</span></div><div class="line"><span class="comment">*/</span></div><div class="line"><span class="built_in">dispatch_queue_t</span> queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>); </div><div class="line"><span class="comment">// dispatch_queue_t queue = dispatch_queue_create("com.wynter.customQueue", DISPATCH_QUEUE_CONCURRENT);</span></div></pre></td></tr></table></figure><h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><h4 id="同步-异步串行队列"><a href="#同步-异步串行队列" class="headerlink" title="同步/异步串行队列"></a>同步/异步串行队列</h4><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//  创建串行队列</span></div><div class="line"><span class="built_in">dispatch_queue_t</span> queue = dispatch_queue_create(<span class="string">"com.wynter.customQueue"</span>, DISPATCH_QUEUE_SERIAL);</div><div class="line"></div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"Begin"</span>);</div><div class="line"></div><div class="line"><span class="comment">// 异步串行队列</span></div><div class="line"><span class="built_in">dispatch_async</span>(queue, ^&#123;</div><div class="line">    sleep(<span class="number">3</span>);</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"异步任务1，当前线程：%@"</span>, [<span class="built_in">NSThread</span> currentThread]);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"队列外1，当前线程：%@"</span>, [<span class="built_in">NSThread</span> currentThread]);</div><div class="line"></div><div class="line"><span class="built_in">dispatch_async</span>(queue, ^&#123;</div><div class="line">    sleep(<span class="number">2</span>);</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"异步任务2，当前线程：%@"</span>, [<span class="built_in">NSThread</span> currentThread]);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"队列外2，当前线程：%@"</span>, [<span class="built_in">NSThread</span> currentThread]);</div><div class="line"></div><div class="line"><span class="comment">// 同步串行队列</span></div><div class="line"><span class="built_in">dispatch_sync</span>(queue, ^&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"同步任务1，当前线程：%@"</span>, [<span class="built_in">NSThread</span> currentThread]);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"队列外3，当前线程：%@"</span>, [<span class="built_in">NSThread</span> currentThread]);</div><div class="line"></div><div class="line"><span class="comment">// 异步串行队列</span></div><div class="line"><span class="built_in">dispatch_async</span>(queue, ^&#123;</div><div class="line">    sleep(<span class="number">1</span>);</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"异步任务3，当前线程：%@"</span>, [<span class="built_in">NSThread</span> currentThread]);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"End"</span>);</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> 2017-12-11 10:25:44.915490+0800 GCD[24560:5161766] Begin</span></div><div class="line"><span class="comment"> 2017-12-11 10:25:44.915783+0800 GCD[24560:5161766] 队列外1，当前线程：&lt;NSThread: 0x604000067800&gt;&#123;number = 1, name = main&#125;</span></div><div class="line"><span class="comment"> 2017-12-11 10:25:44.915957+0800 GCD[24560:5161766] 队列外2，当前线程：&lt;NSThread: 0x604000067800&gt;&#123;number = 1, name = main&#125;</span></div><div class="line"><span class="comment"> 2017-12-11 10:25:47.920174+0800 GCD[24560:5162003] 异步任务1，当前线程：&lt;NSThread: 0x60000027d6c0&gt;&#123;number = 3, name = (null)&#125;</span></div><div class="line"><span class="comment"> 2017-12-11 10:25:49.920629+0800 GCD[24560:5162003] 异步任务2，当前线程：&lt;NSThread: 0x60000027d6c0&gt;&#123;number = 3, name = (null)&#125;</span></div><div class="line"><span class="comment"> 2017-12-11 10:25:49.920987+0800 GCD[24560:5161766] 同步任务1，当前线程：&lt;NSThread: 0x604000067800&gt;&#123;number = 1, name = main&#125;</span></div><div class="line"><span class="comment"> 2017-12-11 10:25:49.921231+0800 GCD[24560:5161766] 队列外3，当前线程：&lt;NSThread: 0x604000067800&gt;&#123;number = 1, name = main&#125;</span></div><div class="line"><span class="comment"> 2017-12-11 10:25:49.921389+0800 GCD[24560:5161766] End</span></div><div class="line"><span class="comment"> 2017-12-11 10:25:50.926144+0800 GCD[24560:5162003] 异步任务3，当前线程：&lt;NSThread: 0x60000027d6c0&gt;&#123;number = 3, name = (null)&#125;</span></div><div class="line"><span class="comment"> */</span></div></pre></td></tr></table></figure><p>小结：</p><ul><li>同步串行队列使用主线程顺序执行任务，如果当前任务没有完成，不会继续执行同步块以外的其它代码</li><li>异步串行队列会创建一条新的线程，在当前线程中顺序执行任务，队列外的代码会在主线程中顺序执行，不受队列中任务的干扰</li></ul><h4 id="同步-异步并发队列"><a href="#同步-异步并发队列" class="headerlink" title="同步/异步并发队列"></a>同步/异步并发队列</h4><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 获取全局并发队列</span></div><div class="line"><span class="built_in">dispatch_queue_t</span> queue =  dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>);</div><div class="line"><span class="comment">// 手动创建并发队列</span></div><div class="line"><span class="comment">//dispatch_queue_t queue =  dispatch_queue_create("com.wynter.customQueue", DISPATCH_QUEUE_CONCURRENT);</span></div><div class="line"></div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"Begin"</span>);</div><div class="line"></div><div class="line"><span class="comment">// 异步并发队列</span></div><div class="line"><span class="built_in">dispatch_async</span>(queue, ^&#123;</div><div class="line">    sleep(<span class="number">3</span>);</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"异步任务1，当前线程：%@"</span>, [<span class="built_in">NSThread</span> currentThread]);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"队列外1，当前线程：%@"</span>, [<span class="built_in">NSThread</span> currentThread]);</div><div class="line"></div><div class="line"><span class="built_in">dispatch_async</span>(queue, ^&#123;</div><div class="line">    sleep(<span class="number">2</span>);</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"异步任务2，当前线程：%@"</span>, [<span class="built_in">NSThread</span> currentThread]);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"队列外2，当前线程：%@"</span>, [<span class="built_in">NSThread</span> currentThread]);</div><div class="line"></div><div class="line"><span class="comment">// 同步并发队列</span></div><div class="line"><span class="built_in">dispatch_sync</span>(queue, ^&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"同步任务1，当前线程：%@"</span>, [<span class="built_in">NSThread</span> currentThread]);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"队列外3，当前线程：%@"</span>, [<span class="built_in">NSThread</span> currentThread]);</div><div class="line"></div><div class="line"><span class="comment">// 异步串行队列</span></div><div class="line"><span class="built_in">dispatch_async</span>(queue, ^&#123;</div><div class="line">    sleep(<span class="number">1</span>);</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"异步任务3，当前线程：%@"</span>, [<span class="built_in">NSThread</span> currentThread]);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"End"</span>);</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> 2017-12-11 10:23:58.493818+0800 GCD[24510:5157656] Begin</span></div><div class="line"><span class="comment"> 2017-12-11 10:23:58.494137+0800 GCD[24510:5157656] 队列外1，当前线程：&lt;NSThread: 0x604000263000&gt;&#123;number = 1, name = main&#125;</span></div><div class="line"><span class="comment"> 2017-12-11 10:23:58.494333+0800 GCD[24510:5157656] 队列外2，当前线程：&lt;NSThread: 0x604000263000&gt;&#123;number = 1, name = main&#125;</span></div><div class="line"><span class="comment"> 2017-12-11 10:23:58.494488+0800 GCD[24510:5157656] 同步任务1，当前线程：&lt;NSThread: 0x604000263000&gt;&#123;number = 1, name = main&#125;</span></div><div class="line"><span class="comment"> 2017-12-11 10:23:58.494919+0800 GCD[24510:5157656] 队列外3，当前线程：&lt;NSThread: 0x604000263000&gt;&#123;number = 1, name = main&#125;</span></div><div class="line"><span class="comment"> 2017-12-11 10:23:58.495081+0800 GCD[24510:5157656] End</span></div><div class="line"><span class="comment"> 2017-12-11 10:23:59.498625+0800 GCD[24510:5158018] 异步任务3，当前线程：&lt;NSThread: 0x600000669080&gt;&#123;number = 3, name = (null)&#125;</span></div><div class="line"><span class="comment"> 2017-12-11 10:24:00.495907+0800 GCD[24510:5158020] 异步任务2，当前线程：&lt;NSThread: 0x600000662980&gt;&#123;number = 4, name = (null)&#125;</span></div><div class="line"><span class="comment"> 2017-12-11 10:24:01.499261+0800 GCD[24510:5158016] 异步任务1，当前线程：&lt;NSThread: 0x6000006692c0&gt;&#123;number = 5, name = (null)&#125;</span></div><div class="line"><span class="comment"> */</span></div></pre></td></tr></table></figure><p>小结：</p><ul><li>同步并发队列任务不会创新线程，依然在主线程中执行，与同步串行队列效果相同</li><li>异步并发队列会依据并发任务量，创建对应的线程数量，实际开发中异步并发任务顺序是不确定的。</li></ul><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><h4 id="合理并发"><a href="#合理并发" class="headerlink" title="合理并发"></a>合理并发</h4><p>在开发中并不是并发线程越多越好，线程多往往对也会以牺牲性能为代价，并发线程过多，并且不能很好的控制线程也有可能因为一个线程的阻塞或者死锁导致整个应用崩溃。</p><p>那么开多少个线程较为合理呢，这个没有确切的答案。最早了解到的是<code>CPU核数*2</code>，现在CPU性能已经提升了N个档位，所以具体要根据业务而定了，非必要情况还是控制在6个线程以内为好。我们可以使用<code>dispatch_semaphore</code>(信号量)来控制并发线程数量，之后会有详细介绍<code>dispatch_semaphore</code>的使用。</p><h4 id="设置队列优先级"><a href="#设置队列优先级" class="headerlink" title="设置队列优先级"></a>设置队列优先级</h4><p>在使用<code>dispatch_queue_create</code>创建队列的时候会发现，并没有设置队列优先级的选项，而全局队列则有高、中、低、后台四个等级可供选择，但是我们可以使用、<code>dispatch_queue_attr_make_with_qos_class</code>或者<code>dispatch_set_target_queue</code>方法来设置队列的优先级，<code>dispatch_queue_create</code>创建队列的优先级跟全局队列的默认优先级一样。</p><ul><li><p>通过<code>dispatch_queue_attr_make_with_qos_class</code>方法设置队列的优先级</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment"> *  QOS和全局并发队列优先级的映射关系</span></div><div class="line"><span class="comment"> *  - DISPATCH_QUEUE_PRIORITY_HIGH:         QOS_CLASS_USER_INITIATED</span></div><div class="line"><span class="comment"> *  - DISPATCH_QUEUE_PRIORITY_DEFAULT:      QOS_CLASS_DEFAULT</span></div><div class="line"><span class="comment"> *  - DISPATCH_QUEUE_PRIORITY_LOW:          QOS_CLASS_UTILITY</span></div><div class="line"><span class="comment"> *  - DISPATCH_QUEUE_PRIORITY_BACKGROUND:   QOS_CLASS_BACKGROUND</span></div><div class="line"><span class="comment">*/</span></div><div class="line">dispatch_queue_attr_t queue_attr = dispatch_queue_attr_make_with_qos_class (DISPATCH_QUEUE_SERIAL, QOS_CLASS_UTILITY,<span class="number">-1</span>);</div><div class="line"><span class="built_in">dispatch_queue_t</span> queue = dispatch_queue_create(<span class="string">"com.wynter.customQueue"</span>, queue_attr);</div></pre></td></tr></table></figure></li><li><p>通过<code>dispatch_set_target_queue</code>方法设置队列的优先级</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">dispatch_queue_t</span> serialQueue = dispatch_queue_create(<span class="string">"com.wynter.customQueue"</span>,<span class="literal">NULL</span>);  </div><div class="line"><span class="built_in">dispatch_queue_t</span> globalQueue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_LOW,<span class="number">0</span>);  </div><div class="line"> </div><div class="line"><span class="comment">// serialQueue队列参照globalQueue队列的优先级（DISPATCH_QUEUE_PRIORITY_LOW）</span></div><div class="line">dispatch_set_target_queue(serialQueue, globalQueue);</div></pre></td></tr></table></figure></li></ul><h3 id="使用栅栏控制并发队列中个别任务执行"><a href="#使用栅栏控制并发队列中个别任务执行" class="headerlink" title="使用栅栏控制并发队列中个别任务执行"></a>使用栅栏控制并发队列中个别任务执行</h3><p><code>dispatch_barrier_async</code>异步栅栏用于等待控制队列中前面的任务执行完毕后自己才执行，而它后面的任务需等待它完成之后才执行。异步栅栏不影响主线程中的任务执行顺序，但队列中的任务必须上面的规则。<code>dispatch_barrier_sync</code>同步栅栏则会阻塞主线程等待当前任务完成后才能按照原队列的规则执行。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">dispatch_queue_t</span> queue = dispatch_queue_create(<span class="string">"com.wynter.customQueue"</span>, DISPATCH_QUEUE_CONCURRENT);</div><div class="line"><span class="built_in">dispatch_async</span>(queue, ^&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"async_1"</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">dispatch_barrier_async(queue, ^&#123;</div><div class="line">    sleep(<span class="number">2</span>);</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"hi,barrier"</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="built_in">dispatch_async</span>(queue, ^&#123;</div><div class="line">   <span class="built_in">NSLog</span>(<span class="string">@"async_2"</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><h5 id="异步并发迭代任务"><a href="#异步并发迭代任务" class="headerlink" title="异步并发迭代任务"></a>异步并发迭代任务</h5><p>当我们需要执行循环异步处理任务时，可以考虑使用<code>dispatch_apply</code>来替换掉for循环，来并发地循环迭代任务。需要注意的是<code>dispatch_apply</code>的block内部异步并发，从下面代码打印<code>End</code>可以看出，<code>dispatch_apply</code>是等待其所有的循环运行完毕才往下执行。<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">dispatch_queue_t</span> queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>);</div><div class="line">size_t count = <span class="number">10</span>;</div><div class="line">dispatch_apply(count, queue, ^(size_t i) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%zu"</span>, i);</div><div class="line">&#125;);</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"End"</span>);</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> 2017-12-11 10:30:07.152514+0800 GCD[25447:5470863] 0</span></div><div class="line"><span class="comment"> 2017-12-11 10:30:07.152514+0800 GCD[25447:5471097] 1</span></div><div class="line"><span class="comment"> 2017-12-11 10:30:07.152527+0800 GCD[25447:5471095] 2</span></div><div class="line"><span class="comment"> 2017-12-11 10:30:07.152558+0800 GCD[25447:5471099] 3</span></div><div class="line"><span class="comment"> 2017-12-11 10:30:07.152731+0800 GCD[25447:5471097] 4</span></div><div class="line"><span class="comment"> 2017-12-11 10:30:07.152731+0800 GCD[25447:5470863] 5</span></div><div class="line"><span class="comment"> 2017-12-11 10:30:07.152849+0800 GCD[25447:5471095] 6</span></div><div class="line"><span class="comment"> 2017-12-11 10:30:07.152988+0800 GCD[25447:5471099] 7</span></div><div class="line"><span class="comment"> 2017-12-11 10:30:07.153095+0800 GCD[25447:5471097] 8</span></div><div class="line"><span class="comment"> 2017-12-11 10:30:07.153108+0800 GCD[25447:5470863] 9</span></div><div class="line"><span class="comment"> 2017-12-11 10:30:07.154095+0800 GCD[25447:5470863] End</span></div><div class="line"><span class="comment"> */</span></div></pre></td></tr></table></figure></p><h5 id="暂停-恢复队列"><a href="#暂停-恢复队列" class="headerlink" title="暂停/恢复队列"></a>暂停/恢复队列</h5><p><code>dispatch_suspend</code>不能保证可以立即停止队列上正在运行的block任务，而是在当前block任务执行完成后，暂停后续队列中的任务执行。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">dispatch_queue_t</span> queue = dispatch_queue_create(<span class="string">"com.wynter.customQueue"</span>, <span class="literal">NULL</span>);</div><div class="line"><span class="comment">// 暂停指定队列</span></div><div class="line">dispatch_suspend(queue);</div><div class="line"><span class="comment">// 恢复指定队列</span></div><div class="line">dispatchp_resume(queue);</div></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>为避免发生死锁，少用<code>dispatch_sync</code>，建议尽量不要是使用同步串行队列处理任务</li><li>不建议创建多个串行队列来执行任务，应该在全局并发队列中完成任务</li><li>避免多级嵌套使用GCD</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在一个即时聊天项目中创建一个同步任务来执行数据库操作，在获取数据时忽略了这一点，获取数据时又将同步任务添加到队列中，导致应用启动后事件无响应，甚至导致了死锁，使用应用crash。找了半天发现原来是对GCD的使用不当，引起的死锁。主要还是没有对GCD深入了解，对有些方法也是现学现用，才会引起这样的问题，因此准备用此系列文章记录GCD的学习使用过程。&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://wynter.wang/categories/iOS/"/>
    
    
      <category term="GCD" scheme="https://wynter.wang/tags/GCD/"/>
    
  </entry>
  
  <entry>
    <title>Mac 修改文件读写权限</title>
    <link href="https://wynter.wang/2017/11/17/Mac%20%E4%BF%AE%E6%94%B9%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99%E6%9D%83%E9%99%90/"/>
    <id>https://wynter.wang/2017/11/17/Mac 修改文件读写权限/</id>
    <published>2017-11-17T11:13:16.000Z</published>
    <updated>2017-11-17T09:48:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>使用到系统中Framework，已经正确添加了，无论如何都报错，尝试了各种方法，还是报错。</p><p> 猜想可能是在Xcode中查看系统的Framework时，不小心删除了部分API，但是当时有没又没有发现。</p><p>讲道理啊，一般系统API文件右上角都会有个黑色的小锁，这种情况是不可以编辑文件，即使不小心编辑后也会弹出提示框询问。</p><p>于是我随便进到一个API头文件中，居然可以编辑。那么可能就找到原因了，重新下载了个Xcode替换当前的，问题解决了。</p><a id="more"></a><p>为了防止这样的事再次发生，在Xcode中随意找个系统Framework，右键Show in Finder，然后将Frameworks目录下文件修改为只读权限：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo chmod -R a-w *</div></pre></td></tr></table></figure></p><p>再打开文件时，发现右上的小黑锁又回来。如何又后悔了，添加上读写权限即可：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo chmod -R 775 *</div></pre></td></tr></table></figure><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><p>具体权限：</p><blockquote><p>r(read):表示可读取权限,用数字4表示<br>w(write):表示可写入权限,用数字2表示<br>x(excute):表示可执行权限,用数字1表示</p></blockquote><p>权限范围：</p><blockquote><p>u(user):文件所有者<br>g(group):文件所有者所在群组<br>o(other):文件所有者及群组以外的用户<br>a(all):即全部的用户，包含拥有者，所属群组以及其他用户</p></blockquote><p>操作符号：</p><blockquote><p><code>+</code> 添加某个权限。<br><code>-</code> 取消某个权限。<br><code>=</code> 赋予给定权限并取消其他所有权限</p></blockquote><p>修改权限的命令格式:</p><blockquote><p>chmod [&lt;权限范围&gt;&lt;权限操作&gt;&lt;具体权限&gt;] [文件或目录…]</p></blockquote><p>例子：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">chmod 775 file</div><div class="line">chmod u=rwx,g=rwx,o=rx file</div></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>合理的使用文件读写操作权限，可以降低我们在工作中因为误操作引起的问题。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用到系统中Framework，已经正确添加了，无论如何都报错，尝试了各种方法，还是报错。&lt;/p&gt;
&lt;p&gt; 猜想可能是在Xcode中查看系统的Framework时，不小心删除了部分API，但是当时有没又没有发现。&lt;/p&gt;
&lt;p&gt;讲道理啊，一般系统API文件右上角都会有个黑色的小锁，这种情况是不可以编辑文件，即使不小心编辑后也会弹出提示框询问。&lt;/p&gt;
&lt;p&gt;于是我随便进到一个API头文件中，居然可以编辑。那么可能就找到原因了，重新下载了个Xcode替换当前的，问题解决了。&lt;/p&gt;
    
    </summary>
    
      <category term="blog" scheme="https://wynter.wang/categories/blog/"/>
    
    
      <category term="Linux" scheme="https://wynter.wang/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>iOS CGGeometry</title>
    <link href="https://wynter.wang/2017/10/11/iOS--CGGeometry/"/>
    <id>https://wynter.wang/2017/10/11/iOS--CGGeometry/</id>
    <published>2017-10-11T06:14:26.000Z</published>
    <updated>2017-12-18T02:55:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>CGGeometry是用C语言实现的一个封装了许多常用几何方法的文件<br><a id="more"></a></p><h2 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#pragma mark - 结构体</span></div><div class="line"></div><div class="line"><span class="comment">/* 定义一个点，设置x坐标和y坐标 */</span></div><div class="line"><span class="keyword">struct</span></div><div class="line"><span class="built_in">CGPoint</span> &#123;</div><div class="line">    <span class="built_in">CGFloat</span> x;</div><div class="line">    <span class="built_in">CGFloat</span> y;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">/* 定义一个尺寸，设置宽度和高度 */</span></div><div class="line"><span class="keyword">struct</span> <span class="built_in">CGSize</span> &#123;</div><div class="line">    <span class="built_in">CGFloat</span> width;</div><div class="line">    <span class="built_in">CGFloat</span> height;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">/* 定义一个二维矢量 */</span></div><div class="line"><span class="keyword">struct</span> <span class="built_in">CGVector</span> &#123;</div><div class="line">    <span class="built_in">CGFloat</span> dx;</div><div class="line">    <span class="built_in">CGFloat</span> dy;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">/* 定义一个矩形*/</span></div><div class="line"><span class="keyword">struct</span> <span class="built_in">CGRect</span> &#123;</div><div class="line">    <span class="built_in">CGPoint</span> origin;</div><div class="line">    <span class="built_in">CGSize</span> size;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h2 id="全局常量"><a href="#全局常量" class="headerlink" title="全局常量"></a>全局常量</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#pragma mark - 全局常量</span></div><div class="line"></div><div class="line"><span class="comment">/*零点，与CGPointMake(0, 0)等效 */</span> </div><div class="line"><span class="keyword">const</span> <span class="built_in">CGPoint</span> <span class="built_in">CGPointZero</span></div><div class="line"></div><div class="line"><span class="comment">/*零尺寸，与CGSizeMake(0, 0)等效*/</span> </div><div class="line"> <span class="keyword">const</span> <span class="built_in">CGSize</span> <span class="built_in">CGSizeZero</span></div><div class="line"></div><div class="line"><span class="comment">/*零矩形，与CGRectMake(0, 0, 0, 0)等效*/</span> </div><div class="line"> <span class="keyword">const</span> <span class="built_in">CGRect</span> <span class="built_in">CGRectZero</span></div><div class="line"></div><div class="line"><span class="comment">/*空矩形，这个和零矩形并不相同，当我们返回两个不相交矩形的交集时，会返回空矩形 */</span></div><div class="line"> <span class="keyword">const</span> <span class="built_in">CGRect</span> <span class="built_in">CGRectNull</span></div><div class="line"></div><div class="line"><span class="comment">/* 无限的矩形 */</span></div><div class="line"><span class="keyword">const</span> <span class="built_in">CGRect</span> <span class="built_in">CGRectInfinite</span></div><div class="line"></div><div class="line"><span class="meta">#pragma mark - 创建几何</span></div><div class="line"></div><div class="line"><span class="comment">/* 根据`(x, y)`创建一个点 */</span></div><div class="line"> <span class="built_in">CGPoint</span> <span class="built_in">CGPointMake</span>(<span class="built_in">CGFloat</span> x, <span class="built_in">CGFloat</span> y);</div><div class="line"></div><div class="line"><span class="comment">/* 根据 `(width, height)'创建一个尺寸*/</span></div><div class="line"><span class="built_in">CGSize</span> <span class="built_in">CGSizeMake</span>(<span class="built_in">CGFloat</span> width, <span class="built_in">CGFloat</span> height);</div><div class="line"></div><div class="line"><span class="comment">/* 根据 `(dx, dy)'创建一个矢量 */</span></div><div class="line"><span class="built_in">CGVector</span> <span class="built_in">CGVectorMake</span>(<span class="built_in">CGFloat</span> dx, <span class="built_in">CGFloat</span> dy);</div><div class="line"></div><div class="line"><span class="comment">/* 根据 `(x, y; width, height)'创建一个矩形*/</span></div><div class="line"> <span class="built_in">CGRect</span> <span class="built_in">CGRectMake</span>(<span class="built_in">CGFloat</span> x, <span class="built_in">CGFloat</span> y, <span class="built_in">CGFloat</span> width,</div><div class="line">  <span class="built_in">CGFloat</span> height);</div></pre></td></tr></table></figure><h2 id="获取几何参数"><a href="#获取几何参数" class="headerlink" title="获取几何参数"></a>获取几何参数</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#pragma mark - 获取几何参数</span></div><div class="line"></div><div class="line"><span class="comment">/* 根据 `rect'参数，获得矩形最左边的x值 */</span></div><div class="line"><span class="built_in">CGFloat</span> <span class="built_in">CGRectGetMinX</span>(<span class="built_in">CGRect</span> rect)</div><div class="line"></div><div class="line"><span class="comment">/* 根据 `rect'参数，获得矩形x轴中心点的值*/</span></div><div class="line"><span class="built_in">CGFloat</span> <span class="built_in">CGRectGetMidX</span>(<span class="built_in">CGRect</span> rect)</div><div class="line"></div><div class="line"><span class="comment">/*根据 `rect'参数， 获取矩形最右端的x值*/</span></div><div class="line"><span class="built_in">CGFloat</span> <span class="built_in">CGRectGetMaxX</span>(<span class="built_in">CGRect</span> rect)</div><div class="line"></div><div class="line"><span class="comment">/*根据 `rect'参数， 获取矩形最顶端的y值*/</span></div><div class="line"><span class="built_in">CGFloat</span> <span class="built_in">CGRectGetMinY</span>(<span class="built_in">CGRect</span> rect)</div><div class="line"></div><div class="line"><span class="comment">/* 根据 `rect'参数，获得矩形y轴中心点的值*/</span></div><div class="line"><span class="built_in">CGFloat</span> <span class="built_in">CGRectGetMidY</span>(<span class="built_in">CGRect</span> rect)</div><div class="line"></div><div class="line"><span class="comment">/*根据 `rect'参数， 获取矩形最底端的y值*/</span></div><div class="line"><span class="built_in">CGFloat</span> <span class="built_in">CGRectGetMaxY</span>(<span class="built_in">CGRect</span> rect)</div><div class="line"></div><div class="line"><span class="comment">/*根据 `rect'参数， 获取矩形宽度*/</span></div><div class="line"><span class="built_in">CGFloat</span> <span class="built_in">CGRectGetWidth</span>(<span class="built_in">CGRect</span> rect)</div><div class="line"></div><div class="line"><span class="comment">/*根据 `rect'参数， 获取矩形高度*/</span></div><div class="line"><span class="built_in">CGFloat</span> <span class="built_in">CGRectGetHeight</span>(<span class="built_in">CGRect</span> rect)</div><div class="line"></div><div class="line"><span class="comment">/*根据一个矩形创建一个标准的矩形*/</span></div><div class="line"> <span class="built_in">CGRect</span> <span class="built_in">CGRectStandardize</span>(<span class="built_in">CGRect</span> rect)</div><div class="line"></div><div class="line"><span class="comment">/* 创建一个内嵌的矩形，中心和rect参数的中心一样，将 rect 的坐标（origin）按照(dx,dy) 进行平移，然后将 rect 的大小（size） 宽度缩小2倍的 dx，高度缩小2倍的 dy. */</span></div><div class="line"><span class="built_in">CGRect</span> <span class="built_in">CGRectInset</span>(<span class="built_in">CGRect</span> rect, <span class="built_in">CGFloat</span> dx, <span class="built_in">CGFloat</span> dy)</div><div class="line"></div><div class="line"><span class="comment">/* 根据`rect' 参数，返回四个参数都是整数的矩形 */</span></div><div class="line"><span class="built_in">CGRect</span> <span class="built_in">CGRectIntegral</span>(<span class="built_in">CGRect</span> rect)</div><div class="line"></div><div class="line"><span class="comment">/* 返回 `r1' 和 `r2'并集*/</span></div><div class="line"><span class="built_in">CGRect</span> <span class="built_in">CGRectUnion</span>(<span class="built_in">CGRect</span> r1, <span class="built_in">CGRect</span> r2)</div><div class="line"></div><div class="line"><span class="comment">/* 返回 `r1' 和 `r2'交集，如果没有交集返回CGRectNull */</span></div><div class="line"><span class="built_in">CGRect</span> <span class="built_in">CGRectIntersection</span>(<span class="built_in">CGRect</span> r1, <span class="built_in">CGRect</span> r2)</div><div class="line"></div><div class="line"><span class="comment">/* 返回一个矩形，偏移量相对于rect，根据进行平移 */</span></div><div class="line"><span class="built_in">CGRect</span> <span class="built_in">CGRectOffset</span>(<span class="built_in">CGRect</span> rect, <span class="built_in">CGFloat</span> dx, <span class="built_in">CGFloat</span> dy)</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> 将一个 CGRect 切割成两个 CGRect</span></div><div class="line"><span class="comment"> @param rect 原矩形</span></div><div class="line"><span class="comment"> @param slice 切割的 CGRect 的指针</span></div><div class="line"><span class="comment"> @param remainder 切割后剩下的 CGRect 的指针</span></div><div class="line"><span class="comment"> @param amount 切割的大小，是edge开始计算的方向</span></div><div class="line"><span class="comment"> @param edge   CGRectMinXEdge(从x的最小处进行垂直分割)、  CGRectMinYEdge(从y的最小处进行水平分割)、CGRectMaxXEdge(从x最大处进行垂直分割)、 CGRectMaxYEdge(从y最大处进行水平分割)</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">void</span> <span class="built_in">CGRectDivide</span>(<span class="built_in">CGRect</span> rect, <span class="built_in">CGRect</span> *  slice,</div><div class="line">    <span class="built_in">CGRect</span> *  remainder, <span class="built_in">CGFloat</span> amount, <span class="built_in">CGRectEdge</span> edge)</div></pre></td></tr></table></figure><h2 id="判断几何"><a href="#判断几何" class="headerlink" title="判断几何"></a>判断几何</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#pragma mark - 判断几何</span></div><div class="line"><span class="comment">/* 如果 `point1' 和`point2' 相等返回YES, 否则返回NO*/</span></div><div class="line"><span class="keyword">bool</span> <span class="built_in">CGPointEqualToPoint</span>(<span class="built_in">CGPoint</span> point1, <span class="built_in">CGPoint</span> point2)</div><div class="line"></div><div class="line"><span class="comment">/* 如果`size1' 和 `size2' 相等返回YES, 否则返回NO */</span></div><div class="line"><span class="keyword">bool</span> <span class="built_in">CGSizeEqualToSize</span>(<span class="built_in">CGSize</span> size1, <span class="built_in">CGSize</span> size2)</div><div class="line"></div><div class="line"><span class="comment">/* 如果`rect1' 和 `rect2'  相等返回YES, 否则返回NO */</span></div><div class="line"><span class="keyword">bool</span> <span class="built_in">CGRectEqualToRect</span>(<span class="built_in">CGRect</span> rect1, <span class="built_in">CGRect</span> rect2)</div><div class="line"></div><div class="line"><span class="comment">/* 如果`rect'为空返回YES, 否则返回NO */</span></div><div class="line"> <span class="keyword">bool</span> <span class="built_in">CGRectIsEmpty</span>(<span class="built_in">CGRect</span> rect);</div><div class="line"></div><div class="line"><span class="comment">/* 如果 `rect' 为null返回YES, 否则返回NO */</span></div><div class="line"><span class="keyword">bool</span> <span class="built_in">CGRectIsNull</span>(<span class="built_in">CGRect</span> rect)</div><div class="line"></div><div class="line"><span class="comment">/* 如果 `rect' 是无限矩形返回YES, 否则返回NO */</span></div><div class="line"><span class="keyword">bool</span> <span class="built_in">CGRectIsInfinite</span>(<span class="built_in">CGRect</span> rect);</div><div class="line"></div><div class="line"><span class="comment">/* 判断点是否在矩形内*/</span></div><div class="line"><span class="keyword">bool</span> <span class="built_in">CGRectContainsPoint</span>(<span class="built_in">CGRect</span> rect, <span class="built_in">CGPoint</span> point)</div><div class="line"></div><div class="line"><span class="comment">/* 判断矩形1是否包含矩形2*/</span></div><div class="line"><span class="keyword">bool</span> <span class="built_in">CGRectContainsRect</span>(<span class="built_in">CGRect</span> rect1, <span class="built_in">CGRect</span> rect2)</div><div class="line"></div><div class="line"><span class="comment">/* 判断矩形1和矩形2是否相交*/</span></div><div class="line"><span class="keyword">bool</span> <span class="built_in">CGRectIntersectsRect</span>(<span class="built_in">CGRect</span> rect1, <span class="built_in">CGRect</span> rect2)</div></pre></td></tr></table></figure><h2 id="CGRectInset-与-CGRectOffset的区别"><a href="#CGRectInset-与-CGRectOffset的区别" class="headerlink" title="CGRectInset 与 CGRectOffset的区别"></a>CGRectInset 与 CGRectOffset的区别</h2><h3 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h3><p>CGRectInset：对矩形进行平移和缩放两个操作</p><p>CGRectOffset：只对矩形进行平移，不会改变其大小</p><h3 id="计算过程-伪代码"><a href="#计算过程-伪代码" class="headerlink" title="计算过程(伪代码)"></a>计算过程(伪代码)</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">CGRectInset</span>：</div><div class="line"><span class="built_in">CGRect</span> rect = <span class="built_in">CGRectMake</span>(x, y, width, height);</div><div class="line"><span class="built_in">CGRect</span> rectInset = <span class="built_in">CGRectInset</span>(rect, dx, dy);</div><div class="line">rectInset = <span class="built_in">CGRectMake</span>(dx, dy, (width - ( dx * <span class="number">2</span>)), (height - ( dy * <span class="number">2</span>)) );</div><div class="line"></div><div class="line"><span class="built_in">CGRectOffset</span>: </div><div class="line"><span class="built_in">CGRect</span> rect = <span class="built_in">CGRectMake</span>(x, y, width, height);</div><div class="line"><span class="built_in">CGRect</span> rectOffset = <span class="built_in">CGRectOffset</span>(rect, dx, dy);</div><div class="line">rectOffset = <span class="built_in">CGRectMake</span>((x + dx), (y + dy), width, height );</div></pre></td></tr></table></figure><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>CGRectInset：<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">CGRect</span> rect = <span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">30</span>, <span class="number">30</span>);</div><div class="line"><span class="built_in">CGRect</span> rectInset = <span class="built_in">CGRectInset</span>(rect, <span class="number">10</span>, <span class="number">10</span>);</div><div class="line"><span class="built_in">CGRect</span> bigRectInset = <span class="built_in">CGRectInset</span>(rect, <span class="number">-10</span>, <span class="number">-10</span>);</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"rectInset:%@ \n bigRectInset:%@"</span>, <span class="built_in">NSStringFromCGRect</span>(rectInset), <span class="built_in">NSStringFromCGRect</span>(bigRectInset));</div><div class="line"></div><div class="line"><span class="comment">// rectInset:&#123;&#123;10, 10&#125;, &#123;10, 10&#125;&#125;</span></div><div class="line"><span class="comment">// bigRectInset:&#123;&#123;-10, -10&#125;, &#123;50, 50&#125;&#125;</span></div></pre></td></tr></table></figure></p><p>CGRectOffset:<br> <figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">CGRect</span> rect = <span class="built_in">CGRectMake</span>(<span class="number">10</span>, <span class="number">10</span>, <span class="number">30</span>, <span class="number">30</span>);</div><div class="line"><span class="built_in">CGRect</span> rectOffset = <span class="built_in">CGRectOffset</span>(rect, <span class="number">10</span>, <span class="number">10</span>);</div><div class="line"><span class="built_in">CGRect</span> leftRectOffset = <span class="built_in">CGRectOffset</span>(rect, <span class="number">-10</span>, <span class="number">-10</span>);</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"rectOffset:%@ \n leftRectOffset:%@"</span>, <span class="built_in">NSStringFromCGRect</span>(rectOffset), <span class="built_in">NSStringFromCGRect</span>(leftRectOffset));</div><div class="line"></div><div class="line"><span class="comment">// rectOffset:&#123;&#123;20, 20&#125;, &#123;30, 30&#125;&#125;</span></div><div class="line"><span class="comment">// leftRectOffset:&#123;&#123;0, 0&#125;, &#123;30, 30&#125;&#125;</span></div></pre></td></tr></table></figure></p><h2 id="CGRectDivide"><a href="#CGRectDivide" class="headerlink" title="CGRectDivide"></a>CGRectDivide</h2><p>用来分割矩形，参数rect是源矩形，slice和remainder是分割后的两部分矩形，amount是分割线，edge是分割选项。</p><h3 id="edge分割方式"><a href="#edge分割方式" class="headerlink" title="edge分割方式"></a>edge分割方式</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="built_in">CF_ENUM</span>(uint32_t, <span class="built_in">CGRectEdge</span>) &#123;</div><div class="line">  <span class="comment">//从x的最小处进行垂直分割</span></div><div class="line">  <span class="built_in">CGRectMinXEdge</span>, </div><div class="line">  <span class="comment">//从y的最小处进行水平分割</span></div><div class="line">  <span class="built_in">CGRectMinYEdge</span>, </div><div class="line">  <span class="comment">//从x最大处进行垂直分割</span></div><div class="line">  <span class="built_in">CGRectMaxXEdge</span>,</div><div class="line">  <span class="comment">//从y最大处进行水平分割</span></div><div class="line">  <span class="built_in">CGRectMaxYEdge</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure><h3 id="计算过程-伪代码-1"><a href="#计算过程-伪代码-1" class="headerlink" title="计算过程(伪代码)"></a>计算过程(伪代码)</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">CGRect</span> rect = <span class="built_in">CGRectMake</span>(x, y, width, height);</div><div class="line"><span class="built_in">CGRectDivide</span>(rect, &amp;slice,</div><div class="line">             &amp;remainder, amount, edge);</div><div class="line"><span class="keyword">switch</span> (edge) &#123;</div><div class="line">    <span class="keyword">case</span> <span class="built_in">CGRectMinXEdge</span>: &#123;</div><div class="line">        *slice = <span class="built_in">CGRectMake</span>(x, y, amount, height);</div><div class="line">        *remainder = <span class="built_in">CGRectMake</span>(x + amount, y, width - amount, height);</div><div class="line">    &#125;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> <span class="built_in">CGRectMaxXEdge</span>: &#123;</div><div class="line">        *slice = <span class="built_in">CGRectMake</span>(width - amount, y, amount, height);</div><div class="line">        *remainder = <span class="built_in">CGRectMake</span>(x, y, width - amount, height);</div><div class="line">    &#125;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> <span class="built_in">CGRectMinYEdge</span>: &#123;</div><div class="line">        *slice = <span class="built_in">CGRectMake</span>(x, y, width, amount);</div><div class="line">        *remainder = <span class="built_in">CGRectMake</span>(x, y + amount, width, height - amount);</div><div class="line">    &#125;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> <span class="built_in">CGRectMaxYEdge</span>: &#123;</div><div class="line">        *slice = <span class="built_in">CGRectMake</span>(width, y - amount, width, amount);</div><div class="line">        *remainder = <span class="built_in">CGRectMake</span>(x, y, width, height - amount);</div><div class="line">    &#125;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">CGRect</span> slice;</div><div class="line"><span class="built_in">CGRect</span> remainder;</div><div class="line"><span class="built_in">CGRect</span> rect = <span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">200</span>, <span class="number">200</span>);</div><div class="line"><span class="built_in">CGRectDivide</span>(rect, &amp;slice, &amp;remainder, <span class="number">50</span>, <span class="built_in">CGRectMinXEdge</span>);</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"slice:%@ \n remainder:%@"</span>, <span class="built_in">NSStringFromCGRect</span>(slice), <span class="built_in">NSStringFromCGRect</span>(remainder));</div><div class="line"></div><div class="line"><span class="comment">// CGRectMinXEdge</span></div><div class="line"><span class="comment">// slice:&#123;&#123;0, 0&#125;, &#123;50, 200&#125;&#125;</span></div><div class="line"><span class="comment">// remainder:&#123;&#123;50, 0&#125;, &#123;150, 200&#125;&#125;</span></div><div class="line"></div><div class="line"><span class="comment">// CGRectMaxXEdge</span></div><div class="line"><span class="comment">// slice:&#123;&#123;150, 0&#125;, &#123;50, 200&#125;&#125;</span></div><div class="line"><span class="comment">// remainder:&#123;&#123;0, 0&#125;, &#123;150, 200&#125;&#125;</span></div><div class="line"></div><div class="line"><span class="comment">// CGRectMinYEdge</span></div><div class="line"><span class="comment">// slice:&#123;&#123;0, 0&#125;, &#123;200, 50&#125;&#125;</span></div><div class="line"><span class="comment">// remainder:&#123;&#123;0, 50&#125;, &#123;200, 150&#125;&#125;</span></div><div class="line"></div><div class="line"><span class="comment">// CGRectMaxYEdge</span></div><div class="line"><span class="comment">// slice:&#123;&#123;0, 150&#125;, &#123;200, 50&#125;&#125;</span></div><div class="line"><span class="comment">// remainder:&#123;&#123;0, 0&#125;, &#123;200, 150&#125;&#125;</span></div></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在没有对CGGeometry进行深入的了解时，只会用到平时常用的几个方法，可是深入了解后还是会发现有很多实用而自己却一直不知道的方法。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;CGGeometry是用C语言实现的一个封装了许多常用几何方法的文件&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://wynter.wang/categories/iOS/"/>
    
    
      <category term="API" scheme="https://wynter.wang/tags/API/"/>
    
      <category term="iOS" scheme="https://wynter.wang/tags/iOS/"/>
    
  </entry>
  
</feed>
