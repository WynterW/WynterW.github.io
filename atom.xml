<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Wynter</title>
  
  <subtitle>不甘平庸，就别懒惰</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://wynter.wang/"/>
  <updated>2017-12-29T06:28:52.000Z</updated>
  <id>https://wynter.wang/</id>
  
  <author>
    <name>Wynter</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>iOS-GCD系列之dispatch_queue_t</title>
    <link href="https://wynter.wang/2017/12/11/iOS-GCD%E7%B3%BB%E5%88%97%E4%B9%8Bdispatch_queue_t/"/>
    <id>https://wynter.wang/2017/12/11/iOS-GCD系列之dispatch_queue_t/</id>
    <published>2017-12-11T06:14:26.000Z</published>
    <updated>2017-12-29T06:28:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>在一个即时聊天项目中创建一个同步任务来执行数据库操作，在获取数据时忽略了这一点，获取数据时又将同步任务添加到队列中，导致应用启动后事件无响应，甚至导致了死锁，使用应用crash。找了半天发现原来是对GCD的使用不当，引起的死锁。主要还是没有对GCD深入了解，对有些方法也是现学现用，才会引起这样的问题，因此准备用此系列文章记录GCD的学习使用过程。<br><a id="more"></a></p><h3 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h3><p>GCD：全称是Grand Central Dispatch，中文名字大脑中枢派发，基于C语言的是苹果公司为解决多核并行问题研发，线程及生命周期都有系统自动管理。</p><p>任务：执行什么操作<br>队列：用来存放任务，将需要执行的任务添加到队列中，队列会遵循FIFO原则（先进先出、后进后出），将队列中的任务取出，放到对应的线程中执行</p><p>同步：不创建新的线程，只在当前线程中执行任务<br>异步：创建多条线程执行任务</p><p>串行：同一时间每次只能执行一个任务，当前任务未完成下一个任务只能在队列中等候<br>并发：同一时间可以执行多个任务</p><p>死锁：两个或多个任务互相等待形成死循环阻塞了线程，甚至导致应用无响应</p><h3 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h3><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">串行</th><th style="text-align:center">并行</th><th style="text-align:center">主队列</th></tr></thead><tbody><tr><td style="text-align:center">同步</td><td style="text-align:center">没有开启新线程<br><br>串行执行任务</td><td style="text-align:center">没有开启新线程<br><br>串行执行任务</td><td style="text-align:center">发生死锁</td></tr><tr><td style="text-align:center">异步</td><td style="text-align:center">开启新线程<br><br>串行执行任务</td><td style="text-align:center">开启新线程<br><br>并发执行任务</td><td style="text-align:center">没有开启新线程<br><br>串行执行任务</td></tr></tbody></table><h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3><p>创建队列使用<code>dispatch_queue_create</code>，有两个参数，第一个参数是队列的名称，第二个参数是队列类型，通常创建串行队列都传<code>NULL</code>，我们也可以使用<code>dispatch_queue_attr_t</code>定义好的常量创建同步/并发队列</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">dispatch_queue_attr_t</span></div><div class="line"><span class="comment">DISPATCH_QUEUE_SERIAL: 同步队列</span></div><div class="line"><span class="comment">DISPATCH_QUEUE_CONCURRENT：并发队列</span></div><div class="line"><span class="comment">*/</span></div><div class="line"><span class="built_in">dispatch_queue_t</span> dispatch_queue_create ( <span class="keyword">const</span> <span class="keyword">char</span> *label, dispatch_queue_attr_t attr );</div></pre></td></tr></table></figure><h4 id="串行队列"><a href="#串行队列" class="headerlink" title="串行队列"></a>串行队列</h4><ul><li><p>手动创建串行队列，当任务需要按特定的顺序执行时，就需要使用串行调度队列，串行调度队列每次只能执行一个任务</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">dispatch_queue_t</span> queue = dispatch_queue_create(<span class="string">"com.wynter.customQueue"</span>, <span class="literal">NULL</span>);</div></pre></td></tr></table></figure></li><li><p>获取串行主队列，应用程序创建时系统自带串行队列，主队列中的任务都会在主线程中执行，一般会用于更新UI</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">dispatch_queue_t</span> queue = dispatch_get_main_queue();</div></pre></td></tr></table></figure></li></ul><h4 id="并发队列"><a href="#并发队列" class="headerlink" title="并发队列"></a>并发队列</h4><p>全局并发队列由系统提供，供整个应用使用，不需要我们手动创建可以同时并行执行多个任务，同样也遵循FIFO原则</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">队列优先级</span></div><div class="line"><span class="comment">DISPATCH_QUEUE_PRIORITY_HIGH 2 // 高</span></div><div class="line"><span class="comment">DISPATCH_QUEUE_PRIORITY_DEFAULT 0 // 默认（中）</span></div><div class="line"><span class="comment">DISPATCH_QUEUE_PRIORITY_LOW (-2) // 低</span></div><div class="line"><span class="comment">DISPATCH_QUEUE_PRIORITY_BACKGROUND INT16_MIN // 后台</span></div><div class="line"><span class="comment">*/</span></div><div class="line"><span class="built_in">dispatch_queue_t</span> queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>); </div><div class="line"><span class="comment">// dispatch_queue_t queue = dispatch_queue_create("com.wynter.customQueue", DISPATCH_QUEUE_CONCURRENT);</span></div></pre></td></tr></table></figure><h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><h4 id="同步-异步串行队列"><a href="#同步-异步串行队列" class="headerlink" title="同步/异步串行队列"></a>同步/异步串行队列</h4><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//  创建串行队列</span></div><div class="line"><span class="built_in">dispatch_queue_t</span> queue = dispatch_queue_create(<span class="string">"com.wynter.customQueue"</span>, DISPATCH_QUEUE_SERIAL);</div><div class="line"></div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"Begin"</span>);</div><div class="line"></div><div class="line"><span class="comment">// 异步串行队列</span></div><div class="line"><span class="built_in">dispatch_async</span>(queue, ^&#123;</div><div class="line">    sleep(<span class="number">3</span>);</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"异步任务1，当前线程：%@"</span>, [<span class="built_in">NSThread</span> currentThread]);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"队列外1，当前线程：%@"</span>, [<span class="built_in">NSThread</span> currentThread]);</div><div class="line"></div><div class="line"><span class="built_in">dispatch_async</span>(queue, ^&#123;</div><div class="line">    sleep(<span class="number">2</span>);</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"异步任务2，当前线程：%@"</span>, [<span class="built_in">NSThread</span> currentThread]);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"队列外2，当前线程：%@"</span>, [<span class="built_in">NSThread</span> currentThread]);</div><div class="line"></div><div class="line"><span class="comment">// 同步串行队列</span></div><div class="line"><span class="built_in">dispatch_sync</span>(queue, ^&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"同步任务1，当前线程：%@"</span>, [<span class="built_in">NSThread</span> currentThread]);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"队列外3，当前线程：%@"</span>, [<span class="built_in">NSThread</span> currentThread]);</div><div class="line"></div><div class="line"><span class="comment">// 异步串行队列</span></div><div class="line"><span class="built_in">dispatch_async</span>(queue, ^&#123;</div><div class="line">    sleep(<span class="number">1</span>);</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"异步任务3，当前线程：%@"</span>, [<span class="built_in">NSThread</span> currentThread]);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"End"</span>);</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> 2017-12-11 10:25:44.915490+0800 GCD[24560:5161766] Begin</span></div><div class="line"><span class="comment"> 2017-12-11 10:25:44.915783+0800 GCD[24560:5161766] 队列外1，当前线程：&lt;NSThread: 0x604000067800&gt;&#123;number = 1, name = main&#125;</span></div><div class="line"><span class="comment"> 2017-12-11 10:25:44.915957+0800 GCD[24560:5161766] 队列外2，当前线程：&lt;NSThread: 0x604000067800&gt;&#123;number = 1, name = main&#125;</span></div><div class="line"><span class="comment"> 2017-12-11 10:25:47.920174+0800 GCD[24560:5162003] 异步任务1，当前线程：&lt;NSThread: 0x60000027d6c0&gt;&#123;number = 3, name = (null)&#125;</span></div><div class="line"><span class="comment"> 2017-12-11 10:25:49.920629+0800 GCD[24560:5162003] 异步任务2，当前线程：&lt;NSThread: 0x60000027d6c0&gt;&#123;number = 3, name = (null)&#125;</span></div><div class="line"><span class="comment"> 2017-12-11 10:25:49.920987+0800 GCD[24560:5161766] 同步任务1，当前线程：&lt;NSThread: 0x604000067800&gt;&#123;number = 1, name = main&#125;</span></div><div class="line"><span class="comment"> 2017-12-11 10:25:49.921231+0800 GCD[24560:5161766] 队列外3，当前线程：&lt;NSThread: 0x604000067800&gt;&#123;number = 1, name = main&#125;</span></div><div class="line"><span class="comment"> 2017-12-11 10:25:49.921389+0800 GCD[24560:5161766] End</span></div><div class="line"><span class="comment"> 2017-12-11 10:25:50.926144+0800 GCD[24560:5162003] 异步任务3，当前线程：&lt;NSThread: 0x60000027d6c0&gt;&#123;number = 3, name = (null)&#125;</span></div><div class="line"><span class="comment"> */</span></div></pre></td></tr></table></figure><p>小结：</p><ul><li>同步串行队列使用主线程顺序执行任务，如果当前任务没有完成，不会继续执行同步块以外的其它代码</li><li>异步串行队列会创建一条新的线程，在当前线程中顺序执行任务，队列外的代码会在主线程中顺序执行，不受队列中任务的干扰</li></ul><h4 id="同步-异步并发队列"><a href="#同步-异步并发队列" class="headerlink" title="同步/异步并发队列"></a>同步/异步并发队列</h4><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 获取全局并发队列</span></div><div class="line"><span class="built_in">dispatch_queue_t</span> queue =  dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>);</div><div class="line"><span class="comment">// 手动创建并发队列</span></div><div class="line"><span class="comment">//dispatch_queue_t queue =  dispatch_queue_create("com.wynter.customQueue", DISPATCH_QUEUE_CONCURRENT);</span></div><div class="line"></div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"Begin"</span>);</div><div class="line"></div><div class="line"><span class="comment">// 异步并发队列</span></div><div class="line"><span class="built_in">dispatch_async</span>(queue, ^&#123;</div><div class="line">    sleep(<span class="number">3</span>);</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"异步任务1，当前线程：%@"</span>, [<span class="built_in">NSThread</span> currentThread]);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"队列外1，当前线程：%@"</span>, [<span class="built_in">NSThread</span> currentThread]);</div><div class="line"></div><div class="line"><span class="built_in">dispatch_async</span>(queue, ^&#123;</div><div class="line">    sleep(<span class="number">2</span>);</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"异步任务2，当前线程：%@"</span>, [<span class="built_in">NSThread</span> currentThread]);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"队列外2，当前线程：%@"</span>, [<span class="built_in">NSThread</span> currentThread]);</div><div class="line"></div><div class="line"><span class="comment">// 同步并发队列</span></div><div class="line"><span class="built_in">dispatch_sync</span>(queue, ^&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"同步任务1，当前线程：%@"</span>, [<span class="built_in">NSThread</span> currentThread]);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"队列外3，当前线程：%@"</span>, [<span class="built_in">NSThread</span> currentThread]);</div><div class="line"></div><div class="line"><span class="comment">// 异步串行队列</span></div><div class="line"><span class="built_in">dispatch_async</span>(queue, ^&#123;</div><div class="line">    sleep(<span class="number">1</span>);</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"异步任务3，当前线程：%@"</span>, [<span class="built_in">NSThread</span> currentThread]);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"End"</span>);</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> 2017-12-11 10:23:58.493818+0800 GCD[24510:5157656] Begin</span></div><div class="line"><span class="comment"> 2017-12-11 10:23:58.494137+0800 GCD[24510:5157656] 队列外1，当前线程：&lt;NSThread: 0x604000263000&gt;&#123;number = 1, name = main&#125;</span></div><div class="line"><span class="comment"> 2017-12-11 10:23:58.494333+0800 GCD[24510:5157656] 队列外2，当前线程：&lt;NSThread: 0x604000263000&gt;&#123;number = 1, name = main&#125;</span></div><div class="line"><span class="comment"> 2017-12-11 10:23:58.494488+0800 GCD[24510:5157656] 同步任务1，当前线程：&lt;NSThread: 0x604000263000&gt;&#123;number = 1, name = main&#125;</span></div><div class="line"><span class="comment"> 2017-12-11 10:23:58.494919+0800 GCD[24510:5157656] 队列外3，当前线程：&lt;NSThread: 0x604000263000&gt;&#123;number = 1, name = main&#125;</span></div><div class="line"><span class="comment"> 2017-12-11 10:23:58.495081+0800 GCD[24510:5157656] End</span></div><div class="line"><span class="comment"> 2017-12-11 10:23:59.498625+0800 GCD[24510:5158018] 异步任务3，当前线程：&lt;NSThread: 0x600000669080&gt;&#123;number = 3, name = (null)&#125;</span></div><div class="line"><span class="comment"> 2017-12-11 10:24:00.495907+0800 GCD[24510:5158020] 异步任务2，当前线程：&lt;NSThread: 0x600000662980&gt;&#123;number = 4, name = (null)&#125;</span></div><div class="line"><span class="comment"> 2017-12-11 10:24:01.499261+0800 GCD[24510:5158016] 异步任务1，当前线程：&lt;NSThread: 0x6000006692c0&gt;&#123;number = 5, name = (null)&#125;</span></div><div class="line"><span class="comment"> */</span></div></pre></td></tr></table></figure><p>小结：</p><ul><li>同步并发队列任务不会创新线程，依然在主线程中执行，与同步串行队列效果相同</li><li>异步并发队列会依据并发任务量，创建对应的线程数量，实际开发中异步并发任务顺序是不确定的。</li></ul><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><h4 id="合理并发"><a href="#合理并发" class="headerlink" title="合理并发"></a>合理并发</h4><p>在开发中并不是并发线程越多越好，线程多往往对也会以牺牲性能为代价，并发线程过多，并且不能很好的控制线程也有可能因为一个线程的阻塞或者死锁导致整个应用崩溃。</p><p>那么开多少个线程较为合理呢，这个没有确切的答案。最早了解到的是<code>CPU核数*2</code>，现在CPU性能已经提升了N个档位，所以具体要根据业务而定了，非必要情况还是控制在6个线程以内为好。我们可以使用<code>dispatch_semaphore</code>(信号量)来控制并发线程数量，之后会有详细介绍<code>dispatch_semaphore</code>的使用。</p><h4 id="设置队列优先级"><a href="#设置队列优先级" class="headerlink" title="设置队列优先级"></a>设置队列优先级</h4><p>在使用<code>dispatch_queue_create</code>创建队列的时候会发现，并没有设置队列优先级的选项，而全局队列则有高、中、低、后台四个等级可供选择，但是我们可以使用、<code>dispatch_queue_attr_make_with_qos_class</code>或者<code>dispatch_set_target_queue</code>方法来设置队列的优先级，<code>dispatch_queue_create</code>创建队列的优先级跟全局队列的默认优先级一样。</p><ul><li><p>通过<code>dispatch_queue_attr_make_with_qos_class</code>方法设置队列的优先级</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment"> *  QOS和全局并发队列优先级的映射关系</span></div><div class="line"><span class="comment"> *  - DISPATCH_QUEUE_PRIORITY_HIGH:         QOS_CLASS_USER_INITIATED</span></div><div class="line"><span class="comment"> *  - DISPATCH_QUEUE_PRIORITY_DEFAULT:      QOS_CLASS_DEFAULT</span></div><div class="line"><span class="comment"> *  - DISPATCH_QUEUE_PRIORITY_LOW:          QOS_CLASS_UTILITY</span></div><div class="line"><span class="comment"> *  - DISPATCH_QUEUE_PRIORITY_BACKGROUND:   QOS_CLASS_BACKGROUND</span></div><div class="line"><span class="comment">*/</span></div><div class="line">dispatch_queue_attr_t queue_attr = dispatch_queue_attr_make_with_qos_class (DISPATCH_QUEUE_SERIAL, QOS_CLASS_UTILITY,<span class="number">-1</span>);</div><div class="line"><span class="built_in">dispatch_queue_t</span> queue = dispatch_queue_create(<span class="string">"com.wynter.customQueue"</span>, queue_attr);</div></pre></td></tr></table></figure></li><li><p>通过<code>dispatch_set_target_queue</code>方法设置队列的优先级</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">dispatch_queue_t</span> serialQueue = dispatch_queue_create(<span class="string">"com.wynter.customQueue"</span>,<span class="literal">NULL</span>);  </div><div class="line"><span class="built_in">dispatch_queue_t</span> globalQueue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_LOW,<span class="number">0</span>);  </div><div class="line"> </div><div class="line"><span class="comment">// serialQueue队列参照globalQueue队列的优先级（DISPATCH_QUEUE_PRIORITY_LOW）</span></div><div class="line">dispatch_set_target_queue(serialQueue, globalQueue);</div></pre></td></tr></table></figure></li></ul><h3 id="使用栅栏控制并发队列中个别任务执行"><a href="#使用栅栏控制并发队列中个别任务执行" class="headerlink" title="使用栅栏控制并发队列中个别任务执行"></a>使用栅栏控制并发队列中个别任务执行</h3><p><code>dispatch_barrier_async</code>异步栅栏用于等待控制队列中前面的任务执行完毕后自己才执行，而它后面的任务需等待它完成之后才执行。异步栅栏不影响主线程中的任务执行顺序，但队列中的任务必须上面的规则。<code>dispatch_barrier_sync</code>同步栅栏则会阻塞主线程等待当前任务完成后才能按照原队列的规则执行。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">dispatch_queue_t</span> queue = dispatch_queue_create(<span class="string">"com.wynter.customQueue"</span>, DISPATCH_QUEUE_CONCURRENT);</div><div class="line"><span class="built_in">dispatch_async</span>(queue, ^&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"async_1"</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">dispatch_barrier_async(queue, ^&#123;</div><div class="line">    sleep(<span class="number">2</span>);</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"hi,barrier"</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="built_in">dispatch_async</span>(queue, ^&#123;</div><div class="line">   <span class="built_in">NSLog</span>(<span class="string">@"async_2"</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><h5 id="异步并发迭代任务"><a href="#异步并发迭代任务" class="headerlink" title="异步并发迭代任务"></a>异步并发迭代任务</h5><p>当我们需要执行循环异步处理任务时，可以考虑使用<code>dispatch_apply</code>来替换掉for循环，来并发地循环迭代任务。需要注意的是<code>dispatch_apply</code>的block内部异步并发，从下面代码打印<code>End</code>可以看出，<code>dispatch_apply</code>是等待其所有的循环运行完毕才往下执行。<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">dispatch_queue_t</span> queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>);</div><div class="line">size_t count = <span class="number">10</span>;</div><div class="line">dispatch_apply(count, queue, ^(size_t i) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%zu"</span>, i);</div><div class="line">&#125;);</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"End"</span>);</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> 2017-12-11 10:30:07.152514+0800 GCD[25447:5470863] 0</span></div><div class="line"><span class="comment"> 2017-12-11 10:30:07.152514+0800 GCD[25447:5471097] 1</span></div><div class="line"><span class="comment"> 2017-12-11 10:30:07.152527+0800 GCD[25447:5471095] 2</span></div><div class="line"><span class="comment"> 2017-12-11 10:30:07.152558+0800 GCD[25447:5471099] 3</span></div><div class="line"><span class="comment"> 2017-12-11 10:30:07.152731+0800 GCD[25447:5471097] 4</span></div><div class="line"><span class="comment"> 2017-12-11 10:30:07.152731+0800 GCD[25447:5470863] 5</span></div><div class="line"><span class="comment"> 2017-12-11 10:30:07.152849+0800 GCD[25447:5471095] 6</span></div><div class="line"><span class="comment"> 2017-12-11 10:30:07.152988+0800 GCD[25447:5471099] 7</span></div><div class="line"><span class="comment"> 2017-12-11 10:30:07.153095+0800 GCD[25447:5471097] 8</span></div><div class="line"><span class="comment"> 2017-12-11 10:30:07.153108+0800 GCD[25447:5470863] 9</span></div><div class="line"><span class="comment"> 2017-12-11 10:30:07.154095+0800 GCD[25447:5470863] End</span></div><div class="line"><span class="comment"> */</span></div></pre></td></tr></table></figure></p><h5 id="暂停-恢复队列"><a href="#暂停-恢复队列" class="headerlink" title="暂停/恢复队列"></a>暂停/恢复队列</h5><p><code>dispatch_suspend</code>不能保证可以立即停止队列上正在运行的block任务，而是在当前block任务执行完成后，暂停后续队列中的任务执行。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">dispatch_queue_t</span> queue = dispatch_queue_create(<span class="string">"com.wynter.customQueue"</span>, <span class="literal">NULL</span>);</div><div class="line"><span class="comment">// 暂停指定队列</span></div><div class="line">dispatch_suspend(queue);</div><div class="line"><span class="comment">// 恢复指定队列</span></div><div class="line">dispatchp_resume(queue);</div></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>为避免发生死锁，少用<code>dispatch_sync</code>，建议尽量不要是使用同步串行队列处理任务</li><li>不建议创建多个串行队列来执行任务，应该在全局并发队列中完成任务</li><li>避免多级嵌套使用GCD</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在一个即时聊天项目中创建一个同步任务来执行数据库操作，在获取数据时忽略了这一点，获取数据时又将同步任务添加到队列中，导致应用启动后事件无响应，甚至导致了死锁，使用应用crash。找了半天发现原来是对GCD的使用不当，引起的死锁。主要还是没有对GCD深入了解，对有些方法也是现学现用，才会引起这样的问题，因此准备用此系列文章记录GCD的学习使用过程。&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://wynter.wang/categories/iOS/"/>
    
    
      <category term="GCD" scheme="https://wynter.wang/tags/GCD/"/>
    
  </entry>
  
  <entry>
    <title>Mac 修改文件读写权限</title>
    <link href="https://wynter.wang/2017/11/17/Mac%20%E4%BF%AE%E6%94%B9%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99%E6%9D%83%E9%99%90/"/>
    <id>https://wynter.wang/2017/11/17/Mac 修改文件读写权限/</id>
    <published>2017-11-17T11:13:16.000Z</published>
    <updated>2017-11-17T09:48:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>使用到系统中Framework，已经正确添加了，无论如何都报错，尝试了各种方法，还是报错。</p><p> 猜想可能是在Xcode中查看系统的Framework时，不小心删除了部分API，但是当时有没又没有发现。</p><p>讲道理啊，一般系统API文件右上角都会有个黑色的小锁，这种情况是不可以编辑文件，即使不小心编辑后也会弹出提示框询问。</p><p>于是我随便进到一个API头文件中，居然可以编辑。那么可能就找到原因了，重新下载了个Xcode替换当前的，问题解决了。</p><a id="more"></a><p>为了防止这样的事再次发生，在Xcode中随意找个系统Framework，右键Show in Finder，然后将Frameworks目录下文件修改为只读权限：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo chmod -R a-w *</div></pre></td></tr></table></figure></p><p>再打开文件时，发现右上的小黑锁又回来。如何又后悔了，添加上读写权限即可：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo chmod -R 775 *</div></pre></td></tr></table></figure><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><p>具体权限：</p><blockquote><p>r(read):表示可读取权限,用数字4表示<br>w(write):表示可写入权限,用数字2表示<br>x(excute):表示可执行权限,用数字1表示</p></blockquote><p>权限范围：</p><blockquote><p>u(user):文件所有者<br>g(group):文件所有者所在群组<br>o(other):文件所有者及群组以外的用户<br>a(all):即全部的用户，包含拥有者，所属群组以及其他用户</p></blockquote><p>操作符号：</p><blockquote><p><code>+</code> 添加某个权限。<br><code>-</code> 取消某个权限。<br><code>=</code> 赋予给定权限并取消其他所有权限</p></blockquote><p>修改权限的命令格式:</p><blockquote><p>chmod [&lt;权限范围&gt;&lt;权限操作&gt;&lt;具体权限&gt;] [文件或目录…]</p></blockquote><p>例子：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">chmod 775 file</div><div class="line">chmod u=rwx,g=rwx,o=rx file</div></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>合理的使用文件读写操作权限，可以降低我们在工作中因为误操作引起的问题。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用到系统中Framework，已经正确添加了，无论如何都报错，尝试了各种方法，还是报错。&lt;/p&gt;
&lt;p&gt; 猜想可能是在Xcode中查看系统的Framework时，不小心删除了部分API，但是当时有没又没有发现。&lt;/p&gt;
&lt;p&gt;讲道理啊，一般系统API文件右上角都会有个黑色的小锁，这种情况是不可以编辑文件，即使不小心编辑后也会弹出提示框询问。&lt;/p&gt;
&lt;p&gt;于是我随便进到一个API头文件中，居然可以编辑。那么可能就找到原因了，重新下载了个Xcode替换当前的，问题解决了。&lt;/p&gt;
    
    </summary>
    
      <category term="blog" scheme="https://wynter.wang/categories/blog/"/>
    
    
      <category term="Linux" scheme="https://wynter.wang/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>iOS CGGeometry</title>
    <link href="https://wynter.wang/2017/10/11/iOS--CGGeometry/"/>
    <id>https://wynter.wang/2017/10/11/iOS--CGGeometry/</id>
    <published>2017-10-11T06:14:26.000Z</published>
    <updated>2017-12-18T02:55:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>CGGeometry是用C语言实现的一个封装了许多常用几何方法的文件<br><a id="more"></a></p><h2 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#pragma mark - 结构体</span></div><div class="line"></div><div class="line"><span class="comment">/* 定义一个点，设置x坐标和y坐标 */</span></div><div class="line"><span class="keyword">struct</span></div><div class="line"><span class="built_in">CGPoint</span> &#123;</div><div class="line">    <span class="built_in">CGFloat</span> x;</div><div class="line">    <span class="built_in">CGFloat</span> y;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">/* 定义一个尺寸，设置宽度和高度 */</span></div><div class="line"><span class="keyword">struct</span> <span class="built_in">CGSize</span> &#123;</div><div class="line">    <span class="built_in">CGFloat</span> width;</div><div class="line">    <span class="built_in">CGFloat</span> height;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">/* 定义一个二维矢量 */</span></div><div class="line"><span class="keyword">struct</span> <span class="built_in">CGVector</span> &#123;</div><div class="line">    <span class="built_in">CGFloat</span> dx;</div><div class="line">    <span class="built_in">CGFloat</span> dy;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">/* 定义一个矩形*/</span></div><div class="line"><span class="keyword">struct</span> <span class="built_in">CGRect</span> &#123;</div><div class="line">    <span class="built_in">CGPoint</span> origin;</div><div class="line">    <span class="built_in">CGSize</span> size;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h2 id="全局常量"><a href="#全局常量" class="headerlink" title="全局常量"></a>全局常量</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#pragma mark - 全局常量</span></div><div class="line"></div><div class="line"><span class="comment">/*零点，与CGPointMake(0, 0)等效 */</span> </div><div class="line"><span class="keyword">const</span> <span class="built_in">CGPoint</span> <span class="built_in">CGPointZero</span></div><div class="line"></div><div class="line"><span class="comment">/*零尺寸，与CGSizeMake(0, 0)等效*/</span> </div><div class="line"> <span class="keyword">const</span> <span class="built_in">CGSize</span> <span class="built_in">CGSizeZero</span></div><div class="line"></div><div class="line"><span class="comment">/*零矩形，与CGRectMake(0, 0, 0, 0)等效*/</span> </div><div class="line"> <span class="keyword">const</span> <span class="built_in">CGRect</span> <span class="built_in">CGRectZero</span></div><div class="line"></div><div class="line"><span class="comment">/*空矩形，这个和零矩形并不相同，当我们返回两个不相交矩形的交集时，会返回空矩形 */</span></div><div class="line"> <span class="keyword">const</span> <span class="built_in">CGRect</span> <span class="built_in">CGRectNull</span></div><div class="line"></div><div class="line"><span class="comment">/* 无限的矩形 */</span></div><div class="line"><span class="keyword">const</span> <span class="built_in">CGRect</span> <span class="built_in">CGRectInfinite</span></div><div class="line"></div><div class="line"><span class="meta">#pragma mark - 创建几何</span></div><div class="line"></div><div class="line"><span class="comment">/* 根据`(x, y)`创建一个点 */</span></div><div class="line"> <span class="built_in">CGPoint</span> <span class="built_in">CGPointMake</span>(<span class="built_in">CGFloat</span> x, <span class="built_in">CGFloat</span> y);</div><div class="line"></div><div class="line"><span class="comment">/* 根据 `(width, height)'创建一个尺寸*/</span></div><div class="line"><span class="built_in">CGSize</span> <span class="built_in">CGSizeMake</span>(<span class="built_in">CGFloat</span> width, <span class="built_in">CGFloat</span> height);</div><div class="line"></div><div class="line"><span class="comment">/* 根据 `(dx, dy)'创建一个矢量 */</span></div><div class="line"><span class="built_in">CGVector</span> <span class="built_in">CGVectorMake</span>(<span class="built_in">CGFloat</span> dx, <span class="built_in">CGFloat</span> dy);</div><div class="line"></div><div class="line"><span class="comment">/* 根据 `(x, y; width, height)'创建一个矩形*/</span></div><div class="line"> <span class="built_in">CGRect</span> <span class="built_in">CGRectMake</span>(<span class="built_in">CGFloat</span> x, <span class="built_in">CGFloat</span> y, <span class="built_in">CGFloat</span> width,</div><div class="line">  <span class="built_in">CGFloat</span> height);</div></pre></td></tr></table></figure><h2 id="获取几何参数"><a href="#获取几何参数" class="headerlink" title="获取几何参数"></a>获取几何参数</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#pragma mark - 获取几何参数</span></div><div class="line"></div><div class="line"><span class="comment">/* 根据 `rect'参数，获得矩形最左边的x值 */</span></div><div class="line"><span class="built_in">CGFloat</span> <span class="built_in">CGRectGetMinX</span>(<span class="built_in">CGRect</span> rect)</div><div class="line"></div><div class="line"><span class="comment">/* 根据 `rect'参数，获得矩形x轴中心点的值*/</span></div><div class="line"><span class="built_in">CGFloat</span> <span class="built_in">CGRectGetMidX</span>(<span class="built_in">CGRect</span> rect)</div><div class="line"></div><div class="line"><span class="comment">/*根据 `rect'参数， 获取矩形最右端的x值*/</span></div><div class="line"><span class="built_in">CGFloat</span> <span class="built_in">CGRectGetMaxX</span>(<span class="built_in">CGRect</span> rect)</div><div class="line"></div><div class="line"><span class="comment">/*根据 `rect'参数， 获取矩形最顶端的y值*/</span></div><div class="line"><span class="built_in">CGFloat</span> <span class="built_in">CGRectGetMinY</span>(<span class="built_in">CGRect</span> rect)</div><div class="line"></div><div class="line"><span class="comment">/* 根据 `rect'参数，获得矩形y轴中心点的值*/</span></div><div class="line"><span class="built_in">CGFloat</span> <span class="built_in">CGRectGetMidY</span>(<span class="built_in">CGRect</span> rect)</div><div class="line"></div><div class="line"><span class="comment">/*根据 `rect'参数， 获取矩形最底端的y值*/</span></div><div class="line"><span class="built_in">CGFloat</span> <span class="built_in">CGRectGetMaxY</span>(<span class="built_in">CGRect</span> rect)</div><div class="line"></div><div class="line"><span class="comment">/*根据 `rect'参数， 获取矩形宽度*/</span></div><div class="line"><span class="built_in">CGFloat</span> <span class="built_in">CGRectGetWidth</span>(<span class="built_in">CGRect</span> rect)</div><div class="line"></div><div class="line"><span class="comment">/*根据 `rect'参数， 获取矩形高度*/</span></div><div class="line"><span class="built_in">CGFloat</span> <span class="built_in">CGRectGetHeight</span>(<span class="built_in">CGRect</span> rect)</div><div class="line"></div><div class="line"><span class="comment">/*根据一个矩形创建一个标准的矩形*/</span></div><div class="line"> <span class="built_in">CGRect</span> <span class="built_in">CGRectStandardize</span>(<span class="built_in">CGRect</span> rect)</div><div class="line"></div><div class="line"><span class="comment">/* 创建一个内嵌的矩形，中心和rect参数的中心一样，将 rect 的坐标（origin）按照(dx,dy) 进行平移，然后将 rect 的大小（size） 宽度缩小2倍的 dx，高度缩小2倍的 dy. */</span></div><div class="line"><span class="built_in">CGRect</span> <span class="built_in">CGRectInset</span>(<span class="built_in">CGRect</span> rect, <span class="built_in">CGFloat</span> dx, <span class="built_in">CGFloat</span> dy)</div><div class="line"></div><div class="line"><span class="comment">/* 根据`rect' 参数，返回四个参数都是整数的矩形 */</span></div><div class="line"><span class="built_in">CGRect</span> <span class="built_in">CGRectIntegral</span>(<span class="built_in">CGRect</span> rect)</div><div class="line"></div><div class="line"><span class="comment">/* 返回 `r1' 和 `r2'并集*/</span></div><div class="line"><span class="built_in">CGRect</span> <span class="built_in">CGRectUnion</span>(<span class="built_in">CGRect</span> r1, <span class="built_in">CGRect</span> r2)</div><div class="line"></div><div class="line"><span class="comment">/* 返回 `r1' 和 `r2'交集，如果没有交集返回CGRectNull */</span></div><div class="line"><span class="built_in">CGRect</span> <span class="built_in">CGRectIntersection</span>(<span class="built_in">CGRect</span> r1, <span class="built_in">CGRect</span> r2)</div><div class="line"></div><div class="line"><span class="comment">/* 返回一个矩形，偏移量相对于rect，根据进行平移 */</span></div><div class="line"><span class="built_in">CGRect</span> <span class="built_in">CGRectOffset</span>(<span class="built_in">CGRect</span> rect, <span class="built_in">CGFloat</span> dx, <span class="built_in">CGFloat</span> dy)</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> 将一个 CGRect 切割成两个 CGRect</span></div><div class="line"><span class="comment"> @param rect 原矩形</span></div><div class="line"><span class="comment"> @param slice 切割的 CGRect 的指针</span></div><div class="line"><span class="comment"> @param remainder 切割后剩下的 CGRect 的指针</span></div><div class="line"><span class="comment"> @param amount 切割的大小，是edge开始计算的方向</span></div><div class="line"><span class="comment"> @param edge   CGRectMinXEdge(从x的最小处进行垂直分割)、  CGRectMinYEdge(从y的最小处进行水平分割)、CGRectMaxXEdge(从x最大处进行垂直分割)、 CGRectMaxYEdge(从y最大处进行水平分割)</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">void</span> <span class="built_in">CGRectDivide</span>(<span class="built_in">CGRect</span> rect, <span class="built_in">CGRect</span> *  slice,</div><div class="line">    <span class="built_in">CGRect</span> *  remainder, <span class="built_in">CGFloat</span> amount, <span class="built_in">CGRectEdge</span> edge)</div></pre></td></tr></table></figure><h2 id="判断几何"><a href="#判断几何" class="headerlink" title="判断几何"></a>判断几何</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#pragma mark - 判断几何</span></div><div class="line"><span class="comment">/* 如果 `point1' 和`point2' 相等返回YES, 否则返回NO*/</span></div><div class="line"><span class="keyword">bool</span> <span class="built_in">CGPointEqualToPoint</span>(<span class="built_in">CGPoint</span> point1, <span class="built_in">CGPoint</span> point2)</div><div class="line"></div><div class="line"><span class="comment">/* 如果`size1' 和 `size2' 相等返回YES, 否则返回NO */</span></div><div class="line"><span class="keyword">bool</span> <span class="built_in">CGSizeEqualToSize</span>(<span class="built_in">CGSize</span> size1, <span class="built_in">CGSize</span> size2)</div><div class="line"></div><div class="line"><span class="comment">/* 如果`rect1' 和 `rect2'  相等返回YES, 否则返回NO */</span></div><div class="line"><span class="keyword">bool</span> <span class="built_in">CGRectEqualToRect</span>(<span class="built_in">CGRect</span> rect1, <span class="built_in">CGRect</span> rect2)</div><div class="line"></div><div class="line"><span class="comment">/* 如果`rect'为空返回YES, 否则返回NO */</span></div><div class="line"> <span class="keyword">bool</span> <span class="built_in">CGRectIsEmpty</span>(<span class="built_in">CGRect</span> rect);</div><div class="line"></div><div class="line"><span class="comment">/* 如果 `rect' 为null返回YES, 否则返回NO */</span></div><div class="line"><span class="keyword">bool</span> <span class="built_in">CGRectIsNull</span>(<span class="built_in">CGRect</span> rect)</div><div class="line"></div><div class="line"><span class="comment">/* 如果 `rect' 是无限矩形返回YES, 否则返回NO */</span></div><div class="line"><span class="keyword">bool</span> <span class="built_in">CGRectIsInfinite</span>(<span class="built_in">CGRect</span> rect);</div><div class="line"></div><div class="line"><span class="comment">/* 判断点是否在矩形内*/</span></div><div class="line"><span class="keyword">bool</span> <span class="built_in">CGRectContainsPoint</span>(<span class="built_in">CGRect</span> rect, <span class="built_in">CGPoint</span> point)</div><div class="line"></div><div class="line"><span class="comment">/* 判断矩形1是否包含矩形2*/</span></div><div class="line"><span class="keyword">bool</span> <span class="built_in">CGRectContainsRect</span>(<span class="built_in">CGRect</span> rect1, <span class="built_in">CGRect</span> rect2)</div><div class="line"></div><div class="line"><span class="comment">/* 判断矩形1和矩形2是否相交*/</span></div><div class="line"><span class="keyword">bool</span> <span class="built_in">CGRectIntersectsRect</span>(<span class="built_in">CGRect</span> rect1, <span class="built_in">CGRect</span> rect2)</div></pre></td></tr></table></figure><h2 id="CGRectInset-与-CGRectOffset的区别"><a href="#CGRectInset-与-CGRectOffset的区别" class="headerlink" title="CGRectInset 与 CGRectOffset的区别"></a>CGRectInset 与 CGRectOffset的区别</h2><h3 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h3><p>CGRectInset：对矩形进行平移和缩放两个操作</p><p>CGRectOffset：只对矩形进行平移，不会改变其大小</p><h3 id="计算过程-伪代码"><a href="#计算过程-伪代码" class="headerlink" title="计算过程(伪代码)"></a>计算过程(伪代码)</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">CGRectInset</span>：</div><div class="line"><span class="built_in">CGRect</span> rect = <span class="built_in">CGRectMake</span>(x, y, width, height);</div><div class="line"><span class="built_in">CGRect</span> rectInset = <span class="built_in">CGRectInset</span>(rect, dx, dy);</div><div class="line">rectInset = <span class="built_in">CGRectMake</span>(dx, dy, (width - ( dx * <span class="number">2</span>)), (height - ( dy * <span class="number">2</span>)) );</div><div class="line"></div><div class="line"><span class="built_in">CGRectOffset</span>: </div><div class="line"><span class="built_in">CGRect</span> rect = <span class="built_in">CGRectMake</span>(x, y, width, height);</div><div class="line"><span class="built_in">CGRect</span> rectOffset = <span class="built_in">CGRectOffset</span>(rect, dx, dy);</div><div class="line">rectOffset = <span class="built_in">CGRectMake</span>((x + dx), (y + dy), width, height );</div></pre></td></tr></table></figure><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>CGRectInset：<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">CGRect</span> rect = <span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">30</span>, <span class="number">30</span>);</div><div class="line"><span class="built_in">CGRect</span> rectInset = <span class="built_in">CGRectInset</span>(rect, <span class="number">10</span>, <span class="number">10</span>);</div><div class="line"><span class="built_in">CGRect</span> bigRectInset = <span class="built_in">CGRectInset</span>(rect, <span class="number">-10</span>, <span class="number">-10</span>);</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"rectInset:%@ \n bigRectInset:%@"</span>, <span class="built_in">NSStringFromCGRect</span>(rectInset), <span class="built_in">NSStringFromCGRect</span>(bigRectInset));</div><div class="line"></div><div class="line"><span class="comment">// rectInset:&#123;&#123;10, 10&#125;, &#123;10, 10&#125;&#125;</span></div><div class="line"><span class="comment">// bigRectInset:&#123;&#123;-10, -10&#125;, &#123;50, 50&#125;&#125;</span></div></pre></td></tr></table></figure></p><p>CGRectOffset:<br> <figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">CGRect</span> rect = <span class="built_in">CGRectMake</span>(<span class="number">10</span>, <span class="number">10</span>, <span class="number">30</span>, <span class="number">30</span>);</div><div class="line"><span class="built_in">CGRect</span> rectOffset = <span class="built_in">CGRectOffset</span>(rect, <span class="number">10</span>, <span class="number">10</span>);</div><div class="line"><span class="built_in">CGRect</span> leftRectOffset = <span class="built_in">CGRectOffset</span>(rect, <span class="number">-10</span>, <span class="number">-10</span>);</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"rectOffset:%@ \n leftRectOffset:%@"</span>, <span class="built_in">NSStringFromCGRect</span>(rectOffset), <span class="built_in">NSStringFromCGRect</span>(leftRectOffset));</div><div class="line"></div><div class="line"><span class="comment">// rectOffset:&#123;&#123;20, 20&#125;, &#123;30, 30&#125;&#125;</span></div><div class="line"><span class="comment">// leftRectOffset:&#123;&#123;0, 0&#125;, &#123;30, 30&#125;&#125;</span></div></pre></td></tr></table></figure></p><h2 id="CGRectDivide"><a href="#CGRectDivide" class="headerlink" title="CGRectDivide"></a>CGRectDivide</h2><p>用来分割矩形，参数rect是源矩形，slice和remainder是分割后的两部分矩形，amount是分割线，edge是分割选项。</p><h3 id="edge分割方式"><a href="#edge分割方式" class="headerlink" title="edge分割方式"></a>edge分割方式</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="built_in">CF_ENUM</span>(uint32_t, <span class="built_in">CGRectEdge</span>) &#123;</div><div class="line">  <span class="comment">//从x的最小处进行垂直分割</span></div><div class="line">  <span class="built_in">CGRectMinXEdge</span>, </div><div class="line">  <span class="comment">//从y的最小处进行水平分割</span></div><div class="line">  <span class="built_in">CGRectMinYEdge</span>, </div><div class="line">  <span class="comment">//从x最大处进行垂直分割</span></div><div class="line">  <span class="built_in">CGRectMaxXEdge</span>,</div><div class="line">  <span class="comment">//从y最大处进行水平分割</span></div><div class="line">  <span class="built_in">CGRectMaxYEdge</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure><h3 id="计算过程-伪代码-1"><a href="#计算过程-伪代码-1" class="headerlink" title="计算过程(伪代码)"></a>计算过程(伪代码)</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">CGRect</span> rect = <span class="built_in">CGRectMake</span>(x, y, width, height);</div><div class="line"><span class="built_in">CGRectDivide</span>(rect, &amp;slice,</div><div class="line">             &amp;remainder, amount, edge);</div><div class="line"><span class="keyword">switch</span> (edge) &#123;</div><div class="line">    <span class="keyword">case</span> <span class="built_in">CGRectMinXEdge</span>: &#123;</div><div class="line">        *slice = <span class="built_in">CGRectMake</span>(x, y, amount, height);</div><div class="line">        *remainder = <span class="built_in">CGRectMake</span>(x + amount, y, width - amount, height);</div><div class="line">    &#125;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> <span class="built_in">CGRectMaxXEdge</span>: &#123;</div><div class="line">        *slice = <span class="built_in">CGRectMake</span>(width - amount, y, amount, height);</div><div class="line">        *remainder = <span class="built_in">CGRectMake</span>(x, y, width - amount, height);</div><div class="line">    &#125;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> <span class="built_in">CGRectMinYEdge</span>: &#123;</div><div class="line">        *slice = <span class="built_in">CGRectMake</span>(x, y, width, amount);</div><div class="line">        *remainder = <span class="built_in">CGRectMake</span>(x, y + amount, width, height - amount);</div><div class="line">    &#125;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> <span class="built_in">CGRectMaxYEdge</span>: &#123;</div><div class="line">        *slice = <span class="built_in">CGRectMake</span>(width, y - amount, width, amount);</div><div class="line">        *remainder = <span class="built_in">CGRectMake</span>(x, y, width, height - amount);</div><div class="line">    &#125;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">CGRect</span> slice;</div><div class="line"><span class="built_in">CGRect</span> remainder;</div><div class="line"><span class="built_in">CGRect</span> rect = <span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">200</span>, <span class="number">200</span>);</div><div class="line"><span class="built_in">CGRectDivide</span>(rect, &amp;slice, &amp;remainder, <span class="number">50</span>, <span class="built_in">CGRectMinXEdge</span>);</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"slice:%@ \n remainder:%@"</span>, <span class="built_in">NSStringFromCGRect</span>(slice), <span class="built_in">NSStringFromCGRect</span>(remainder));</div><div class="line"></div><div class="line"><span class="comment">// CGRectMinXEdge</span></div><div class="line"><span class="comment">// slice:&#123;&#123;0, 0&#125;, &#123;50, 200&#125;&#125;</span></div><div class="line"><span class="comment">// remainder:&#123;&#123;50, 0&#125;, &#123;150, 200&#125;&#125;</span></div><div class="line"></div><div class="line"><span class="comment">// CGRectMaxXEdge</span></div><div class="line"><span class="comment">// slice:&#123;&#123;150, 0&#125;, &#123;50, 200&#125;&#125;</span></div><div class="line"><span class="comment">// remainder:&#123;&#123;0, 0&#125;, &#123;150, 200&#125;&#125;</span></div><div class="line"></div><div class="line"><span class="comment">// CGRectMinYEdge</span></div><div class="line"><span class="comment">// slice:&#123;&#123;0, 0&#125;, &#123;200, 50&#125;&#125;</span></div><div class="line"><span class="comment">// remainder:&#123;&#123;0, 50&#125;, &#123;200, 150&#125;&#125;</span></div><div class="line"></div><div class="line"><span class="comment">// CGRectMaxYEdge</span></div><div class="line"><span class="comment">// slice:&#123;&#123;0, 150&#125;, &#123;200, 50&#125;&#125;</span></div><div class="line"><span class="comment">// remainder:&#123;&#123;0, 0&#125;, &#123;200, 150&#125;&#125;</span></div></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在没有对CGGeometry进行深入的了解时，只会用到平时常用的几个方法，可是深入了解后还是会发现有很多实用而自己却一直不知道的方法。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;CGGeometry是用C语言实现的一个封装了许多常用几何方法的文件&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://wynter.wang/categories/iOS/"/>
    
    
      <category term="API" scheme="https://wynter.wang/tags/API/"/>
    
      <category term="iOS" scheme="https://wynter.wang/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS 拉伸图片</title>
    <link href="https://wynter.wang/2017/09/20/iOS%20%E6%8B%89%E4%BC%B8%E5%9B%BE%E7%89%87/"/>
    <id>https://wynter.wang/2017/09/20/iOS 拉伸图片/</id>
    <published>2017-09-20T10:13:16.000Z</published>
    <updated>2017-11-01T07:42:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>在开发过程中总会遇到背景图片和控件大小一致的困扰，通常就是两种方法：<br>1、找美工切大小合适的图片<br>2、通过使用代码处理或可视化设置图片拉伸</p><a id="more"></a><h2 id="如何使用Slicing"><a href="#如何使用Slicing" class="headerlink" title="如何使用Slicing"></a>如何使用Slicing</h2><p>Slicing功能要在.xcassets结尾的图片资源管理器中才可以使用</p><p>1、通过以下Show Slicing按钮和右边栏Slicing属性打开效果相同，点击后可以看到有三种图片拉伸方式：水平、垂直、水平垂直方向；</p><p>Slicing 中有个Center属性用来指定图片的拉伸方式(Stretches、Tile)和可拉伸矩形范围</p><p><img src="http://upload-images.jianshu.io/upload_images/937490-748714a21bcecd9c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="第一步把冰箱门打开.png"></p><p>2、根据需要选择图片拉伸方式，这里选择十字图标或右侧选择 Horizontal And Vertical来演示效果，如下图蓝色区域为可拉伸区域 <code>CGSizeMake(5, 5)</code>，绿色区域为不可拉伸区域 <code>UIEdgeInsetsMake(8, 8, 8, 8)</code>，可以通过过拖拉虚线来改变它们的作用区域或右侧属性来修改</p><p><img src="http://upload-images.jianshu.io/upload_images/937490-4d68fd21dd695344.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="第二步大象装进冰箱.png"></p><p>水平拉伸方式更直观：<br><img src="http://upload-images.jianshu.io/upload_images/937490-1d84ae9ed856d8b7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="拿一个水桶.png"></p><p>3、拉伸前图片大小52*52，通过设置后的效果<br><img src="http://upload-images.jianshu.io/upload_images/937490-cf0cfeac1f06b268.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="第三步把大象拉出来溜溜.png"></p><h2 id="在可视化编程中设置UIImageView的Stretching为-0-5-0-5-0-0-来处理拉伸"><a href="#在可视化编程中设置UIImageView的Stretching为-0-5-0-5-0-0-来处理拉伸" class="headerlink" title="在可视化编程中设置UIImageView的Stretching为(0.5, 0.5, 0, 0)来处理拉伸"></a>在可视化编程中设置UIImageView的Stretching为(0.5, 0.5, 0, 0)来处理拉伸</h2><p><img src="http://upload-images.jianshu.io/upload_images/937490-3735334a98177484.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="stretching.png"></p><h2 id="通过使用UIImage方法处理图片拉伸"><a href="#通过使用UIImage方法处理图片拉伸" class="headerlink" title="通过使用UIImage方法处理图片拉伸"></a>通过使用UIImage方法处理图片拉伸</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">UIImage</span> *)resizableImageWithCapInsets:(<span class="built_in">UIEdgeInsets</span>)capInsets;</div><div class="line">- (<span class="built_in">UIImage</span> *)resizableImageWithCapInsets:(<span class="built_in">UIEdgeInsets</span>)capInsets resizingMode:(<span class="built_in">UIImageResizingMode</span>)resizingMode;</div></pre></td></tr></table></figure><p>参数<br>capInsets：用来设置图片的顶、左、底、右的端盖高度<br>resizingMode：指定图片的拉伸方式</p><blockquote><p>UIImageResizingModeStretch：延伸模式，通过拉伸UIEdgeInsets指定的矩形区域来填充图片图片<br>UIImageResizingModeTile：平铺模式，通过复制显示UIEdgeInsets指定的矩形区域来填充图片</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Stretching属性设置拉伸只对UIImageView有效，按钮图片拉伸需要使用其他两种方式处理；<br>UIImage中方法处理图片拉伸，适用于代码设置；<br>Slicing功能最为方便有效，推荐使用；</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在开发过程中总会遇到背景图片和控件大小一致的困扰，通常就是两种方法：&lt;br&gt;1、找美工切大小合适的图片&lt;br&gt;2、通过使用代码处理或可视化设置图片拉伸&lt;/p&gt;
    
    </summary>
    
      <category term="blog" scheme="https://wynter.wang/categories/blog/"/>
    
    
      <category term="iOS" scheme="https://wynter.wang/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>由UITableView缓存机制引起的崩溃问题</title>
    <link href="https://wynter.wang/2017/09/17/%E7%94%B1UITableView%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6%E5%BC%95%E8%B5%B7%E7%9A%84%E5%B4%A9%E6%BA%83%E9%97%AE%E9%A2%98/"/>
    <id>https://wynter.wang/2017/09/17/由UITableView缓存机制引起的崩溃问题/</id>
    <published>2017-09-17T10:13:16.000Z</published>
    <updated>2017-11-01T07:43:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近一直没有更新文章，没有别的理由就是自己懒，回头想想这几天忙着撕逼几天下来扣字过万，怎么会没有写一篇总结文章的功夫呢？</p><p>这里说说我在开发中遇到的2个由于缓存机制引起的崩溃问题：<br>一、在二级页面发送通知更新一级页面数据列表并执行返回一级页面时引起崩溃；<br>二、使用UISearchController搜索，全部数据和搜索结果公用一个UITableView，在开始搜索的时候引起崩溃。</p><a id="more"></a><h2 id="问题一："><a href="#问题一：" class="headerlink" title="问题一："></a>问题一：</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[[<span class="built_in">NSNotificationCenter</span> defaultCenter]postNotificationName:FINISHARRIVALEQUIP object:<span class="literal">nil</span>];</div><div class="line">[<span class="keyword">self</span>.navigationController popViewControllerAnimated:<span class="literal">YES</span>];</div></pre></td></tr></table></figure><p>起初猜测是发送通知又多个页面刷新，数据导致主线程堵塞引起崩溃呢，运行代码后，直接发现是数组越界引起崩溃，因为在发送通知后，直接请求数据会先清空数据源，网络请求还没有返回数据，此时刚好执行pop返回到当前页面，UITableView会直接从缓存中拿去数据，但是数据源为空。</p><p>解决方法：<br>1、在返回会网络请求返回数据的时候再清空数据源重新赋值<br>2、清空数据源后，先执行 [self.tableView reloadData]刷新列表，再执行网络请求</p><h2 id="问题二"><a href="#问题二" class="headerlink" title="问题二"></a>问题二</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">UITableViewCell</span> *)tableView:(<span class="built_in">UITableView</span> *)tableView cellForRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath &#123;</div><div class="line">   DataSourceItem *item;</div><div class="line">    <span class="keyword">if</span> (!_searchController.active) &#123;</div><div class="line">        item = _dataArray[indexPath.row];</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        item = _searchArray[indexPath.row];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">static</span> <span class="built_in">NSString</span> *cellIdentifier = <span class="string">@"cell"</span>;</div><div class="line">    <span class="built_in">UITableViewCell</span> *cell = [tableView dequeueReusableCellWithIdentifier:cellIdentifier];</div><div class="line">    <span class="keyword">return</span> cell; </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>点击搜索的时候数据源切换为_searchArray，但是tableView依然按照_dataArray缓存拿去数据，从而导致崩溃。</p><p>解决方法：<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)updateSearchResultsForSearchController:(<span class="built_in">UISearchController</span> *)searchController &#123;</div><div class="line">    [<span class="keyword">self</span>.tableView reloadData];</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="数组越界问题"><a href="#数组越界问题" class="headerlink" title="数组越界问题"></a>数组越界问题</h2><p>上面两种问题最终都是由于数组越界引起的崩溃，可以使用一下方法判断是否越界：<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (indexPath.row &lt; _dataArray.count) &#123;</div><div class="line">       item = [_dataArray objectAtIndex:indexPath.row];</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p><p>不是每次都能记得加数组越界判断，我们可以使用数组的分类，在其中内部判断：<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NSArray</span> (<span class="title">Util</span>)</span></div><div class="line"> </div><div class="line"><span class="comment">/*!</span></div><div class="line"><span class="comment"> @method objectAtIndexCheck:</span></div><div class="line"><span class="comment"> @abstract 检查是否越界和NSNull如果是返回nil</span></div><div class="line"><span class="comment"> @result 返回对象</span></div><div class="line"><span class="comment"> */</span></div><div class="line">- (<span class="keyword">id</span>)objectAtIndexCheck:(<span class="built_in">NSUInteger</span>)index;</div><div class="line"> </div><div class="line"><span class="keyword">@end</span></div><div class="line"> </div><div class="line"><span class="meta">#import <span class="meta-string">"NSArray+Util.h"</span></span></div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">NSArray</span> (<span class="title">Util</span>)</span></div><div class="line"> </div><div class="line">- (<span class="keyword">id</span>)objectAtIndexCheck:(<span class="built_in">NSUInteger</span>)index</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (index &gt;= [<span class="keyword">self</span> count]) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">nil</span>;</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">    <span class="keyword">id</span> value = [<span class="keyword">self</span> objectAtIndex:index];</div><div class="line">    <span class="keyword">if</span> (value == [<span class="built_in">NSNull</span> null]) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">nil</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> value;</div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>引起的崩溃两种情况都是数据源改变，UITableView并不知道数据源改变，还在缓存中通过IndexPath.row拿取对应数组中数据， 但此时数据源已改变，就可能会因为数组越界Carsh，以上两种情况都可以通过在改变数据源后及时刷新UITableView来解决。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近一直没有更新文章，没有别的理由就是自己懒，回头想想这几天忙着撕逼几天下来扣字过万，怎么会没有写一篇总结文章的功夫呢？&lt;/p&gt;
&lt;p&gt;这里说说我在开发中遇到的2个由于缓存机制引起的崩溃问题：&lt;br&gt;一、在二级页面发送通知更新一级页面数据列表并执行返回一级页面时引起崩溃；&lt;br&gt;二、使用UISearchController搜索，全部数据和搜索结果公用一个UITableView，在开始搜索的时候引起崩溃。&lt;/p&gt;
    
    </summary>
    
      <category term="blog" scheme="https://wynter.wang/categories/blog/"/>
    
    
      <category term="iOS" scheme="https://wynter.wang/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>UISaerchBar偏移问题</title>
    <link href="https://wynter.wang/2017/07/12/UISaerchBar%E5%81%8F%E7%A7%BB%E9%97%AE%E9%A2%98/"/>
    <id>https://wynter.wang/2017/07/12/UISaerchBar偏移问题/</id>
    <published>2017-07-12T11:13:16.000Z</published>
    <updated>2017-11-01T07:45:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>相信很多朋友都在使用<code>UISearchController</code>总会遇到一些莫名其妙的问题，当然我也遇到了，下面就记录下使用<code>UISearchController</code>中遇到问题部分问题。</p><a id="more"></a><p>初始代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">UITableViewController *searchResultsController = [[UITableViewController alloc]init];</div><div class="line">searchResultsController.tableView.delegate = self;</div><div class="line">searchResultsController.tableView.dataSource = self;</div><div class="line">searchResultsController.tableView.estimatedRowHeight = 80;</div><div class="line">searchResultsController.tableView.rowHeight = UITableViewAutomaticDimension;</div><div class="line">self.searchController = [[UISearchController alloc] initWithSearchResultsController:searchResultsController];</div><div class="line">self.searchController.view.backgroundColor = [[UIColor whiteColor] colorWithAlphaComponent:0.95];</div><div class="line">self.searchController.searchResultsUpdater = self;</div><div class="line"></div><div class="line">UISearchBar *bar = self.searchController.searchBar;</div><div class="line">bar.barTintColor = [UIColor colorWithRed:239.0/255.0 green:239.0/255.0 blue:244.0/255.0 alpha:1.0];</div><div class="line">bar.tintColor = [UIColor blackColor];</div><div class="line">bar.showsBookmarkButton = YES;</div><div class="line">bar.translucent = YES;</div><div class="line"></div><div class="line">UIImageView *view = [[[bar.subviews objectAtIndex:0] subviews] firstObject];</div><div class="line">view.layer.borderColor = [UIColor colorWithRed:239.0/255.0 green:239.0/255.0 blue:244.0/255.0 alpha:1.0].CGColor;</div><div class="line">view.layer.borderWidth = 1;</div><div class="line"></div><div class="line">self.tableView.tableHeaderView = bar;</div></pre></td></tr></table></figure></p><h3 id="问题1：点击搜索框时searchResultsController和searchBar间隔44pt，并且点击跳转无响应，如下图："><a href="#问题1：点击搜索框时searchResultsController和searchBar间隔44pt，并且点击跳转无响应，如下图：" class="headerlink" title="问题1：点击搜索框时searchResultsController和searchBar间隔44pt，并且点击跳转无响应，如下图："></a>问题1：点击搜索框时searchResultsController和searchBar间隔44pt，并且点击跳转无响应，如下图：</h3><p><img src="http://upload-images.jianshu.io/upload_images/937490-9a01655d2ac2e824.gif?imageMogr2/auto-orient/strip" alt="问题1.gif"></p><p>解决办法，添加代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">self.definesPresentationContext = YES;</div></pre></td></tr></table></figure></p><p>效果如下：<br><img src="http://upload-images.jianshu.io/upload_images/937490-20109807de97bcef.gif?imageMogr2/auto-orient/strip" alt="问题1解决方法.gif"></p><h3 id="问题2：在设置导航栏为不透明时，点击搜索时searchBar偏移出屏幕"><a href="#问题2：在设置导航栏为不透明时，点击搜索时searchBar偏移出屏幕" class="headerlink" title="问题2：在设置导航栏为不透明时，点击搜索时searchBar偏移出屏幕"></a>问题2：在设置导航栏为不透明时，点击搜索时searchBar偏移出屏幕</h3><p>解决办法同上</p><h3 id="问题3：在设置导航栏为不透明时，点击搜索框出现如下情况："><a href="#问题3：在设置导航栏为不透明时，点击搜索框出现如下情况：" class="headerlink" title="问题3：在设置导航栏为不透明时，点击搜索框出现如下情况："></a>问题3：在设置导航栏为不透明时，点击搜索框出现如下情况：</h3><p><img src="http://upload-images.jianshu.io/upload_images/937490-799753f433a621eb.gif?imageMogr2/auto-orient/strip" alt="问题3.gif"></p><p>解决办法，添加代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">self.extendedLayoutIncludesOpaqueBars = YES;</div></pre></td></tr></table></figure></p><p>效果如下：<br><img src="http://upload-images.jianshu.io/upload_images/937490-d6a8c588ffdf91e7.gif?imageMogr2/auto-orient/strip" alt="问题3解决办法.gif"></p><h3 id="属性介绍："><a href="#属性介绍：" class="headerlink" title="属性介绍："></a>属性介绍：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">// 导航栏是否为半透明</div><div class="line">self.navigationController.navigationBar.translucent = YES;</div><div class="line">// 如果在当前控制器中该属性为YES时，则将设置新的视图控制器。如果当前控制器中该属性为NO，则控制器为跟视图控制</div><div class="line">self.definesPresentationContext = NO;</div><div class="line">// 是否隐藏navigationBar</div><div class="line">self.searchController.hidesNavigationBarDuringPresentation = YES;</div><div class="line">// 延伸视图包是否含不透明的bar</div><div class="line">self.extendedLayoutIncludesOpaqueBars = NO;</div></pre></td></tr></table></figure><h3 id="引起问题的原因："><a href="#引起问题的原因：" class="headerlink" title="引起问题的原因："></a>引起问题的原因：</h3><ul><li>出现searchResultsController和searchBar间隔44pt的原因就在于，UISearchController有个<code>hidesNavigationBarDuringPresentation</code>属性，其默认值为YES，就是在点击searchBar时进行搜索时会将导航栏隐藏，并将searchBar移动到navigationBar的位置处，而tableView并不知道searchBar已经移动到navigationBar的位置所以就多出了44pt；</li><li>在searchResultsController中点击cell无法跳转是因为searchResultsController并不是主视图，而在设置<code>self.definesPresentationContext = YES</code>后，系统会将searchResultsController设置为新的主视图；</li><li>在设置导航栏为不透明时（<code>self.navigationController.navigationBar.translucent = NO</code>），点击搜索时searchBar偏移出屏幕，导航栏不透明时，self.view的原点是从导航栏的底部，那么相对self.view而言navigationBar的x=-64，所以搜searchBar弹出时获取<code>self.navigationController.navigationBar.x = searchBar.x;</code>,此navigationBar已经隐藏，searchBar.x = -64这个时候就会偏移出屏幕。</li><li>那么到searchBar向下偏移64pt原理同上。</li></ul><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>可能有些地方解释的不到位，欢迎大家指正。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;相信很多朋友都在使用&lt;code&gt;UISearchController&lt;/code&gt;总会遇到一些莫名其妙的问题，当然我也遇到了，下面就记录下使用&lt;code&gt;UISearchController&lt;/code&gt;中遇到问题部分问题。&lt;/p&gt;
    
    </summary>
    
      <category term="blog" scheme="https://wynter.wang/categories/blog/"/>
    
    
      <category term="iOS" scheme="https://wynter.wang/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>StoryBoard使用之页面传值</title>
    <link href="https://wynter.wang/2017/05/21/StoryBoard%E4%BD%BF%E7%94%A8%E4%B9%8B%E9%A1%B5%E9%9D%A2%E4%BC%A0%E5%80%BC/"/>
    <id>https://wynter.wang/2017/05/21/StoryBoard使用之页面传值/</id>
    <published>2017-05-21T12:13:16.000Z</published>
    <updated>2017-11-01T07:48:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近接手一个半成品的项目，由于前期另一位iOS开发的同事使用的StoryBoard(简称SB)搭建的框架，接手后就继续使用SB开发。之前项目一直使用纯代码和xib来做UI，对于SB用起来还觉得挺麻烦，虽然可视化界使层次结构更加清晰，但是对于一个UI简单和大量页面复用的项目，使用SB反而降低了效率。刚好这个项目就是UI简单和大量页面复用，SB对这个项目来说只是展示结构的作用，由于很多复用界面导致SB看起来像蜘蛛网一样混乱，完全掩盖了SB的设计初衷吧，并且SB上大部分ViewController只是展示作用并没有发挥提高界面绘制的优势，反而在创建页面、跳转页面的时候降低开发效率。既然项目利用到了，下面就说说使用segue跳转界面传值的几种方法。</p><a id="more"></a><h2 id="方法一：-设置一个局部变量保存要传数据"><a href="#方法一：-设置一个局部变量保存要传数据" class="headerlink" title="方法一： 设置一个局部变量保存要传数据"></a>方法一： 设置一个局部变量保存要传数据</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath &#123;</div><div class="line">    [tableView deselectRowAtIndexPath:indexPath animated:YES];</div><div class="line">    ProjectItem *item = dataAry[indexPath.row];</div><div class="line">    projectId = item.projectId;</div><div class="line">    [self performSegueWithIdentifier:@&quot;detailSegue&quot; sender:self];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender &#123;</div><div class="line">    if ([segue.destinationViewController isKindOfClass:[ViewController class]]) &#123;</div><div class="line">        ViewController *controller = segue.destinationViewController;</div><div class="line">        controller.projectId = projectId;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="方法二：-在prepareForSegue-sender-使用indexPathForSelectedRow获取目标控页面所需参数"><a href="#方法二：-在prepareForSegue-sender-使用indexPathForSelectedRow获取目标控页面所需参数" class="headerlink" title="方法二： 在prepareForSegue:sender:使用indexPathForSelectedRow获取目标控页面所需参数"></a>方法二： 在<code>prepareForSegue:sender:</code>使用<code>indexPathForSelectedRow</code>获取目标控页面所需参数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath &#123;</div><div class="line">    [self performSegueWithIdentifier:@&quot;detailSegue&quot; sender:self];</div><div class="line">    [tableView deselectRowAtIndexPath:indexPath animated:YES];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender &#123;</div><div class="line">    if ([segue.destinationViewController isKindOfClass:[ViewController class]]) &#123;</div><div class="line">        NSIndexPath *indexPath = [self.tableView indexPathForSelectedRow];</div><div class="line">        ProjectItem *item = dataAry[indexPath.row];</div><div class="line">        ViewController *controller = segue.destinationViewController;</div><div class="line">        controller.projectId = item.projectId;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="方法三：-使用performSegueWithIdentifier-sender-方法的sender传递目标页面所需数据"><a href="#方法三：-使用performSegueWithIdentifier-sender-方法的sender传递目标页面所需数据" class="headerlink" title="方法三： 使用performSegueWithIdentifier:sender:方法的sender传递目标页面所需数据"></a>方法三： 使用<code>performSegueWithIdentifier:sender:</code>方法的sender传递目标页面所需数据</h2><p>推荐使用此方法，其他UI控件事件也同样适用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath &#123; </div><div class="line">    [self performSegueWithIdentifier:@&quot;detailSegue&quot; sender:indexPath];</div><div class="line">    [tableView deselectRowAtIndexPath:indexPath animated:YES];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender &#123;</div><div class="line">    if ([segue.destinationViewController isKindOfClass:[ViewController class]]) &#123;</div><div class="line">        NSIndexPath *indexPath = (NSIndexPath *)sender;</div><div class="line">        ProjectItem *item = dataAry[indexPath.row];</div><div class="line">        ViewController *controller = segue.destinationViewController;</div><div class="line">        controller.projectId = item.projectId;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>不推荐使用此方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath &#123;</div><div class="line">    [tableView deselectRowAtIndexPath:indexPath animated:YES];</div><div class="line">    ProjectItem *item = dataAry[indexPath.row];</div><div class="line">    [self performSegueWithIdentifier:@&quot;detailSegue&quot; sender:item.projectId];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender &#123;</div><div class="line">    if ([segue.destinationViewController isKindOfClass:[ViewController class]]) &#123;</div><div class="line">        ViewController *controller = segue.destinationViewController;</div><div class="line">        controller.projectId = sender;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>方法一使用起来比较麻烦，需要额外的创建一个成员变量来存值，但是可以应用到任何具有点击事件的方法中；</li><li>方法二局限于<code>UITableView</code>，若同时使用<code>deselectRowAtIndexPath:indexPath animated:</code>也将会使使用此方法后<code>indexPathForSelectedRow</code>方法无法获取indexPath；</li><li>方法三中<code>sender</code>就是发送器的意思，也就是用于接收存储发送器。<code>id</code>类型是不确定类型，虽然可以用于传各种参数，但是根据<code>sender</code>的意思最好设置为发送器。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近接手一个半成品的项目，由于前期另一位iOS开发的同事使用的StoryBoard(简称SB)搭建的框架，接手后就继续使用SB开发。之前项目一直使用纯代码和xib来做UI，对于SB用起来还觉得挺麻烦，虽然可视化界使层次结构更加清晰，但是对于一个UI简单和大量页面复用的项目，使用SB反而降低了效率。刚好这个项目就是UI简单和大量页面复用，SB对这个项目来说只是展示结构的作用，由于很多复用界面导致SB看起来像蜘蛛网一样混乱，完全掩盖了SB的设计初衷吧，并且SB上大部分ViewController只是展示作用并没有发挥提高界面绘制的优势，反而在创建页面、跳转页面的时候降低开发效率。既然项目利用到了，下面就说说使用segue跳转界面传值的几种方法。&lt;/p&gt;
    
    </summary>
    
      <category term="blog" scheme="https://wynter.wang/categories/blog/"/>
    
    
      <category term="iOS" scheme="https://wynter.wang/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS-UIKit框架学习—UITextView</title>
    <link href="https://wynter.wang/2017/05/12/iOS-UIKit%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E2%80%94UITextView/"/>
    <id>https://wynter.wang/2017/05/12/iOS-UIKit框架学习—UITextView/</id>
    <published>2017-05-12T12:26:34.000Z</published>
    <updated>2017-05-12T12:29:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>UITextView的类实现一个滚动的，多行文本区域的行为。类支持使用自定义字体，颜色，和对齐的文本的显示，同时还支持文本编辑。通常可以使用一个文本视图，显示多行文本。<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line">@protocol UITextViewDelegate &lt;NSObject, UIScrollViewDelegate&gt;</div><div class="line"></div><div class="line">@optional</div><div class="line"></div><div class="line">// 是否开始编辑</div><div class="line">- (BOOL)textViewShouldBeginEditing:(UITextView *)textView;</div><div class="line">// 是否完成编辑</div><div class="line">- (BOOL)textViewShouldEndEditing:(UITextView *)textView;</div><div class="line">// 开始编辑</div><div class="line">- (void)textViewDidBeginEditing:(UITextView *)textView;</div><div class="line">// 完成编辑</div><div class="line">- (void)textViewDidEndEditing:(UITextView *)textView;</div><div class="line">// 文本发生改变，是否替换成指定的文本</div><div class="line">- (BOOL)textView:(UITextView *)textView shouldChangeTextInRange:(NSRange)range replacementText:(NSString *)text;</div><div class="line">// 文本内容发生改变</div><div class="line">- (void)textViewDidChange:(UITextView *)textView;</div><div class="line">// 更改选中的文本</div><div class="line">- (void)textViewDidChangeSelection:(UITextView *)textView;</div><div class="line">// 是否允许指定的用户使用指定范围的URL进行交互</div><div class="line">- (BOOL)textView:(UITextView *)textView shouldInteractWithURL:(NSURL *)URL inRange:(NSRange)characterRange interaction:(UITextItemInteraction)interaction NS_AVAILABLE_IOS(10_0);</div><div class="line">// 是否允许指定文本附件与文本进行交互</div><div class="line">- (BOOL)textView:(UITextView *)textView shouldInteractWithTextAttachment:(NSTextAttachment *)textAttachment inRange:(NSRange)characterRange interaction:(UITextItemInteraction)interaction NS_AVAILABLE_IOS(10_0);</div><div class="line">- (BOOL)textView:(UITextView *)textView shouldInteractWithURL:(NSURL *)URL inRange:(NSRange)characterRange NS_DEPRECATED_IOS(7_0, 10_0, &quot;Use textView:shouldInteractWithURL:inRange:forInteractionType: instead&quot;);</div><div class="line">- (BOOL)textView:(UITextView *)textView shouldInteractWithTextAttachment:(NSTextAttachment *)textAttachment inRange:(NSRange)characterRange NS_DEPRECATED_IOS(7_0, 10_0, &quot;Use textView:shouldInteractWithTextAttachment:inRange:forInteractionType: instead&quot;);</div><div class="line"></div><div class="line">@end</div><div class="line"></div><div class="line">NS_CLASS_AVAILABLE_IOS(2_0) @interface UITextView : UIScrollView &lt;UITextInput, UIContentSizeCategoryAdjusting&gt;</div><div class="line">// 代理</div><div class="line">@property(nullable,nonatomic,weak) id&lt;UITextViewDelegate&gt; delegate;</div><div class="line">// 文本内容</div><div class="line">@property(null_resettable,nonatomic,copy) NSString *text;</div><div class="line">// 字体</div><div class="line">@property(nullable,nonatomic,strong) UIFont *font;</div><div class="line">// 字体颜色</div><div class="line">@property(nullable,nonatomic,strong) UIColor *textColor;</div><div class="line">// 对齐方式</div><div class="line">@property(nonatomic) NSTextAlignment textAlignment;</div><div class="line">// 选择的范围</div><div class="line">@property(nonatomic) NSRange selectedRange;</div><div class="line">// 是否可编辑</div><div class="line">@property(nonatomic,getter=isEditable) BOOL editable __TVOS_PROHIBITED;</div><div class="line">// 是否可选</div><div class="line">@property(nonatomic,getter=isSelectable) BOOL selectable NS_AVAILABLE_IOS(7_0);</div><div class="line">// 自动检测文本类型，如电话号码、邮箱、网址等</div><div class="line">@property(nonatomic) UIDataDetectorTypes dataDetectorTypes NS_AVAILABLE_IOS(3_0) __TVOS_PROHIBITED;</div><div class="line">// 是否允许设置文本属性 默认为NO</div><div class="line">@property(nonatomic) BOOL allowsEditingTextAttributes NS_AVAILABLE_IOS(6_0);</div><div class="line">// 文本属性</div><div class="line">@property(null_resettable,copy) NSAttributedString *attributedText NS_AVAILABLE_IOS(6_0);</div><div class="line">// 属性字典</div><div class="line">@property(nonatomic,copy) NSDictionary&lt;NSString *, id&gt; *typingAttributes NS_AVAILABLE_IOS(6_0);</div><div class="line">// 设置指定可见的的滚动范围</div><div class="line">- (void)scrollRangeToVisible:(NSRange)range;</div><div class="line">// 自定义输入框</div><div class="line">@property (nullable, readwrite, strong) UIView *inputView;</div><div class="line">// 输入框的辅助视图</div><div class="line">@property (nullable, readwrite, strong) UIView *inputAccessoryView;</div><div class="line">// 再次编辑是否清楚文本 默认为NO</div><div class="line">@property(nonatomic) BOOL clearsOnInsertion NS_AVAILABLE_IOS(6_0);</div><div class="line"></div><div class="line">// 创建文本视图</div><div class="line">- (instancetype)initWithFrame:(CGRect)frame textContainer:(nullable NSTextContainer *)textContainer NS_AVAILABLE_IOS(7_0) NS_DESIGNATED_INITIALIZER;</div><div class="line">- (nullable instancetype)initWithCoder:(NSCoder *)aDecoder NS_DESIGNATED_INITIALIZER;</div><div class="line"></div><div class="line">// 获取文本视图的文本容器</div><div class="line">@property(nonatomic,readonly) NSTextContainer *textContainer NS_AVAILABLE_IOS(7_0);</div><div class="line">// 设置文本容器内间距</div><div class="line">@property(nonatomic, assign) UIEdgeInsets textContainerInset NS_AVAILABLE_IOS(7_0);</div><div class="line">// 获取布局管理器</div><div class="line">@property(nonatomic,readonly) NSLayoutManager *layoutManager NS_AVAILABLE_IOS(7_0);</div><div class="line">// 获取文本存储对象中的文本</div><div class="line">@property(nonatomic,readonly,strong) NSTextStorage *textStorage NS_AVAILABLE_IOS(7_0);</div><div class="line"></div><div class="line">// link的样式属性</div><div class="line">@property(null_resettable, nonatomic, copy) NSDictionary&lt;NSString *, id&gt; *linkTextAttributes NS_AVAILABLE_IOS(7_0);</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">/ 开始编辑时发送通知</div><div class="line">UIKIT_EXTERN NSNotificationName const UITextViewTextDidBeginEditingNotification;</div><div class="line">// 文本发生变化发送通知</div><div class="line">UIKIT_EXTERN NSNotificationName const UITextViewTextDidChangeNotification;</div><div class="line">// 编辑完成发送通知</div><div class="line">UIKIT_EXTERN NSNotificationName const UITextViewTextDidEndEditingNotification;</div></pre></td></tr></table></figure><p>e.g.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">UITextView *textView = [[UITextView alloc]initWithFrame:CGRectMake(0, 0, SCREEN_WIDTH, 100)];</div><div class="line">textView.font = [UIFont systemFontOfSize:12.f];</div><div class="line">textView.text = @&quot;iOS-UIKit框架学习—UITextView&quot;;</div><div class="line">textView.textColor = UIColorFromRGB(0xababab);</div><div class="line">// UITextView在上下左右分别有一个8px的padding,设置为0后可以正常计算文本高度，否则要宽度-16</div><div class="line">[textView setContentOffset:CGPointZero];</div><div class="line">[self.view addSubview:textView];</div><div class="line"></div><div class="line">// 用此方法计算高度不需要设置内容边距</div><div class="line">CGSize sizeToFit = [textView sizeThatFits:CGSizeMake(SCREEN_WIDTH, MAXFLOAT)];</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;UITextView的类实现一个滚动的，多行文本区域的行为。类支持使用自定义字体，颜色，和对齐的文本的显示，同时还支持文本编辑。通常可以使用一个文本视图，显示多行文本。&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://wynter.wang/categories/iOS/"/>
    
    
      <category term="API" scheme="https://wynter.wang/tags/API/"/>
    
      <category term="iOS" scheme="https://wynter.wang/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS 百度地图SDK-配置开发环境</title>
    <link href="https://wynter.wang/2017/05/01/iOS-%E7%99%BE%E5%BA%A6%E5%9C%B0%E5%9B%BESDK-%E9%85%8D%E7%BD%AE%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    <id>https://wynter.wang/2017/05/01/iOS-百度地图SDK-配置开发环境/</id>
    <published>2017-05-01T08:13:16.000Z</published>
    <updated>2017-05-15T10:12:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>虽然百度地图应经用了很多次了，但是每次都浪费很长时间来配置，所以今天把配置<a href="http://lbsyun.baidu.com/index.php?title=iossdk" target="_blank" rel="external">百度地图SDK</a>的过程记录下来，也方便日后查看。<br><a id="more"></a></p><h2 id="第一步、导入百度SDK"><a href="#第一步、导入百度SDK" class="headerlink" title="第一步、导入百度SDK"></a>第一步、导入百度SDK</h2><p>百度地图SDK支持手动和使用<code>CocoaPods</code>自动配置</p><h3 id="自动配置-framework形式开发包（使用CocoaPods）"><a href="#自动配置-framework形式开发包（使用CocoaPods）" class="headerlink" title="自动配置.framework形式开发包（使用CocoaPods）"></a>自动配置.framework形式开发包（使用CocoaPods）</h3><p> 1、进入工程所在根目录执行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod init   // 初始化后，会自动创建`Podfile`文件</div></pre></td></tr></table></figure></p><p> 2、搜索百度地图SDK在CocoaPods的版本号：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod search  BaiduMapKit</div></pre></td></tr></table></figure></p><p>3、编辑Podfile内容如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod <span class="string">'BaiduMapKit'</span>, <span class="string">'3.3.0'</span>   // 3.3.0是当前最新的版本号</div></pre></td></tr></table></figure></p><p>4.在Podfile所在的文件夹下输入命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod install</div></pre></td></tr></table></figure></p><p>成功以后，会出现如下记录：</p><blockquote><p>Analyzing dependencies<br>Downloading dependencies<br>Installing BaiduMapKit (3.3.0)<br>Generating Pods project<br>Integrating client project<br>[!] Please close any current Xcode sessions and use <code>BaiDuPoiSearch.xcworkspace</code> for this project from now on</p></blockquote><h3 id="手动配置-framework形式开发包"><a href="#手动配置-framework形式开发包" class="headerlink" title="手动配置.framework形式开发包"></a>手动配置.framework形式开发包</h3><p>1、根据需要导入 .framework包，将所需要的<code>BaiduMapAPI_**.framework</code>拷贝到工程所在文件夹下，BaiduMapAPI_Base.framework为基础包，使用SDK任何功能都需导入，其他分包可按需导入</p><p>2、在<code>TARGETS</code>-&gt;<code>Build Phases</code>-&gt;<code>Link Binary With Libaries</code>中点击“+”按钮，在弹出的窗口中点击<code>Add Other</code>按钮，选择<code>BaiduMapAPI_**.framework</code>添加到工程中</p><blockquote><p>注意:静态库中采用Objective-C++实现，因此需要您保证您工程中至少有一个.mm后缀的源文件(您可以将任意一个.m后缀的文件改名为.mm)，或者在工程属性中指定编译方式，即在Xcode的<code>Project</code> -&gt; <code>Edit Active Target</code>-&gt;<code>Build Setting</code> 中找到 <code>Compile Sources As</code>，并将其设置为<code>Objective-C++</code></p></blockquote><h2 id="第二步、引入所需的系统依赖库"><a href="#第二步、引入所需的系统依赖库" class="headerlink" title="第二步、引入所需的系统依赖库"></a>第二步、引入所需的系统依赖库</h2><p>百度地图SDK中提供了定位功能和动画效果，v2.0.0版本开始使用OpenGL渲染因此您需要在您的Xcode工程中引入：<br><code>CoreLocation.framework</code>、<code>QuartzCore.framework</code>、<code>OpenGLES.framework</code>、<code>SystemConfiguration.framework</code>、<code>CoreGraphics.framework</code>、<code>Security.framework</code>、<code>libsqlite3.0.tbd</code>、<code>CoreTelephony.framework</code> 、<code>libstdc++.6.0.9.tbd</code></p><p><strong>添加方法：</strong>在Xcode的<code>Project</code> -&gt; <code>Active Target</code> -&gt;<code>Build Phases</code> -&gt;<code>Link Binary With Libraries</code>，添加这几个系统库即可</p><h2 id="第三步、引入所需的第三方openssl库"><a href="#第三步、引入所需的第三方openssl库" class="headerlink" title="第三步、引入所需的第三方openssl库"></a>第三步、引入所需的第三方openssl库</h2><p>添加支持HTTPS所需的penssl静态库：<code>libssl.a</code>和<code>libcrypto.a</code>（SDK打好的包存放于thirdlib目录下</p><p><strong>添加方法：</strong> 在 <code>TARGETS</code>-&gt;<code>Build Phases</code>-&gt;<code>Link Binary With Libaries</code>中点击“+”按钮，在弹出的窗口中点击<code>Add Other</code>按钮，选择libssl.a和libcrypto.a添加到工程中</p><h2 id="第四步、环境配置"><a href="#第四步、环境配置" class="headerlink" title="第四步、环境配置"></a>第四步、环境配置</h2><p>在<code>TARGETS</code>-&gt;<code>Build Settings</code>-&gt;<code>Other Linker Flags</code> 中添加<code>-ObjC</code>。</p><h2 id="第五步、引入mapapi-bundle资源文件"><a href="#第五步、引入mapapi-bundle资源文件" class="headerlink" title="第五步、引入mapapi.bundle资源文件"></a>第五步、引入mapapi.bundle资源文件</h2><p>如果使用了基础地图功能，需要添加该资源，否则地图不能正常显示<code>mapapi.bundle</code>中存储了定位、默认大头针标注View及路线关键点的资源图片，还存储了矢量地图绘制必需的资源文件。如果您不需要使用内置的图片显示功能，则可以删除<code>bundle</code>文件中的<code>image</code>文件夹。您也可以根据具体需求任意替换或删除该<code>bundle</code>中<code>image</code>文件夹的图片文件。</p><p><strong>添加方法：</strong>选中工程名，在右键菜单中选择<code>Add Files to …</code>，从<code>BaiduMapAPI_Map.framework</code>||<code>Resources</code>文件中选择<code>mapapi.bundle</code>文件，并勾选<code>Copy items if needed</code>复选框，单击<code>Add</code>按钮，将资源文件添加到工程中。</p><h2 id="第六步、引入头文件"><a href="#第六步、引入头文件" class="headerlink" title="第六步、引入头文件"></a>第六步、引入头文件</h2><p>在使用SDK的类 按需 引入下边的头文件：<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">&lt;BaiduMapAPI_Base/BMKBaseComponent.h&gt;</span>//引入base相关所有的头文件</span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;BaiduMapAPI_Map/BMKMapComponent.h&gt;</span>//引入地图功能所有的头文件</span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;BaiduMapAPI_Search/BMKSearchComponent.h&gt;</span>//引入检索功能所有的头文件</span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;BaiduMapAPI_Cloud/BMKCloudSearchComponent.h&gt;</span>//引入云检索功能所有的头文件</span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;BaiduMapAPI_Location/BMKLocationComponent.h&gt;</span>//引入定位功能所有的头文件</span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;BaiduMapAPI_Utils/BMKUtilsComponent.h&gt;</span>//引入计算工具所有的头文件</span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;BaiduMapAPI_Radar/BMKRadarComponent.h&gt;</span>//引入周边雷达功能所有的头文件</span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;BaiduMapAPI_Map/BMKMapView.h&gt;</span>//只引入所需的单个头文件</span></div></pre></td></tr></table></figure></p><h2 id="第七步、调用客户端"><a href="#第七步、调用客户端" class="headerlink" title="第七步、调用客户端"></a>第七步、调用客户端</h2><p>如果在iOS9中使用了调起百度地图客户端功能，必须在<code>Info.plist</code>中进行如下配置，否则不能调起百度地图客户端。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>LSApplicationQueriesSchemes<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">array</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>baidumap<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">array</span>&gt;</span></div></pre></td></tr></table></figure></p><h2 id="第八步、开启定位提醒"><a href="#第八步、开启定位提醒" class="headerlink" title="第八步、开启定位提醒"></a>第八步、开启定位提醒</h2><p>自iOS SDK v2.5.0起，为了对iOS8的定位能力做兼容，做了相应的修改，开发者在使用过程中注意事项如下：</p><p>需要在info.plist里添加（以下二选一，两个都添加默认使用<code>NSLocationWhenInUseUsageDescription</code>）：</p><ul><li><p><code>NSLocationWhenInUseUsageDescription</code>  // 允许在前台使用时获取GPS的描述</p></li><li><p><code>NSLocationAlwaysUsageDescription</code> // 允许永久使用GPS的描述</p></li></ul><h2 id="第九步、验证key和应用名称是否相符"><a href="#第九步、验证key和应用名称是否相符" class="headerlink" title="第九步、验证key和应用名称是否相符"></a>第九步、验证key和应用名称是否相符</h2><p>在使用Xcode6进行SDK开发过程中，需要在info.plist中添加：<code>Bundle display name</code> ，且其值不能为空（Xcode6新建的项目没有此配置，若没有会造成manager start failed）</p><h2 id="第十步、APPDelegate配置"><a href="#第十步、APPDelegate配置" class="headerlink" title="第十步、APPDelegate配置"></a>第十步、APPDelegate配置</h2><p>.h文件<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">&lt;BaiduMapAPI_Base/BMKBaseComponent.h&gt;</span></span></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">AppDelegate</span> : <span class="title">UIResponder</span> &lt;<span class="title">UIApplicationDelegate</span>,<span class="title">BMKGeneralDelegate</span>&gt;</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>,<span class="keyword">strong</span>) BMKMapManager* mapManager;</div></pre></td></tr></table></figure></p><p>.m文件<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">-(<span class="keyword">void</span>)setUpBaiMap &#123;</div><div class="line">    <span class="comment">//百度地图</span></div><div class="line">    <span class="keyword">if</span> ([[<span class="built_in">UIDevice</span> currentDevice].systemVersion floatValue] &gt;= <span class="number">8</span>) &#123;</div><div class="line">        <span class="comment">//由于IOS8中定位的授权机制改变 需要进行手动授权</span></div><div class="line">        <span class="built_in">CLLocationManager</span>  *locationManager = [[<span class="built_in">CLLocationManager</span> alloc] init];</div><div class="line">        <span class="comment">//获取授权认证</span></div><div class="line">        [locationManager requestAlwaysAuthorization];</div><div class="line">        [locationManager requestWhenInUseAuthorization];</div><div class="line">        [locationManager startUpdatingLocation];</div><div class="line">    &#125;</div><div class="line">    _mapManager = [[BMKMapManager alloc]init];</div><div class="line">    <span class="comment">// 如果要关注网络及授权验证事件，请设定     generalDelegate参数</span></div><div class="line">    <span class="built_in">BOOL</span> ret = [_mapManager start:BaiDu_MapKey  generalDelegate:<span class="keyword">self</span>];</div><div class="line">    <span class="keyword">if</span> (!ret) &#123;</div><div class="line">        DLog(<span class="string">@"manager start failed!"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">#pragma mark - 百度地图</span></div><div class="line">- (<span class="keyword">void</span>)onGetNetworkState:(<span class="keyword">int</span>)iError &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="number">0</span> == iError) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"联网成功"</span>);</div><div class="line">    &#125; <span class="keyword">else</span>&#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"onGetNetworkState %d"</span>,iError);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)onGetPermissionState:(<span class="keyword">int</span>)iError &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="number">0</span> == iError) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"授权成功"</span>);</div><div class="line">        <span class="keyword">self</span>.isMapPermission = <span class="literal">YES</span>;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"onGetPermissionState %d"</span>,iError);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="第十一步、管理地图的生命周期"><a href="#第十一步、管理地图的生命周期" class="headerlink" title="第十一步、管理地图的生命周期"></a>第十一步、管理地图的生命周期</h2><p>自2.0.0起，BMKMapView新增viewWillAppear、viewWillDisappear方法来控制BMKMapView的生命周期，并且在一个时刻只能有一个`BMKMapView接受回调消息，因此在使用BMKMapView的viewController中需要在viewWillAppear、viewWillDisappear方法中调用BMKMapView的对应的方法，并处理delegate，代码如下：<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">-(<span class="keyword">void</span>)viewWillAppear:(<span class="built_in">BOOL</span>)animated</div><div class="line">&#123;</div><div class="line">    [_mapView viewWillAppear];</div><div class="line">    _mapView.delegate = <span class="keyword">self</span>; <span class="comment">// 此处记得不用的时候需要置nil，否则影响内存的释放</span></div><div class="line">&#125;</div><div class="line">-(<span class="keyword">void</span>)viewWillDisappear:(<span class="built_in">BOOL</span>)animated</div><div class="line">&#123;</div><div class="line">      [_mapView viewWillDisappear];</div><div class="line">      _mapView.delegate = <span class="literal">nil</span>; <span class="comment">// 不用时，置nil</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文借鉴<a href="http://lbsyun.baidu.com/index.php?title=iossdk/guide/buildproject" target="_blank" rel="external">百度地图SDK-配置开发环境</a>，只是对百度地图的配置进行了一下总结，仅供开发百度地图参考使用，如有侵权行为，请联系我并及时删除。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;虽然百度地图应经用了很多次了，但是每次都浪费很长时间来配置，所以今天把配置&lt;a href=&quot;http://lbsyun.baidu.com/index.php?title=iossdk&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;百度地图SDK&lt;/a&gt;的过程记录下来，也方便日后查看。&lt;br&gt;
    
    </summary>
    
      <category term="blog" scheme="https://wynter.wang/categories/blog/"/>
    
    
      <category term="SDK" scheme="https://wynter.wang/tags/SDK/"/>
    
  </entry>
  
  <entry>
    <title>iOS-UIKit框架学习—UISwitch</title>
    <link href="https://wynter.wang/2017/04/14/iOS-UIKit%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E2%80%94UISwitch/"/>
    <id>https://wynter.wang/2017/04/14/iOS-UIKit框架学习—UISwitch/</id>
    <published>2017-04-14T09:14:11.000Z</published>
    <updated>2017-04-14T09:28:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>您可以使用UISwitch类来创建和管理ON/ OFF按钮，您会看到，例如在飞行模式等服务的偏好设定（设定）。这些对象被称为开关。<br><a id="more"></a></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NS_CLASS_AVAILABLE_IOS</span>(<span class="number">2</span>_0) __TVOS_PROHIBITED <span class="class"><span class="keyword">@interface</span> <span class="title">UISwitch</span> : <span class="title">UIControl</span> &lt;<span class="title">NSCoding</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">// 开关开启时的颜色 On</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nullable</span>, <span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">UIColor</span> *onTintColor <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">5</span>_0) <span class="built_in">UI_APPEARANCE_SELECTOR</span>;</div><div class="line"><span class="comment">// 背景边框颜色</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">null_resettable</span>, <span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">UIColor</span> *tintColor <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">6</span>_0);</div><div class="line"><span class="comment">// 开关关闭时的颜色 Off</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nullable</span>, <span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">UIColor</span> *thumbTintColor <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">6</span>_0) <span class="built_in">UI_APPEARANCE_SELECTOR</span>;</div><div class="line"><span class="comment">// 打开时的状态图片</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nullable</span>, <span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">UIImage</span> *onImage <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">6</span>_0) <span class="built_in">UI_APPEARANCE_SELECTOR</span>;</div><div class="line"><span class="comment">// 关闭时的状态图片</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nullable</span>, <span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">UIImage</span> *offImage <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">6</span>_0) <span class="built_in">UI_APPEARANCE_SELECTOR</span>;</div><div class="line"></div><div class="line"><span class="comment">// 开关</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>,<span class="keyword">getter</span>=isOn) <span class="built_in">BOOL</span> on;</div><div class="line"></div><div class="line"><span class="comment">// 初始化</span></div><div class="line">- (<span class="keyword">instancetype</span>)initWithFrame:(<span class="built_in">CGRect</span>)frame <span class="built_in">NS_DESIGNATED_INITIALIZER</span>;</div><div class="line">- (<span class="keyword">nullable</span> <span class="keyword">instancetype</span>)initWithCoder:(<span class="built_in">NSCoder</span> *)aDecoder <span class="built_in">NS_DESIGNATED_INITIALIZER</span>;</div><div class="line"><span class="comment">// 设置开关并有动画效果</span></div><div class="line">- (<span class="keyword">void</span>)setOn:(<span class="built_in">BOOL</span>)on animated:(<span class="built_in">BOOL</span>)animated; </div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure><p>e.g.<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">UISwitch</span> *switch1 = [[<span class="built_in">UISwitch</span> alloc]initWithFrame:<span class="built_in">CGRectMake</span>(<span class="number">100</span>, <span class="number">100</span>, <span class="number">0</span>, <span class="number">0</span>)];</div><div class="line">switch1.onTintColor = [<span class="built_in">UIColor</span> redColor];</div><div class="line">switch1.thumbTintColor = [<span class="built_in">UIColor</span> blueColor];</div><div class="line">switch1.tintColor = [<span class="built_in">UIColor</span> yellowColor];</div><div class="line">[switch1 setOn:<span class="literal">YES</span> animated:<span class="literal">YES</span>];</div><div class="line">[<span class="keyword">self</span>.view addSubview:switch1];</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;您可以使用UISwitch类来创建和管理ON/ OFF按钮，您会看到，例如在飞行模式等服务的偏好设定（设定）。这些对象被称为开关。&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://wynter.wang/categories/iOS/"/>
    
    
      <category term="API" scheme="https://wynter.wang/tags/API/"/>
    
      <category term="iOS" scheme="https://wynter.wang/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS-UIKit框架学习—UISlider</title>
    <link href="https://wynter.wang/2017/04/14/iOS-UIKit%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E2%80%94UISlider/"/>
    <id>https://wynter.wang/2017/04/14/iOS-UIKit框架学习—UISlider/</id>
    <published>2017-04-14T09:13:35.000Z</published>
    <updated>2017-04-14T09:28:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>一个UISlider对象是一个可视化的控制，用来选择一个连续值范围从单一的值。滑块始终显示为单杠。拇指，注意到滑块的当前值，并更改设置的用户可以通过移动。<br><a id="more"></a></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="built_in">NS_CLASS_AVAILABLE_IOS</span>(<span class="number">2</span>_0) __TVOS_PROHIBITED <span class="class"><span class="keyword">@interface</span> <span class="title">UISlider</span> : <span class="title">UIControl</span> &lt;<span class="title">NSCoding</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">// 当前的值</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>) <span class="keyword">float</span> value;</div><div class="line"><span class="comment">// 滑动器的最小值</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>) <span class="keyword">float</span> minimumValue;</div><div class="line"><span class="comment">// 滑动器的最大值</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>) <span class="keyword">float</span> maximumValue;</div><div class="line"><span class="comment">// 左侧最小值图片 如🔊</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nullable</span>, <span class="keyword">nonatomic</span>,<span class="keyword">strong</span>) <span class="built_in">UIImage</span> *minimumValueImage;</div><div class="line"><span class="comment">// 右侧最大值图片 如🔊</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nullable</span>, <span class="keyword">nonatomic</span>,<span class="keyword">strong</span>) <span class="built_in">UIImage</span> *maximumValueImage;</div><div class="line"><span class="comment">// 是否拖动值改变后连续 默认YES</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>,<span class="keyword">getter</span>=isContinuous) <span class="built_in">BOOL</span> continuous;</div><div class="line"></div><div class="line"><span class="comment">// 最小的值的填充色</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nullable</span>, <span class="keyword">nonatomic</span>,<span class="keyword">strong</span>) <span class="built_in">UIColor</span> *minimumTrackTintColor <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">5</span>_0) <span class="built_in">UI_APPEARANCE_SELECTOR</span>;</div><div class="line"><span class="comment">// 最大的值的填充色</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nullable</span>, <span class="keyword">nonatomic</span>,<span class="keyword">strong</span>) <span class="built_in">UIColor</span> *maximumTrackTintColor <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">5</span>_0) <span class="built_in">UI_APPEARANCE_SELECTOR</span>;</div><div class="line"><span class="comment">// 滑块的填充色</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nullable</span>, <span class="keyword">nonatomic</span>,<span class="keyword">strong</span>) <span class="built_in">UIColor</span> *thumbTintColor <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">5</span>_0) <span class="built_in">UI_APPEARANCE_SELECTOR</span>;</div><div class="line"></div><div class="line"><span class="comment">// 设置值并有动画效果</span></div><div class="line">- (<span class="keyword">void</span>)setValue:(<span class="keyword">float</span>)value animated:(<span class="built_in">BOOL</span>)animated;</div><div class="line"></div><div class="line"><span class="comment">// 设置不同状态下滑块图片</span></div><div class="line">- (<span class="keyword">void</span>)setThumbImage:(<span class="keyword">nullable</span> <span class="built_in">UIImage</span> *)image forState:(<span class="built_in">UIControlState</span>)state;</div><div class="line"><span class="comment">// 设置不同状态下最小值图片</span></div><div class="line">- (<span class="keyword">void</span>)setMinimumTrackImage:(<span class="keyword">nullable</span> <span class="built_in">UIImage</span> *)image forState:(<span class="built_in">UIControlState</span>)state;</div><div class="line"><span class="comment">// 设置不同状态下最大值图片</span></div><div class="line">- (<span class="keyword">void</span>)setMaximumTrackImage:(<span class="keyword">nullable</span> <span class="built_in">UIImage</span> *)image forState:(<span class="built_in">UIControlState</span>)state;</div><div class="line"></div><div class="line"><span class="comment">// 获取不同状态下滑块的图片</span></div><div class="line">- (<span class="keyword">nullable</span> <span class="built_in">UIImage</span> *)thumbImageForState:(<span class="built_in">UIControlState</span>)state;</div><div class="line"><span class="comment">// 获取不同状态下最小值的图片</span></div><div class="line">- (<span class="keyword">nullable</span> <span class="built_in">UIImage</span> *)minimumTrackImageForState:(<span class="built_in">UIControlState</span>)state;</div><div class="line"><span class="comment">// 获取不同状态下最大值的图片</span></div><div class="line">- (<span class="keyword">nullable</span> <span class="built_in">UIImage</span> *)maximumTrackImageForState:(<span class="built_in">UIControlState</span>)state;</div><div class="line"></div><div class="line"><span class="comment">// 获取当前滑块的图片</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nullable</span>,<span class="keyword">nonatomic</span>,<span class="keyword">readonly</span>) <span class="built_in">UIImage</span> *currentThumbImage;</div><div class="line"><span class="comment">// 获取当前最小值图片</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nullable</span>,<span class="keyword">nonatomic</span>,<span class="keyword">readonly</span>) <span class="built_in">UIImage</span> *currentMinimumTrackImage;</div><div class="line"><span class="comment">// 获取当前最大值图片</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nullable</span>,<span class="keyword">nonatomic</span>,<span class="keyword">readonly</span>) <span class="built_in">UIImage</span> *currentMaximumTrackImage;</div><div class="line"></div><div class="line"><span class="comment">// 返回最小值图片绘制的矩形</span></div><div class="line">- (<span class="built_in">CGRect</span>)minimumValueImageRectForBounds:(<span class="built_in">CGRect</span>)bounds;</div><div class="line"><span class="comment">// 返回最大值图片绘制的矩形</span></div><div class="line">- (<span class="built_in">CGRect</span>)maximumValueImageRectForBounds:(<span class="built_in">CGRect</span>)bounds;</div><div class="line"><span class="comment">// 返回为滑块轨道绘制的矩形</span></div><div class="line">- (<span class="built_in">CGRect</span>)trackRectForBounds:(<span class="built_in">CGRect</span>)bounds;</div><div class="line"><span class="comment">// 返回为拇指滑块轨道绘制的矩形</span></div><div class="line">- (<span class="built_in">CGRect</span>)thumbRectForBounds:(<span class="built_in">CGRect</span>)bounds trackRect:(<span class="built_in">CGRect</span>)rect value:(<span class="keyword">float</span>)value;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure><p>e.g.<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">UISlider</span> *slider = [[<span class="built_in">UISlider</span> alloc]initWithFrame:<span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">100</span>, SCREEN_WIDTH, <span class="number">10</span>)];</div><div class="line">slider.minimumValue = <span class="number">0.</span>f;</div><div class="line">slider.maximumValue = <span class="number">100.</span>f;</div><div class="line">slider.thumbTintColor = [<span class="built_in">UIColor</span> blueColor];</div><div class="line">slider.minimumTrackTintColor = [<span class="built_in">UIColor</span> yellowColor];</div><div class="line">slider.maximumTrackTintColor = [<span class="built_in">UIColor</span> redColor];</div><div class="line">[slider setValue:<span class="number">50</span> animated:<span class="literal">YES</span>];</div><div class="line">[<span class="keyword">self</span>.view addSubview:slider];</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一个UISlider对象是一个可视化的控制，用来选择一个连续值范围从单一的值。滑块始终显示为单杠。拇指，注意到滑块的当前值，并更改设置的用户可以通过移动。&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://wynter.wang/categories/iOS/"/>
    
    
      <category term="API" scheme="https://wynter.wang/tags/API/"/>
    
      <category term="iOS" scheme="https://wynter.wang/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS-UIKit框架学习—UITextField</title>
    <link href="https://wynter.wang/2017/04/14/iOS-UIKit%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E2%80%94UITextField/"/>
    <id>https://wynter.wang/2017/04/14/iOS-UIKit框架学习—UITextField/</id>
    <published>2017-04-14T09:10:52.000Z</published>
    <updated>2017-04-14T09:32:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>UITextField对象是一个显示可编辑的文字和动作消息发送到目标对象，当用户按下返回按钮控制。通常可以使用这个类从用户收集少量的文字，并执行一些立即采取行动，如搜索操作，根据该文本。<br><a id="more"></a></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NS_CLASS_AVAILABLE_IOS</span>(<span class="number">2</span>_0) <span class="class"><span class="keyword">@interface</span> <span class="title">UITextField</span> : <span class="title">UIControl</span> &lt;<span class="title">UITextInput</span>, <span class="title">NSCoding</span>, <span class="title">UIContentSizeCategoryAdjusting</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">// 文本</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nullable</span>, <span class="keyword">nonatomic</span>,<span class="keyword">copy</span>)   <span class="built_in">NSString</span>               *text;</div><div class="line"><span class="comment">// 富文本</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nullable</span>, <span class="keyword">nonatomic</span>,<span class="keyword">copy</span>)   <span class="built_in">NSAttributedString</span>     *attributedText <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">6</span>_0);</div><div class="line"><span class="comment">// 字体颜色</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nullable</span>, <span class="keyword">nonatomic</span>,<span class="keyword">strong</span>) <span class="built_in">UIColor</span>                *textColor;</div><div class="line"><span class="comment">// 字体 默认系统12号</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nullable</span>, <span class="keyword">nonatomic</span>,<span class="keyword">strong</span>) <span class="built_in">UIFont</span>                 *font;</div><div class="line"><span class="comment">// 对齐方式</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>)        <span class="built_in">NSTextAlignment</span>         textAlignment;</div><div class="line"><span class="comment">// 文本边缘风格</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>)        <span class="built_in">UITextBorderStyle</span>       borderStyle;</div><div class="line"><span class="comment">// 默认富文本属性</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>,<span class="keyword">copy</span>)   <span class="built_in">NSDictionary</span>&lt;<span class="built_in">NSString</span> *, <span class="keyword">id</span>&gt;           *defaultTextAttributes <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">7</span>_0);</div><div class="line"><span class="comment">// 占位符</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nullable</span>, <span class="keyword">nonatomic</span>,<span class="keyword">copy</span>)   <span class="built_in">NSString</span>               *placeholder;</div><div class="line"><span class="comment">// 占位符富文本属性</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nullable</span>, <span class="keyword">nonatomic</span>,<span class="keyword">copy</span>)   <span class="built_in">NSAttributedString</span>     *attributedPlaceholder <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">6</span>_0);</div><div class="line"><span class="comment">// 在文本开始编辑的时候是否移除旧文本</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>)        <span class="built_in">BOOL</span>                    clearsOnBeginEditing;</div><div class="line"><span class="comment">// 是否根据文本框宽度自动调节字体大小</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>)        <span class="built_in">BOOL</span>                    adjustsFontSizeToFitWidth;</div><div class="line"><span class="comment">// 允许最小的字号</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>)        <span class="built_in">CGFloat</span>                 minimumFontSize;</div><div class="line"><span class="comment">// 代理</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nullable</span>, <span class="keyword">nonatomic</span>,<span class="keyword">weak</span>)   <span class="keyword">id</span>&lt;<span class="built_in">UITextFieldDelegate</span>&gt; delegate;</div><div class="line"><span class="comment">// 表示启用时文本字段的背景外观的图像</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nullable</span>, <span class="keyword">nonatomic</span>,<span class="keyword">strong</span>) <span class="built_in">UIImage</span>                *background;</div><div class="line"><span class="comment">// 表示禁用时文本字段的背景外观的图像</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nullable</span>, <span class="keyword">nonatomic</span>,<span class="keyword">strong</span>) <span class="built_in">UIImage</span>                *disabledBackground;</div><div class="line"><span class="comment">// 文本是否处于编辑状态</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>,<span class="keyword">readonly</span>,<span class="keyword">getter</span>=isEditing) <span class="built_in">BOOL</span> editing;</div><div class="line"><span class="comment">// 是否可以编辑文本中的属性</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>) <span class="built_in">BOOL</span> allowsEditingTextAttributes <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">6</span>_0);</div><div class="line"><span class="comment">// 用户输入的新文本属性</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nullable</span>, <span class="keyword">nonatomic</span>,<span class="keyword">copy</span>) <span class="built_in">NSDictionary</span>&lt;<span class="built_in">NSString</span> *, <span class="keyword">id</span>&gt; *typingAttributes <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">6</span>_0);</div><div class="line"><span class="comment">// 清除按钮类型</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>)        <span class="built_in">UITextFieldViewMode</span>  clearButtonMode;</div><div class="line"><span class="comment">// 左侧view</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nullable</span>, <span class="keyword">nonatomic</span>,<span class="keyword">strong</span>) <span class="built_in">UIView</span>              *leftView;</div><div class="line"><span class="comment">// 左侧视图的类型</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>)        <span class="built_in">UITextFieldViewMode</span>  leftViewMode;</div><div class="line"><span class="comment">// 右侧view</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nullable</span>, <span class="keyword">nonatomic</span>,<span class="keyword">strong</span>) <span class="built_in">UIView</span>              *rightView;</div><div class="line"><span class="comment">// 右侧视图的类型</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>)        <span class="built_in">UITextFieldViewMode</span>  rightViewMode;</div><div class="line"></div><div class="line"><span class="comment">// 返回接收者的CGRect</span></div><div class="line">- (<span class="built_in">CGRect</span>)borderRectForBounds:(<span class="built_in">CGRect</span>)bounds;</div><div class="line">- (<span class="built_in">CGRect</span>)textRectForBounds:(<span class="built_in">CGRect</span>)bounds;</div><div class="line">- (<span class="built_in">CGRect</span>)placeholderRectForBounds:(<span class="built_in">CGRect</span>)bounds;</div><div class="line">- (<span class="built_in">CGRect</span>)editingRectForBounds:(<span class="built_in">CGRect</span>)bounds;</div><div class="line">- (<span class="built_in">CGRect</span>)clearButtonRectForBounds:(<span class="built_in">CGRect</span>)bounds;</div><div class="line">- (<span class="built_in">CGRect</span>)leftViewRectForBounds:(<span class="built_in">CGRect</span>)bounds;</div><div class="line">- (<span class="built_in">CGRect</span>)rightViewRectForBounds:(<span class="built_in">CGRect</span>)bounds;</div><div class="line"></div><div class="line"><span class="comment">// 绘制文本</span></div><div class="line">- (<span class="keyword">void</span>)drawTextInRect:(<span class="built_in">CGRect</span>)rect;</div><div class="line"><span class="comment">// 绘制占位符文本</span></div><div class="line">- (<span class="keyword">void</span>)drawPlaceholderInRect:(<span class="built_in">CGRect</span>)rect;</div><div class="line"></div><div class="line"><span class="comment">// 输入框成为第一响应显示自定义输入视图</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>, <span class="keyword">readwrite</span>, <span class="keyword">strong</span>) <span class="built_in">UIView</span> *inputView;</div><div class="line"><span class="comment">// 输入框成为第一响应显示自定义附件输入视图</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>, <span class="keyword">readwrite</span>, <span class="keyword">strong</span>) <span class="built_in">UIView</span> *inputAccessoryView;</div><div class="line"><span class="comment">// 插入文本之前是否替换前一个文本</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>) <span class="built_in">BOOL</span> clearsOnInsertion <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">6</span>_0);</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">UIView</span> (<span class="title">UITextField</span>)</span></div><div class="line"><span class="comment">// 是否结束编辑</span></div><div class="line">- (<span class="built_in">BOOL</span>)endEditing:(<span class="built_in">BOOL</span>)force;</div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@protocol</span> <span class="title">UITextFieldDelegate</span> &lt;<span class="title">NSObject</span>&gt;</span></div><div class="line"></div><div class="line"><span class="keyword">@optional</span></div><div class="line"></div><div class="line"><span class="comment">// 是否可以在指定文本中编辑</span></div><div class="line">- (<span class="built_in">BOOL</span>)textFieldShouldBeginEditing:(<span class="built_in">UITextField</span> *)textField;</div><div class="line"><span class="comment">// 开始编辑</span></div><div class="line">- (<span class="keyword">void</span>)textFieldDidBeginEditing:(<span class="built_in">UITextField</span> *)textField;</div><div class="line"><span class="comment">// 是否可以在指定文本中停止</span></div><div class="line">- (<span class="built_in">BOOL</span>)textFieldShouldEndEditing:(<span class="built_in">UITextField</span> *)textField;</div><div class="line"><span class="comment">// 结束编辑</span></div><div class="line">- (<span class="keyword">void</span>)textFieldDidEndEditing:(<span class="built_in">UITextField</span> *)textField;</div><div class="line"><span class="comment">//  替换textFieldDidEndEditing:</span></div><div class="line">- (<span class="keyword">void</span>)textFieldDidEndEditing:(<span class="built_in">UITextField</span> *)textField reason:(<span class="built_in">UITextFieldDidEndEditingReason</span>)reason <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">10</span>_0);</div><div class="line"><span class="comment">// 指定文本是否可以发生改变</span></div><div class="line">- (<span class="built_in">BOOL</span>)textField:(<span class="built_in">UITextField</span> *)textField shouldChangeCharactersInRange:(<span class="built_in">NSRange</span>)range replacementString:(<span class="built_in">NSString</span> *)string;</div><div class="line"></div><div class="line"><span class="comment">// 是否可以清除指定内容</span></div><div class="line">- (<span class="built_in">BOOL</span>)textFieldShouldClear:(<span class="built_in">UITextField</span> *)textField;</div><div class="line"><span class="comment">// 按下返回按钮按下是否</span></div><div class="line">- (<span class="built_in">BOOL</span>)textFieldShouldReturn:(<span class="built_in">UITextField</span> *)textField;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">// 边界风格</span></div><div class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span>(<span class="built_in">NSInteger</span>, <span class="built_in">UITextBorderStyle</span>) &#123;</div><div class="line">    <span class="built_in">UITextBorderStyleNone</span>,        <span class="comment">//  无</span></div><div class="line">    <span class="built_in">UITextBorderStyleLine</span>,        <span class="comment">// 矩形外观</span></div><div class="line">    <span class="built_in">UITextBorderStyleBezel</span>,       <span class="comment">// 阴影矩形外观</span></div><div class="line">    <span class="built_in">UITextBorderStyleRoundedRect</span>  <span class="comment">// 圆角矩形</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 右侧清空按钮</span></div><div class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span>(<span class="built_in">NSInteger</span>, <span class="built_in">UITextFieldViewMode</span>) &#123;</div><div class="line">    <span class="built_in">UITextFieldViewModeNever</span>,         <span class="comment">// 从不出现</span></div><div class="line">    <span class="built_in">UITextFieldViewModeWhileEditing</span>,  <span class="comment">// 编辑时出现</span></div><div class="line">    <span class="built_in">UITextFieldViewModeUnlessEditing</span>, <span class="comment">// 除了编辑外出现</span></div><div class="line">    <span class="built_in">UITextFieldViewModeAlways</span>         <span class="comment">// 一直出现</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 将要编辑完成的状态</span></div><div class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span>(<span class="built_in">NSInteger</span>, <span class="built_in">UITextFieldDidEndEditingReason</span>) &#123;</div><div class="line">    <span class="built_in">UITextFieldDidEndEditingReasonCommitted</span>, <span class="comment">// 提交编辑</span></div><div class="line">    <span class="built_in">UITextFieldDidEndEditingReasonCancelled</span>  <span class="comment">// 取消编辑</span></div><div class="line">&#125; <span class="built_in">NS_ENUM_AVAILABLE_IOS</span>(<span class="number">10</span>_0);</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 开始编辑时发送通知</span></div><div class="line"><span class="built_in">UIKIT_EXTERN</span> <span class="built_in">NSNotificationName</span> <span class="keyword">const</span> <span class="built_in">UITextFieldTextDidBeginEditingNotification</span>;</div><div class="line"><span class="comment">// 编辑结束时发送通知</span></div><div class="line"><span class="built_in">UIKIT_EXTERN</span> <span class="built_in">NSNotificationName</span> <span class="keyword">const</span> <span class="built_in">UITextFieldTextDidEndEditingNotification</span>;</div><div class="line"><span class="comment">// 内容变化时发送通知</span></div><div class="line"><span class="built_in">UIKIT_EXTERN</span> <span class="built_in">NSNotificationName</span> <span class="keyword">const</span> <span class="built_in">UITextFieldTextDidChangeNotification</span>;</div><div class="line"></div><div class="line"><span class="built_in">UIKIT_EXTERN</span> <span class="built_in">NSString</span> *<span class="keyword">const</span> <span class="built_in">UITextFieldDidEndEditingReasonKey</span> <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">10</span>_0);</div></pre></td></tr></table></figure><p>e.g.<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">UITextField</span> *TF = [[<span class="built_in">UITextField</span> alloc] init];</div><div class="line">TF.placeholder = <span class="string">@"请输入用户名"</span>;</div><div class="line">TF.backgroundColor = [<span class="built_in">UIColor</span> clearColor];</div><div class="line">TF.delegate = <span class="keyword">self</span>;</div><div class="line">TF.clearButtonMode = <span class="built_in">UITextFieldViewModeWhileEditing</span>;</div><div class="line">TF.secureTextEntry = <span class="literal">YES</span>;</div><div class="line">TF.font = [<span class="built_in">UIFont</span> systemFontOfSize:<span class="number">15.0</span>];</div><div class="line">TF.textColor = <span class="built_in">UIColorFromRGB</span>(<span class="number">0x1a2220</span>);</div><div class="line">TF.tintColor = <span class="built_in">UIColorFromRGB</span>(<span class="number">0x25cfa6</span>); <span class="comment">// 光标颜色</span></div><div class="line">TF.keyboardType = <span class="built_in">UIKeyboardTypeNumberPad</span>;</div><div class="line">TF.returnKeyType = <span class="built_in">UIReturnKeyNext</span>;</div><div class="line">TF.text = <span class="string">@"18888888888"</span>;</div><div class="line">[<span class="keyword">self</span>.view addSubview:TF];</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;UITextField对象是一个显示可编辑的文字和动作消息发送到目标对象，当用户按下返回按钮控制。通常可以使用这个类从用户收集少量的文字，并执行一些立即采取行动，如搜索操作，根据该文本。&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://wynter.wang/categories/iOS/"/>
    
    
      <category term="API" scheme="https://wynter.wang/tags/API/"/>
    
      <category term="iOS" scheme="https://wynter.wang/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS-UIKit框架学习—UISegmentedControl</title>
    <link href="https://wynter.wang/2017/04/14/iOS-UIKit%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E2%80%94UISegmentedControl/"/>
    <id>https://wynter.wang/2017/04/14/iOS-UIKit框架学习—UISegmentedControl/</id>
    <published>2017-04-14T09:10:14.000Z</published>
    <updated>2017-04-14T09:17:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>一个UISegmentedControl对象是横向控制多个段，每个段作为一个独立的按钮运作。分段控制提供一个紧凑的手段，组合到一起的控制。<br><a id="more"></a></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NS_CLASS_AVAILABLE_IOS</span>(<span class="number">2</span>_0) <span class="class"><span class="keyword">@interface</span> <span class="title">UISegmentedControl</span> : <span class="title">UIControl</span> &lt;<span class="title">NSCoding</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">// 初始化方法：传入的数组可以是字符串也可以是UIImage对象的图片数组</span></div><div class="line">- (<span class="keyword">instancetype</span>)initWithItems:(<span class="keyword">nullable</span> <span class="built_in">NSArray</span> *)items;</div><div class="line"><span class="comment">// 设置是否保持选中状态</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>,<span class="keyword">getter</span>=isMomentary) <span class="built_in">BOOL</span> momentary;</div><div class="line"><span class="comment">// 获取标签个数</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>,<span class="keyword">readonly</span>) <span class="built_in">NSUInteger</span> numberOfSegments;</div><div class="line"><span class="comment">// 设置标签宽度是否随内容自适应 默认是 NO.</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>) <span class="built_in">BOOL</span> apportionsSegmentWidthsByContent <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">5</span>_0);</div><div class="line"><span class="comment">// 插入文字标签在index位置</span></div><div class="line">- (<span class="keyword">void</span>)insertSegmentWithTitle:(<span class="keyword">nullable</span> <span class="built_in">NSString</span> *)title atIndex:(<span class="built_in">NSUInteger</span>)segment animated:(<span class="built_in">BOOL</span>)animated;</div><div class="line"><span class="comment">// 插入图片标签在index位置</span></div><div class="line">- (<span class="keyword">void</span>)insertSegmentWithImage:(<span class="keyword">nullable</span> <span class="built_in">UIImage</span> *)image  atIndex:(<span class="built_in">NSUInteger</span>)segment animated:(<span class="built_in">BOOL</span>)animated;</div><div class="line"><span class="comment">// 根据索引删除标签</span></div><div class="line">- (<span class="keyword">void</span>)removeSegmentAtIndex:(<span class="built_in">NSUInteger</span>)segment animated:(<span class="built_in">BOOL</span>)animated;</div><div class="line"><span class="comment">// 删除所有标签</span></div><div class="line">- (<span class="keyword">void</span>)removeAllSegments;</div><div class="line"><span class="comment">// 重设标签标题</span></div><div class="line">- (<span class="keyword">void</span>)setTitle:(<span class="keyword">nullable</span> <span class="built_in">NSString</span> *)title forSegmentAtIndex:(<span class="built_in">NSUInteger</span>)segment;</div><div class="line"><span class="comment">// 获取标签标题</span></div><div class="line">- (<span class="keyword">nullable</span> <span class="built_in">NSString</span> *)titleForSegmentAtIndex:(<span class="built_in">NSUInteger</span>)segment;</div><div class="line"><span class="comment">// 设置标签图片</span></div><div class="line">- (<span class="keyword">void</span>)setImage:(<span class="keyword">nullable</span> <span class="built_in">UIImage</span> *)image forSegmentAtIndex:(<span class="built_in">NSUInteger</span>)segment;</div><div class="line"><span class="comment">// 获取标签图片</span></div><div class="line">- (<span class="keyword">nullable</span> <span class="built_in">UIImage</span> *)imageForSegmentAtIndex:(<span class="built_in">NSUInteger</span>)segment;</div><div class="line"><span class="comment">// 根据索引设置相应标签宽度 设置为0则自动获取，默认值0</span></div><div class="line">- (<span class="keyword">void</span>)setWidth:(<span class="built_in">CGFloat</span>)width forSegmentAtIndex:(<span class="built_in">NSUInteger</span>)segment;</div><div class="line"><span class="comment">// 根据索引获取标签宽度</span></div><div class="line">- (<span class="built_in">CGFloat</span>)widthForSegmentAtIndex:(<span class="built_in">NSUInteger</span>)segment;</div><div class="line"><span class="comment">// 设置标签内容的偏移量 默认值0</span></div><div class="line">- (<span class="keyword">void</span>)setContentOffset:(<span class="built_in">CGSize</span>)offset forSegmentAtIndex:(<span class="built_in">NSUInteger</span>)segment;</div><div class="line"><span class="comment">// 根据索引获取变标签内容的偏移量</span></div><div class="line">- (<span class="built_in">CGSize</span>)contentOffsetForSegmentAtIndex:(<span class="built_in">NSUInteger</span>)segment;</div><div class="line"><span class="comment">// 根据所以设置标签是否有效(默认有效)</span></div><div class="line">- (<span class="keyword">void</span>)setEnabled:(<span class="built_in">BOOL</span>)enabled forSegmentAtIndex:(<span class="built_in">NSUInteger</span>)segment;</div><div class="line"><span class="comment">// 根据索引获取当前标签是否有效</span></div><div class="line">- (<span class="built_in">BOOL</span>)isEnabledForSegmentAtIndex:(<span class="built_in">NSUInteger</span>)segment;</div><div class="line"><span class="comment">// 设置和获取当前选中的标签索引</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>) <span class="built_in">NSInteger</span> selectedSegmentIndex;</div><div class="line"><span class="comment">// 设置标签风格颜色</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">null_resettable</span>,<span class="keyword">nonatomic</span>,<span class="keyword">strong</span>) <span class="built_in">UIColor</span> *tintColor;</div><div class="line"><span class="comment">// 置特定状态下segment的背景图案</span></div><div class="line">- (<span class="keyword">void</span>)setBackgroundImage:(<span class="keyword">nullable</span> <span class="built_in">UIImage</span> *)backgroundImage forState:(<span class="built_in">UIControlState</span>)state barMetrics:(<span class="built_in">UIBarMetrics</span>)barMetrics <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">5</span>_0) <span class="built_in">UI_APPEARANCE_SELECTOR</span>;</div><div class="line"><span class="comment">// 获取背景图案</span></div><div class="line">- (<span class="keyword">nullable</span> <span class="built_in">UIImage</span> *)backgroundImageForState:(<span class="built_in">UIControlState</span>)state barMetrics:(<span class="built_in">UIBarMetrics</span>)barMetrics <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">5</span>_0) <span class="built_in">UI_APPEARANCE_SELECTOR</span>;</div><div class="line"><span class="comment">// 设置标签之间分割线的图案</span></div><div class="line">- (<span class="keyword">void</span>)setDividerImage:(<span class="keyword">nullable</span> <span class="built_in">UIImage</span> *)dividerImage forLeftSegmentState:(<span class="built_in">UIControlState</span>)leftState rightSegmentState:(<span class="built_in">UIControlState</span>)rightState barMetrics:(<span class="built_in">UIBarMetrics</span>)barMetrics <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">5</span>_0) <span class="built_in">UI_APPEARANCE_SELECTOR</span>;</div><div class="line"><span class="comment">// 获取标签之间分割线的图案</span></div><div class="line">- (<span class="keyword">nullable</span> <span class="built_in">UIImage</span> *)dividerImageForLeftSegmentState:(<span class="built_in">UIControlState</span>)leftState rightSegmentState:(<span class="built_in">UIControlState</span>)rightState barMetrics:(<span class="built_in">UIBarMetrics</span>)barMetrics  <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">5</span>_0) <span class="built_in">UI_APPEARANCE_SELECTOR</span>;</div><div class="line"><span class="comment">// 通过Attribute字符串属性字典设置标签标题</span></div><div class="line">- (<span class="keyword">void</span>)setTitleTextAttributes:(<span class="keyword">nullable</span> <span class="built_in">NSDictionary</span> *)attributes forState:(<span class="built_in">UIControlState</span>)state <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">5</span>_0) <span class="built_in">UI_APPEARANCE_SELECTOR</span>;</div><div class="line">- (<span class="keyword">nullable</span> <span class="built_in">NSDictionary</span> *)titleTextAttributesForState:(<span class="built_in">UIControlState</span>)state <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">5</span>_0) <span class="built_in">UI_APPEARANCE_SELECTOR</span>;</div><div class="line"><span class="comment">// 获取Attribute字符串属性字典</span></div><div class="line">- (<span class="keyword">void</span>)setContentPositionAdjustment:(<span class="built_in">UIOffset</span>)adjustment forSegmentType:(<span class="built_in">UISegmentedControlSegment</span>)leftCenterRightOrAlone barMetrics:(<span class="built_in">UIBarMetrics</span>)barMetrics <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">5</span>_0) <span class="built_in">UI_APPEARANCE_SELECTOR</span>;</div><div class="line"><span class="comment">// 自行设置标签内容的偏移量</span></div><div class="line">- (<span class="built_in">UIOffset</span>)contentPositionAdjustmentForSegmentType:(<span class="built_in">UISegmentedControlSegment</span>)leftCenterRightOrAlone barMetrics:(<span class="built_in">UIBarMetrics</span>)barMetrics <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">5</span>_0) <span class="built_in">UI_APPEARANCE_SELECTOR</span>;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">enum</span> &#123;</div><div class="line">    <span class="built_in">UISegmentedControlNoSegment</span> = <span class="number">-1</span>   <span class="comment">// 没有选定分段的下标</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 分段类型</span></div><div class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span>(<span class="built_in">NSInteger</span>, <span class="built_in">UISegmentedControlSegment</span>) &#123;</div><div class="line">    <span class="built_in">UISegmentedControlSegmentAny</span> = <span class="number">0</span>,<span class="comment">// 所有标签都受影响</span></div><div class="line">    <span class="built_in">UISegmentedControlSegmentLeft</span> = <span class="number">1</span>,  <span class="comment">// 只有左边部分受到影响</span></div><div class="line">    <span class="built_in">UISegmentedControlSegmentCenter</span> = <span class="number">2</span>, <span class="comment">// 只有中间部分受到影响</span></div><div class="line">    <span class="built_in">UISegmentedControlSegmentRight</span> = <span class="number">3</span>,  <span class="comment">// 只有右边部分受到影响</span></div><div class="line">    <span class="built_in">UISegmentedControlSegmentAlone</span> = <span class="number">4</span>,  <span class="comment">// 在只有一个标签的时候生效</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>e.g.<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">UISegmentedControl</span> *segmentedControl = [[<span class="built_in">UISegmentedControl</span> alloc]initWithItems:@[<span class="string">@"1"</span>,<span class="string">@"2"</span>,<span class="string">@"3"</span>]];</div><div class="line">segmentedControl.frame =  <span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">150</span>, <span class="number">44</span>);</div><div class="line">segmentedControl.tintColor = [<span class="built_in">UIColor</span> redColor];</div><div class="line">segmentedControl.apportionsSegmentWidthsByContent = <span class="literal">YES</span>;</div><div class="line">segmentedControl.selectedSegmentIndex = <span class="number">2</span>;</div><div class="line">[segmentedControl addTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(clickItem:) forControlEvents:<span class="built_in">UIControlEventTouchUpInside</span>];</div><div class="line"><span class="keyword">self</span>.navigationItem.titleView = segmentedControl;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一个UISegmentedControl对象是横向控制多个段，每个段作为一个独立的按钮运作。分段控制提供一个紧凑的手段，组合到一起的控制。&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://wynter.wang/categories/iOS/"/>
    
    
      <category term="API" scheme="https://wynter.wang/tags/API/"/>
    
      <category term="iOS" scheme="https://wynter.wang/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS-UIKit框架学习—UIPageControl</title>
    <link href="https://wynter.wang/2017/03/08/iOS-UIKit%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E2%80%94UIPageControl/"/>
    <id>https://wynter.wang/2017/03/08/iOS-UIKit框架学习—UIPageControl/</id>
    <published>2017-03-08T08:22:19.000Z</published>
    <updated>2017-03-08T08:38:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>您可以使用UIPageControl类来创建和管理页面控制。一个页面控制是在控制中心的点继承。每个点对应一个应用程序的文档（或其他实体的数据模型）页面，白色圆点表示当前浏览的网页。<br><a id="more"></a></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NS_CLASS_AVAILABLE_IOS</span>(<span class="number">2</span>_0) <span class="class"><span class="keyword">@interface</span> <span class="title">UIPageControl</span> : <span class="title">UIControl</span></span></div><div class="line"></div><div class="line"><span class="comment">// 页面总数 默认值0</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>) <span class="built_in">NSInteger</span> numberOfPages;</div><div class="line"><span class="comment">// 当前第几页 默认值0</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>) <span class="built_in">NSInteger</span> currentPage;</div><div class="line"><span class="comment">// 如果只有一页是否隐藏指示器 默认值NO</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>) <span class="built_in">BOOL</span> hidesForSinglePage;</div><div class="line"><span class="comment">// 点击到新的一页不会更新当前的值，直到调用 -updateCurrentPageDisplay ，默认值NO</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>) <span class="built_in">BOOL</span> defersCurrentPageDisplay;</div><div class="line"><span class="comment">// 更新当前控件显示的值</span></div><div class="line">- (<span class="keyword">void</span>)updateCurrentPageDisplay;</div><div class="line"><span class="comment">// 返回显示为点所需的最小大小给出页计数</span></div><div class="line">- (<span class="built_in">CGSize</span>)sizeForNumberOfPages:(<span class="built_in">NSInteger</span>)pageCount;</div><div class="line"></div><div class="line"><span class="comment">// 底层指示器颜色</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nullable</span>, <span class="keyword">nonatomic</span>,<span class="keyword">strong</span>) <span class="built_in">UIColor</span> *pageIndicatorTintColor <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">6</span>_0) <span class="built_in">UI_APPEARANCE_SELECTOR</span>;</div><div class="line"><span class="comment">// 当前指示器颜色</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nullable</span>, <span class="keyword">nonatomic</span>,<span class="keyword">strong</span>) <span class="built_in">UIColor</span> *currentPageIndicatorTintColor <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">6</span>_0) <span class="built_in">UI_APPEARANCE_SELECTOR</span>;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;您可以使用UIPageControl类来创建和管理页面控制。一个页面控制是在控制中心的点继承。每个点对应一个应用程序的文档（或其他实体的数据模型）页面，白色圆点表示当前浏览的网页。&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://wynter.wang/categories/iOS/"/>
    
    
      <category term="API" scheme="https://wynter.wang/tags/API/"/>
    
      <category term="iOS" scheme="https://wynter.wang/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS-UIKit框架学习—UIDatePicker</title>
    <link href="https://wynter.wang/2017/03/08/iOS-UIKit%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E2%80%94UIDatePicker/"/>
    <id>https://wynter.wang/2017/03/08/iOS-UIKit框架学习—UIDatePicker/</id>
    <published>2017-03-08T08:22:03.000Z</published>
    <updated>2017-03-08T08:38:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>UIDatePicker类实现了一个对象，它使用多个旋转的车轮，以允许用户选择日期和时间。iPhone的例子是一个日期选择器，定时器和闹钟设置闹钟的时钟应用程序中的窗格。您也可以使用日期选择器作为一个倒数计时器。<br><a id="more"></a></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NS_CLASS_AVAILABLE_IOS</span>(<span class="number">2</span>_0) __TVOS_PROHIBITED <span class="class"><span class="keyword">@interface</span> <span class="title">UIDatePicker</span> : <span class="title">UIControl</span> &lt;<span class="title">NSCoding</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">// DatePicker模式 默认值UIDatePickerModeDateAndTime</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) <span class="built_in">UIDatePickerMode</span> datePickerMode;</div><div class="line"><span class="comment">// 设置日期选择器的范围 默认值 [NSLocale currentLocale]</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>, <span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSLocale</span>   *locale;</div><div class="line"><span class="comment">// 要使用日期选择器的日历 默认值 [NSCalendar currentCalendar]</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">null_resettable</span>, <span class="keyword">nonatomic</span>, <span class="keyword">copy</span>)   <span class="built_in">NSCalendar</span> *calendar;</div><div class="line"><span class="comment">// 使用当前时区或时区从日历</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>, <span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSTimeZone</span> *timeZone;</div><div class="line"><span class="comment">// 日期选取器所显示的日期</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSDate</span> *date;</div><div class="line"><span class="comment">// 日期选择器可以选择的最小日期</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>, <span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSDate</span> *minimumDate;</div><div class="line"><span class="comment">// 日期选择器可以选择的最大日期</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>, <span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSDate</span> *maximumDate;</div><div class="line"><span class="comment">// 当属性设置为UIDatePickerModeCountDownTimer模式是时间选择器上的值</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) <span class="built_in">NSTimeInterval</span> countDownDuration;</div><div class="line"><span class="comment">// 设置时间间隔的选择器，应为显示为分钟。最小1 最大30</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) <span class="built_in">NSInteger</span>      minuteInterval;</div><div class="line"><span class="comment">// 设置带动画时间选择的的值</span></div><div class="line">- (<span class="keyword">void</span>)setDate:(<span class="built_in">NSDate</span> *)date animated:(<span class="built_in">BOOL</span>)animated;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// DatePicker模式</span></div><div class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span>(<span class="built_in">NSInteger</span>, <span class="built_in">UIDatePickerMode</span>) &#123;</div><div class="line">    <span class="built_in">UIDatePickerModeTime</span>,           <span class="comment">// 显示设置时分上、下午 (e.g. 6 | 53 | PM)</span></div><div class="line">    <span class="built_in">UIDatePickerModeDate</span>,           <span class="comment">// 显示年月日 (e.g. November | 15 | 2007)</span></div><div class="line">    <span class="built_in">UIDatePickerModeDateAndTime</span>,    <span class="comment">// 显示年月日时上、下午 (e.g. Wed Nov 15 | 6 | 53 | PM)</span></div><div class="line">    <span class="built_in">UIDatePickerModeCountDownTimer</span>, <span class="comment">// 显示时分 (e.g. 1 | 53)</span></div><div class="line">&#125; __TVOS_PROHIBITED;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;UIDatePicker类实现了一个对象，它使用多个旋转的车轮，以允许用户选择日期和时间。iPhone的例子是一个日期选择器，定时器和闹钟设置闹钟的时钟应用程序中的窗格。您也可以使用日期选择器作为一个倒数计时器。&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://wynter.wang/categories/iOS/"/>
    
    
      <category term="API" scheme="https://wynter.wang/tags/API/"/>
    
      <category term="iOS" scheme="https://wynter.wang/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS-UIKit框架学习—UIButton</title>
    <link href="https://wynter.wang/2017/03/08/iOS-UIKit%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E2%80%94UIButton/"/>
    <id>https://wynter.wang/2017/03/08/iOS-UIKit框架学习—UIButton/</id>
    <published>2017-03-08T08:21:40.000Z</published>
    <updated>2017-03-08T08:39:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>UIButton的类的一个实例，实现了在触摸屏上的按钮。触摸一个按钮拦截事件和动作消息发送到目标对象时。设定的目<br>和行动方法都继承自UIControl。这个类提供了方法来设置标题，图像，按钮等外观属性。通过这些访问，您可以为每个按钮状态指定一个不同的外观。</p><a id="more"></a><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NS_CLASS_AVAILABLE_IOS</span>(<span class="number">2</span>_0) <span class="class"><span class="keyword">@interface</span> <span class="title">UIButton</span> : <span class="title">UIControl</span> &lt;<span class="title">NSCoding</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">// 设置按钮类型</span></div><div class="line">+ (<span class="keyword">instancetype</span>)buttonWithType:(<span class="built_in">UIButtonType</span>)buttonType;</div><div class="line"><span class="comment">// 按钮内容与边缘的距离</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>)          <span class="built_in">UIEdgeInsets</span> contentEdgeInsets <span class="built_in">UI_APPEARANCE_SELECTOR</span>;</div><div class="line"><span class="comment">// 设置标题与边缘或插图的距离</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>)          <span class="built_in">UIEdgeInsets</span> titleEdgeInsets;</div><div class="line"><span class="comment">// 当按钮Highlighted状态时是否标题阴影更加突出</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>)          <span class="built_in">BOOL</span>         reversesTitleShadowWhenHighlighted;</div><div class="line"><span class="comment">// 图片与边缘的距离</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>)          <span class="built_in">UIEdgeInsets</span> imageEdgeInsets;</div><div class="line"><span class="comment">// 当按钮Highlighted状态时是否图片突出 默认值YES</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>)          <span class="built_in">BOOL</span>         adjustsImageWhenHighlighted;</div><div class="line"><span class="comment">// 当按钮Disabled状态时是否改变图片</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>)          <span class="built_in">BOOL</span>         adjustsImageWhenDisabled;</div><div class="line"><span class="comment">// 点击按钮是否有高亮效果 默认值NO</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>)          <span class="built_in">BOOL</span>         showsTouchWhenHighlighted __TVOS_PROHIBITED;</div><div class="line"><span class="comment">// 要应用到的按钮标题和图像的色调颜色</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">null_resettable</span>, <span class="keyword">nonatomic</span>,<span class="keyword">strong</span>)   <span class="built_in">UIColor</span>     *tintColor <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">5</span>_0);</div><div class="line"><span class="comment">// 按钮类型</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>,<span class="keyword">readonly</span>) <span class="built_in">UIButtonType</span> buttonType;</div><div class="line"><span class="comment">// 设置指定状态下的按钮标题</span></div><div class="line">- (<span class="keyword">void</span>)setTitle:(<span class="keyword">nullable</span> <span class="built_in">NSString</span> *)title forState:(<span class="built_in">UIControlState</span>)state;</div><div class="line"><span class="comment">// 设置指定状态下按钮标题的颜色</span></div><div class="line">- (<span class="keyword">void</span>)setTitleColor:(<span class="keyword">nullable</span> <span class="built_in">UIColor</span> *)color forState:(<span class="built_in">UIControlState</span>)state <span class="built_in">UI_APPEARANCE_SELECTOR</span>;</div><div class="line"><span class="comment">// 设置指定状态下按钮阴影的颜色</span></div><div class="line">- (<span class="keyword">void</span>)setTitleShadowColor:(<span class="keyword">nullable</span> <span class="built_in">UIColor</span> *)color forState:(<span class="built_in">UIControlState</span>)state <span class="built_in">UI_APPEARANCE_SELECTOR</span>;</div><div class="line"><span class="comment">// 设置指定状态下按钮的图片</span></div><div class="line">- (<span class="keyword">void</span>)setImage:(<span class="keyword">nullable</span> <span class="built_in">UIImage</span> *)image forState:(<span class="built_in">UIControlState</span>)state;</div><div class="line"><span class="comment">// 设置指定状态下按钮的背景图片</span></div><div class="line">- (<span class="keyword">void</span>)setBackgroundImage:(<span class="keyword">nullable</span> <span class="built_in">UIImage</span> *)image forState:(<span class="built_in">UIControlState</span>)state <span class="built_in">UI_APPEARANCE_SELECTOR</span>;</div><div class="line"><span class="comment">// 设置指定状态下按钮的属性标题</span></div><div class="line">- (<span class="keyword">void</span>)setAttributedTitle:(<span class="keyword">nullable</span> <span class="built_in">NSAttributedString</span> *)title forState:(<span class="built_in">UIControlState</span>)state <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">6</span>_0);</div><div class="line"><span class="comment">// 获取指定状态下按钮标题</span></div><div class="line">- (<span class="keyword">nullable</span> <span class="built_in">NSString</span> *)titleForState:(<span class="built_in">UIControlState</span>)state;</div><div class="line"><span class="comment">// 获取指定状态下按钮标题颜色</span></div><div class="line">- (<span class="keyword">nullable</span> <span class="built_in">UIColor</span> *)titleColorForState:(<span class="built_in">UIControlState</span>)state;</div><div class="line"><span class="comment">// 获取指定状态下按钮阴影颜色</span></div><div class="line">- (<span class="keyword">nullable</span> <span class="built_in">UIColor</span> *)titleShadowColorForState:(<span class="built_in">UIControlState</span>)state;</div><div class="line"><span class="comment">// 获取指定状态下按钮图片</span></div><div class="line">- (<span class="keyword">nullable</span> <span class="built_in">UIImage</span> *)imageForState:(<span class="built_in">UIControlState</span>)state;</div><div class="line"><span class="comment">// 获取指定状态下按钮背景图片</span></div><div class="line">- (<span class="keyword">nullable</span> <span class="built_in">UIImage</span> *)backgroundImageForState:(<span class="built_in">UIControlState</span>)state;</div><div class="line"><span class="comment">// 获取指定状态下按钮标题属性</span></div><div class="line">- (<span class="keyword">nullable</span> <span class="built_in">NSAttributedString</span> *)attributedTitleForState:(<span class="built_in">UIControlState</span>)state <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">6</span>_0);</div><div class="line"><span class="comment">// 获取当前按钮的标题</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nullable</span>, <span class="keyword">nonatomic</span>,<span class="keyword">readonly</span>,<span class="keyword">strong</span>) <span class="built_in">NSString</span> *currentTitle;</div><div class="line"><span class="comment">// 获取当前按钮标题颜色</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>,<span class="keyword">readonly</span>,<span class="keyword">strong</span>) <span class="built_in">UIColor</span>  *currentTitleColor;</div><div class="line"><span class="comment">// 获取当前按钮阴影边框的颜色</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nullable</span>, <span class="keyword">nonatomic</span>,<span class="keyword">readonly</span>,<span class="keyword">strong</span>) <span class="built_in">UIColor</span>  *currentTitleShadowColor;</div><div class="line"><span class="comment">// 获取当前按钮的图片</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nullable</span>, <span class="keyword">nonatomic</span>,<span class="keyword">readonly</span>,<span class="keyword">strong</span>) <span class="built_in">UIImage</span>  *currentImage;</div><div class="line"><span class="comment">// 获取当前按钮背景图片</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nullable</span>, <span class="keyword">nonatomic</span>,<span class="keyword">readonly</span>,<span class="keyword">strong</span>) <span class="built_in">UIImage</span>  *currentBackgroundImage;</div><div class="line"><span class="comment">// 获取当前按钮标题属性</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nullable</span>, <span class="keyword">nonatomic</span>,<span class="keyword">readonly</span>,<span class="keyword">strong</span>) <span class="built_in">NSAttributedString</span> *currentAttributedTitle <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">6</span>_0);</div><div class="line"></div><div class="line"><span class="comment">// 获取当前按钮标题Label</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nullable</span>, <span class="keyword">nonatomic</span>,<span class="keyword">readonly</span>,<span class="keyword">strong</span>) <span class="built_in">UILabel</span>     *titleLabel <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">3</span>_0);</div><div class="line"><span class="comment">// 获取当前按钮的imageView</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nullable</span>, <span class="keyword">nonatomic</span>,<span class="keyword">readonly</span>,<span class="keyword">strong</span>) <span class="built_in">UIImageView</span> *imageView  <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">3</span>_0);</div><div class="line"><span class="comment">// 返回按钮的背景的CGRect</span></div><div class="line">- (<span class="built_in">CGRect</span>)backgroundRectForBounds:(<span class="built_in">CGRect</span>)bounds;</div><div class="line"><span class="comment">// 返回按钮内容的CGRect</span></div><div class="line">- (<span class="built_in">CGRect</span>)contentRectForBounds:(<span class="built_in">CGRect</span>)bounds;</div><div class="line"><span class="comment">// 返回按钮标题内容的CGRect</span></div><div class="line">- (<span class="built_in">CGRect</span>)titleRectForContentRect:(<span class="built_in">CGRect</span>)contentRect;</div><div class="line"><span class="comment">// 返回按钮image的CGRect</span></div><div class="line">- (<span class="built_in">CGRect</span>)imageRectForContentRect:(<span class="built_in">CGRect</span>)contentRect;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 按钮风格类型</span></div><div class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span>(<span class="built_in">NSInteger</span>, <span class="built_in">UIButtonType</span>) &#123;</div><div class="line">    <span class="built_in">UIButtonTypeCustom</span> = <span class="number">0</span>,                         <span class="comment">// 自定义类型无样式</span></div><div class="line">    <span class="built_in">UIButtonTypeSystem</span> <span class="built_in">NS_ENUM_AVAILABLE_IOS</span>(<span class="number">7</span>_0),  <span class="comment">// 系统类型</span></div><div class="line">    <span class="built_in">UIButtonTypeDetailDisclosure</span>, <span class="comment">// 蓝色小箭头按钮，主要做详细说明用</span></div><div class="line">    <span class="built_in">UIButtonTypeInfoLight</span>,  <span class="comment">// 亮色感叹号</span></div><div class="line">    <span class="built_in">UIButtonTypeInfoDark</span>,   <span class="comment">// 暗色感叹号</span></div><div class="line">    <span class="built_in">UIButtonTypeContactAdd</span>, <span class="comment">//  十字加号按钮</span></div><div class="line">    <span class="built_in">UIButtonTypeRoundedRect</span> = <span class="built_in">UIButtonTypeSystem</span>,   <span class="comment">// 圆角矩形</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;UIButton的类的一个实例，实现了在触摸屏上的按钮。触摸一个按钮拦截事件和动作消息发送到目标对象时。设定的目&lt;br&gt;和行动方法都继承自UIControl。这个类提供了方法来设置标题，图像，按钮等外观属性。通过这些访问，您可以为每个按钮状态指定一个不同的外观。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://wynter.wang/categories/iOS/"/>
    
    
      <category term="API" scheme="https://wynter.wang/tags/API/"/>
    
      <category term="iOS" scheme="https://wynter.wang/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS-UIKit框架学习—UIControl</title>
    <link href="https://wynter.wang/2017/03/08/iOS-UIKit%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E2%80%94UIControl/"/>
    <id>https://wynter.wang/2017/03/08/iOS-UIKit框架学习—UIControl/</id>
    <published>2017-03-08T08:21:13.000Z</published>
    <updated>2017-03-08T08:38:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>UIControl是为控制对象，如用户的意图传达到应用程序的按钮和滑块的基类。你不能直接使用UIControl类实例化控制。相反，它定义了共同的界面和它的所有子类的行为结构。<br><a id="more"></a></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NS_CLASS_AVAILABLE_IOS</span>(<span class="number">2</span>_0) <span class="class"><span class="keyword">@interface</span> <span class="title">UIControl</span> : <span class="title">UIView</span></span></div><div class="line"></div><div class="line"><span class="comment">// 触摸事件是否可用 默认值YES</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>,<span class="keyword">getter</span>=isEnabled) <span class="built_in">BOOL</span> enabled;</div><div class="line"><span class="comment">// 是否选中 默认值NO</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>,<span class="keyword">getter</span>=isSelected) <span class="built_in">BOOL</span> selected;</div><div class="line"><span class="comment">// 是否高亮 默认值NO</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>,<span class="keyword">getter</span>=isHighlighted) <span class="built_in">BOOL</span> highlighted;</div><div class="line"><span class="comment">// 内容垂直对齐方式 默认值中心对齐</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>) <span class="built_in">UIControlContentVerticalAlignment</span> contentVerticalAlignment;</div><div class="line"><span class="comment">// 内容水平对齐方式 默认值中心对齐</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>) <span class="built_in">UIControlContentHorizontalAlignment</span> contentHorizontalAlignment;</div><div class="line"><span class="comment">// 状态</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>,<span class="keyword">readonly</span>) <span class="built_in">UIControlState</span> state;</div><div class="line"><span class="comment">// 是否跟踪当前触摸事件</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>,<span class="keyword">readonly</span>,<span class="keyword">getter</span>=isTracking) <span class="built_in">BOOL</span> tracking;</div><div class="line"><span class="comment">// 跟踪是否在当前触摸范围内</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>,<span class="keyword">readonly</span>,<span class="keyword">getter</span>=isTouchInside) <span class="built_in">BOOL</span> touchInside;</div><div class="line"><span class="comment">// 开始跟踪触摸事件</span></div><div class="line">- (<span class="built_in">BOOL</span>)beginTrackingWithTouch:(<span class="built_in">UITouch</span> *)touch withEvent:(<span class="keyword">nullable</span> <span class="built_in">UIEvent</span> *)event;</div><div class="line"><span class="comment">// 当触摸事件关联控件时调用更新</span></div><div class="line">- (<span class="built_in">BOOL</span>)continueTrackingWithTouch:(<span class="built_in">UITouch</span> *)touch withEvent:(<span class="keyword">nullable</span> <span class="built_in">UIEvent</span> *)event;</div><div class="line"><span class="comment">// 结束跟踪触摸事件</span></div><div class="line">- (<span class="keyword">void</span>)endTrackingWithTouch:(<span class="keyword">nullable</span> <span class="built_in">UITouch</span> *)touch withEvent:(<span class="keyword">nullable</span> <span class="built_in">UIEvent</span> *)event;</div><div class="line"><span class="comment">// 取消触摸事件</span></div><div class="line">- (<span class="keyword">void</span>)cancelTrackingWithEvent:(<span class="keyword">nullable</span> <span class="built_in">UIEvent</span> *)event;</div><div class="line"><span class="comment">// 将目标控件和操作方法与该控件相关联</span></div><div class="line">- (<span class="keyword">void</span>)addTarget:(<span class="keyword">nullable</span> <span class="keyword">id</span>)target action:(SEL)action forControlEvents:(<span class="built_in">UIControlEvents</span>)controlEvents;</div><div class="line"><span class="comment">// 移除目标控件和操作方法</span></div><div class="line">- (<span class="keyword">void</span>)removeTarget:(<span class="keyword">nullable</span> <span class="keyword">id</span>)target action:(<span class="keyword">nullable</span> SEL)action forControlEvents:(<span class="built_in">UIControlEvents</span>)controlEvents;</div><div class="line"></div><div class="line"><span class="comment">// 返回全部与该控件相关的对象</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>,<span class="keyword">readonly</span>) <span class="built_in">NSSet</span> *allTargets;</div><div class="line"><span class="comment">// 返回与控件相关的操作事件</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>,<span class="keyword">readonly</span>) <span class="built_in">UIControlEvents</span> allControlEvents;</div><div class="line"></div><div class="line"><span class="comment">// 返回指定对象发生操作时的字符串名称数组</span></div><div class="line">- (<span class="keyword">nullable</span> <span class="built_in">NSArray</span>&lt;<span class="built_in">NSString</span> *&gt; *)actionsForTarget:(<span class="keyword">nullable</span> <span class="keyword">id</span>)target forControlEvent:(<span class="built_in">UIControlEvents</span>)controlEvent;</div><div class="line"><span class="comment">// 调用指定的操作事件</span></div><div class="line">- (<span class="keyword">void</span>)sendAction:(SEL)action to:(<span class="keyword">nullable</span> <span class="keyword">id</span>)target forEvent:(<span class="keyword">nullable</span> <span class="built_in">UIEvent</span> *)event;</div><div class="line"><span class="comment">// 发送与控件相关的全部事件</span></div><div class="line">- (<span class="keyword">void</span>)sendActionsForControlEvents:(<span class="built_in">UIControlEvents</span>)controlEvents;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="built_in">NS_OPTIONS</span>(<span class="built_in">NSUInteger</span>, <span class="built_in">UIControlEvents</span>) &#123;</div><div class="line">    <span class="built_in">UIControlEventTouchDown</span>                                         = <span class="number">1</span> &lt;&lt;  <span class="number">0</span>,      <span class="comment">// 单点触摸按下事件</span></div><div class="line">    <span class="built_in">UIControlEventTouchDownRepeat</span>                                   = <span class="number">1</span> &lt;&lt;  <span class="number">1</span>,      <span class="comment">// 多点触摸按下事件 (触摸数 &gt; 1)</span></div><div class="line">    <span class="built_in">UIControlEventTouchDragInside</span>                                   = <span class="number">1</span> &lt;&lt;  <span class="number">2</span>, <span class="comment">// 触摸在控件窗口内拖动</span></div><div class="line">    <span class="built_in">UIControlEventTouchDragOutside</span>                                  = <span class="number">1</span> &lt;&lt;  <span class="number">3</span>, <span class="comment">// 触摸在控件窗口之外拖动</span></div><div class="line">    <span class="built_in">UIControlEventTouchDragEnter</span>                                    = <span class="number">1</span> &lt;&lt;  <span class="number">4</span>, <span class="comment">// 触摸从控件窗口之外拖动到内部</span></div><div class="line">    <span class="built_in">UIControlEventTouchDragExit</span>                                     = <span class="number">1</span> &lt;&lt;  <span class="number">5</span>, <span class="comment">// 触摸从控件窗口内部拖动到外部</span></div><div class="line">    <span class="built_in">UIControlEventTouchUpInside</span>                                     = <span class="number">1</span> &lt;&lt;  <span class="number">6</span>, <span class="comment">// 所有在控件之内触摸抬起事件</span></div><div class="line">    <span class="built_in">UIControlEventTouchUpOutside</span>                                    = <span class="number">1</span> &lt;&lt;  <span class="number">7</span>, <span class="comment">// 所有在控件之外触摸抬起事件</span></div><div class="line">    <span class="built_in">UIControlEventTouchCancel</span>                                       = <span class="number">1</span> &lt;&lt;  <span class="number">8</span>, <span class="comment">// 所有触摸取消事件</span></div><div class="line">    <span class="built_in">UIControlEventValueChanged</span>                                      = <span class="number">1</span> &lt;&lt; <span class="number">12</span>,     <span class="comment">// 当控件的值发生改变时，发送通知</span></div><div class="line">    <span class="built_in">UIControlEventPrimaryActionTriggered</span> <span class="built_in">NS_ENUM_AVAILABLE_IOS</span>(<span class="number">9</span>_0) = <span class="number">1</span> &lt;&lt; <span class="number">13</span>,     <span class="comment">// semantic action: for buttons, etc.</span></div><div class="line">    </div><div class="line">    <span class="built_in">UIControlEventEditingDidBegin</span>                                   = <span class="number">1</span> &lt;&lt; <span class="number">16</span>,     <span class="comment">// 当文本控件中开始编辑时发送通知</span></div><div class="line">    <span class="built_in">UIControlEventEditingChanged</span>                                    = <span class="number">1</span> &lt;&lt; <span class="number">17</span>, <span class="comment">// 当文本控件中的文本被改变时发送通知</span></div><div class="line">    <span class="built_in">UIControlEventEditingDidEnd</span>                                     = <span class="number">1</span> &lt;&lt; <span class="number">18</span>, <span class="comment">// 当文本控件中编辑结束时发送通知</span></div><div class="line">    <span class="built_in">UIControlEventEditingDidEndOnExit</span>                               = <span class="number">1</span> &lt;&lt; <span class="number">19</span>,     <span class="comment">// 当文本控件内通过按下回车键（或等价行为）结束编辑时，发送通知</span></div><div class="line">    </div><div class="line">    <span class="built_in">UIControlEventAllTouchEvents</span>                                    = <span class="number">0x00000FFF</span>,  <span class="comment">// 通知所有触摸事件</span></div><div class="line">    <span class="built_in">UIControlEventAllEditingEvents</span>                                  = <span class="number">0x000F0000</span>,  <span class="comment">// 通知所有关于文本编辑的事件</span></div><div class="line">    <span class="built_in">UIControlEventApplicationReserved</span>                               = <span class="number">0x0F000000</span>,  <span class="comment">// 通知应用内所有可用的事件</span></div><div class="line">    <span class="built_in">UIControlEventSystemReserved</span>                                    = <span class="number">0xF0000000</span>,  <span class="comment">// 通知系统内可用的事件</span></div><div class="line">    <span class="built_in">UIControlEventAllEvents</span>                                         = <span class="number">0xFFFFFFFF</span> <span class="comment">// 通知所有事件</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 内容垂直对齐方式</span></div><div class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span>(<span class="built_in">NSInteger</span>, <span class="built_in">UIControlContentVerticalAlignment</span>) &#123;</div><div class="line">    <span class="built_in">UIControlContentVerticalAlignmentCenter</span>  = <span class="number">0</span>,</div><div class="line">    <span class="built_in">UIControlContentVerticalAlignmentTop</span>     = <span class="number">1</span>,</div><div class="line">    <span class="built_in">UIControlContentVerticalAlignmentBottom</span>  = <span class="number">2</span>,</div><div class="line">    <span class="built_in">UIControlContentVerticalAlignmentFill</span>    = <span class="number">3</span>,</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 内容水平对齐方式</span></div><div class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span>(<span class="built_in">NSInteger</span>, <span class="built_in">UIControlContentHorizontalAlignment</span>) &#123;</div><div class="line">    <span class="built_in">UIControlContentHorizontalAlignmentCenter</span> = <span class="number">0</span>,</div><div class="line">    <span class="built_in">UIControlContentHorizontalAlignmentLeft</span>   = <span class="number">1</span>,</div><div class="line">    <span class="built_in">UIControlContentHorizontalAlignmentRight</span>  = <span class="number">2</span>,</div><div class="line">    <span class="built_in">UIControlContentHorizontalAlignmentFill</span>   = <span class="number">3</span>,</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// UIControl状态</span></div><div class="line"><span class="keyword">typedef</span> <span class="built_in">NS_OPTIONS</span>(<span class="built_in">NSUInteger</span>, <span class="built_in">UIControlState</span>) &#123;</div><div class="line">    <span class="built_in">UIControlStateNormal</span>       = <span class="number">0</span>,</div><div class="line">    <span class="built_in">UIControlStateHighlighted</span>  = <span class="number">1</span> &lt;&lt; <span class="number">0</span>,                  <span class="comment">// 高亮状态</span></div><div class="line">    <span class="built_in">UIControlStateDisabled</span>     = <span class="number">1</span> &lt;&lt; <span class="number">1</span>,                  <span class="comment">// 禁用</span></div><div class="line">    <span class="built_in">UIControlStateSelected</span>     = <span class="number">1</span> &lt;&lt; <span class="number">2</span>,                  <span class="comment">// 选中</span></div><div class="line">    <span class="built_in">UIControlStateFocused</span> <span class="built_in">NS_ENUM_AVAILABLE_IOS</span>(<span class="number">9</span>_0) = <span class="number">1</span> &lt;&lt; <span class="number">3</span>, <span class="comment">// 长按聚焦</span></div><div class="line">    <span class="built_in">UIControlStateApplication</span>  = <span class="number">0x00FF0000</span>,              <span class="comment">// 应用状态可用</span></div><div class="line">    <span class="built_in">UIControlStateReserved</span>     = <span class="number">0xFF000000</span>               <span class="comment">// 保留</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;UIControl是为控制对象，如用户的意图传达到应用程序的按钮和滑块的基类。你不能直接使用UIControl类实例化控制。相反，它定义了共同的界面和它的所有子类的行为结构。&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://wynter.wang/categories/iOS/"/>
    
    
      <category term="API" scheme="https://wynter.wang/tags/API/"/>
    
      <category term="iOS" scheme="https://wynter.wang/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS-UIKit框架学习—UIWebView</title>
    <link href="https://wynter.wang/2017/02/28/iOS-UIKit%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E2%80%94UIWebView/"/>
    <id>https://wynter.wang/2017/02/28/iOS-UIKit框架学习—UIWebView/</id>
    <published>2017-02-28T06:44:03.000Z</published>
    <updated>2017-03-08T08:39:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>您使用了UIWebView类，在您的应用程序中嵌入网页内容。要做到这一点，你只需创建一个UIWebView对象，将它附加到一个窗口，它发送一个请求加载网页内容。您也可以使用这个类在网页的历史向前和向后移动，你甚至可以设置一些网页内容属性的编程。<br><a id="more"></a></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@class</span> <span class="title">UIWebViewInternal</span>;</span></div><div class="line"><span class="class"><span class="keyword">@protocol</span> <span class="title">UIWebViewDelegate</span>;</span></div><div class="line"></div><div class="line"><span class="built_in">NS_CLASS_AVAILABLE_IOS</span>(<span class="number">2</span>_0) __TVOS_PROHIBITED <span class="class"><span class="keyword">@interface</span> <span class="title">UIWebView</span> : <span class="title">UIView</span> &lt;<span class="title">NSCoding</span>, <span class="title">UIScrollViewDelegate</span>&gt;</span></div><div class="line"><span class="comment">// 代理</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>, <span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="keyword">id</span> &lt;<span class="built_in">UIWebViewDelegate</span>&gt; delegate;</div><div class="line"><span class="comment">// scrollView属性</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>, <span class="keyword">strong</span>) <span class="built_in">UIScrollView</span> *scrollView <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">5</span>_0);</div><div class="line"><span class="comment">// 加载URL请求链接</span></div><div class="line">- (<span class="keyword">void</span>)loadRequest:(<span class="built_in">NSURLRequest</span> *)request;</div><div class="line"><span class="comment">// 加载本地html字符串网页</span></div><div class="line">- (<span class="keyword">void</span>)loadHTMLString:(<span class="built_in">NSString</span> *)string baseURL:(<span class="keyword">nullable</span> <span class="built_in">NSURL</span> *)baseURL;</div><div class="line"><span class="comment">// 加载本地NSData数据网页</span></div><div class="line">- (<span class="keyword">void</span>)loadData:(<span class="built_in">NSData</span> *)data MIMEType:(<span class="built_in">NSString</span> *)MIMEType textEncodingName:(<span class="built_in">NSString</span> *)textEncodingName baseURL:(<span class="built_in">NSURL</span> *)baseURL;</div><div class="line"><span class="comment">// URL请求</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>, <span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>, <span class="keyword">strong</span>) <span class="built_in">NSURLRequest</span> *request;</div><div class="line"><span class="comment">// 重载</span></div><div class="line">- (<span class="keyword">void</span>)reload;</div><div class="line"><span class="comment">// 停止加载</span></div><div class="line">- (<span class="keyword">void</span>)stopLoading;</div><div class="line"><span class="comment">// 后退到上一个界面</span></div><div class="line">- (<span class="keyword">void</span>)goBack;</div><div class="line"><span class="comment">// 前进到一个之前到过页面</span></div><div class="line">- (<span class="keyword">void</span>)goForward;</div><div class="line"><span class="comment">// 是否可以后退</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>, <span class="keyword">getter</span>=canGoBack) <span class="built_in">BOOL</span> canGoBack;</div><div class="line"><span class="comment">// 是否可以前进</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>, <span class="keyword">getter</span>=canGoForward) <span class="built_in">BOOL</span> canGoForward;</div><div class="line"><span class="comment">// 是否正在加载</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>, <span class="keyword">getter</span>=isLoading) <span class="built_in">BOOL</span> loading;</div><div class="line"><span class="comment">// 加载完成后调动，通过它可以很方便的操作UIWebView中的页面元素。参数script用来传进当前页面文件元素字符串，对传进来的字符串进行相应的操作</span></div><div class="line">- (<span class="keyword">nullable</span> <span class="built_in">NSString</span> *)stringByEvaluatingJavaScriptFromString:(<span class="built_in">NSString</span> *)script;</div><div class="line"><span class="comment">// 是否将页面内容缩放到当前屏幕适合的尺寸</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) <span class="built_in">BOOL</span> scalesPageToFit;</div><div class="line"><span class="comment">// 网页内容可识别类型，如邮箱、电话、网址</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) <span class="built_in">UIDataDetectorTypes</span> dataDetectorTypes <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">3</span>_0);</div><div class="line"><span class="comment">// 是否使用网页内嵌的视频播放。为了内嵌视频播放，不仅仅需要在这个页面上设置这个属性，还需要在HTML的viedeo元素必须包含webkit-playsinline属性 iPhone默认值NO，iPad默认值是YES</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) <span class="built_in">BOOL</span> allowsInlineMediaPlayback <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">4</span>_0);</div><div class="line"><span class="comment">// 是否自动播放视频还是用户手动播放视频 默认值是YES</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) <span class="built_in">BOOL</span> mediaPlaybackRequiresUserAction <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">4</span>_0);</div><div class="line"><span class="comment">// 是否支持Air Play播放 默认值是YES</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) <span class="built_in">BOOL</span> mediaPlaybackAllowsAirPlay <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">5</span>_0);</div><div class="line"><span class="comment">// 是否把网页渲染全部加载到内存中去处理 默认值是NO</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) <span class="built_in">BOOL</span> suppressesIncrementalRendering <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">6</span>_0);</div><div class="line"><span class="comment">// 是否必须用户操作输入控件才会显示键盘 默认值是YES</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) <span class="built_in">BOOL</span> keyboardDisplayRequiresUserAction <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">6</span>_0);</div><div class="line"><span class="comment">// 设置页面分页模型</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) <span class="built_in">UIWebPaginationMode</span> paginationMode <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">7</span>_0);</div><div class="line"><span class="comment">// CSS采用的页面模式</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) <span class="built_in">UIWebPaginationBreakingMode</span> paginationBreakingMode <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">7</span>_0);</div><div class="line"><span class="comment">// 页面的长度</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) <span class="built_in">CGFloat</span> pageLength <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">7</span>_0);</div><div class="line"><span class="comment">// 分页之间的差距</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) <span class="built_in">CGFloat</span> gapBetweenPages <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">7</span>_0);</div><div class="line"><span class="comment">// 页面个数</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) <span class="built_in">NSUInteger</span> pageCount <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">7</span>_0);</div><div class="line"><span class="comment">// 是否网页自带的照片浏览器</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) <span class="built_in">BOOL</span> allowsPictureInPictureMediaPlayback <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">9</span>_0);</div><div class="line"><span class="comment">// 按下连接是否显示连接的预览 默认值为NO</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) <span class="built_in">BOOL</span> allowsLinkPreview <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">9</span>_0);</div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line">__TVOS_PROHIBITED <span class="class"><span class="keyword">@protocol</span> <span class="title">UIWebViewDelegate</span> &lt;<span class="title">NSObject</span>&gt;</span></div><div class="line"></div><div class="line"><span class="keyword">@optional</span></div><div class="line"><span class="comment">// 当开始加载网页的时候调用，可以拦截一些用户操作行为，返回YES代表允许加载，否则反之</span></div><div class="line">- (<span class="built_in">BOOL</span>)webView:(<span class="built_in">UIWebView</span> *)webView shouldStartLoadWithRequest:(<span class="built_in">NSURLRequest</span> *)request navigationType:(<span class="built_in">UIWebViewNavigationType</span>)navigationType;</div><div class="line"><span class="comment">// 开始加载网页时调用</span></div><div class="line">- (<span class="keyword">void</span>)webViewDidStartLoad:(<span class="built_in">UIWebView</span> *)webView;</div><div class="line"><span class="comment">// 加载完成时调用</span></div><div class="line">- (<span class="keyword">void</span>)webViewDidFinishLoad:(<span class="built_in">UIWebView</span> *)webView;</div><div class="line"><span class="comment">// 加载出错时调用</span></div><div class="line">- (<span class="keyword">void</span>)webView:(<span class="built_in">UIWebView</span> *)webView didFailLoadWithError:(<span class="built_in">NSError</span> *)error;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">// 导航行为类型</div><div class="line">typedef NS_ENUM(NSInteger, UIWebViewNavigationType) &#123;</div><div class="line">    UIWebViewNavigationTypeLinkClicked, // 点击了链接</div><div class="line">    UIWebViewNavigationTypeFormSubmitted, // 提交表单</div><div class="line">    UIWebViewNavigationTypeBackForward, // 前进或返回</div><div class="line">    UIWebViewNavigationTypeReload, // 重载</div><div class="line">    UIWebViewNavigationTypeFormResubmitted, // 再次提交</div><div class="line">    UIWebViewNavigationTypeOther</div><div class="line">&#125; __TVOS_PROHIBITED;</div><div class="line"></div><div class="line">// 翻页效果</div><div class="line">typedef NS_ENUM(NSInteger, UIWebPaginationMode) &#123;</div><div class="line">    UIWebPaginationModeUnpaginated, // 无</div><div class="line">    UIWebPaginationModeLeftToRight, // 当内容超出View时，从左到右</div><div class="line">    UIWebPaginationModeTopToBottom, // 当内容超出View时，从顶部到底部</div><div class="line">    UIWebPaginationModeBottomToTop, // 当内容超出View时，从底部到顶部</div><div class="line">    UIWebPaginationModeRightToLeft  // 当内容超出View时，从右到左</div><div class="line">&#125; __TVOS_PROHIBITED;</div><div class="line"></div><div class="line">// 有css时页面样式类型</div><div class="line">typedef NS_ENUM(NSInteger, UIWebPaginationBreakingMode) &#123;</div><div class="line">    UIWebPaginationBreakingModePage, // 页面样式</div><div class="line">    UIWebPaginationBreakingModeColumn // 圆柱样式</div><div class="line">&#125; __TVOS_PROHIBITED;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;您使用了UIWebView类，在您的应用程序中嵌入网页内容。要做到这一点，你只需创建一个UIWebView对象，将它附加到一个窗口，它发送一个请求加载网页内容。您也可以使用这个类在网页的历史向前和向后移动，你甚至可以设置一些网页内容属性的编程。&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://wynter.wang/categories/iOS/"/>
    
    
      <category term="API" scheme="https://wynter.wang/tags/API/"/>
    
      <category term="iOS" scheme="https://wynter.wang/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS-UIKit框架学习—UISearchBar</title>
    <link href="https://wynter.wang/2017/02/28/iOS-UIKit%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E2%80%94UISearchBar/"/>
    <id>https://wynter.wang/2017/02/28/iOS-UIKit框架学习—UISearchBar/</id>
    <published>2017-02-28T06:42:59.000Z</published>
    <updated>2017-03-08T08:39:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>UISearchBar类实现一个基于文本的搜索的文本字段控制。该控件提供了一个搜索按钮，输入文字的文本字段书签“按钮，一个取消按钮。UISearchBar对象实际上并不执行任何搜索。您可以使用委托，符合UISearchBarDelegate协议的对象，实施行动时，输入文本和按钮被点击</p><a id="more"></a><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@protocol</span> <span class="title">UISearchBarDelegate</span>;</span></div><div class="line"><span class="built_in">NS_CLASS_AVAILABLE_IOS</span>(<span class="number">2</span>_0) <span class="class"><span class="keyword">@interface</span> <span class="title">UISearchBar</span> : <span class="title">UIView</span> &lt;<span class="title">UIBarPositioning</span>, <span class="title">UITextInputTraits</span>&gt;</span></div><div class="line"><span class="comment">// 初始化</span></div><div class="line">- (<span class="keyword">instancetype</span>)init __TVOS_PROHIBITED;</div><div class="line">- (<span class="keyword">instancetype</span>)initWithFrame:(<span class="built_in">CGRect</span>)frame <span class="built_in">NS_DESIGNATED_INITIALIZER</span> __TVOS_PROHIBITED;</div><div class="line">- (<span class="keyword">nullable</span> <span class="keyword">instancetype</span>)initWithCoder:(<span class="built_in">NSCoder</span> *)aDecoder <span class="built_in">NS_DESIGNATED_INITIALIZER</span> __TVOS_PROHIBITED;</div><div class="line"></div><div class="line"><span class="comment">// 搜索框的风格 默认蓝色</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>)        <span class="built_in">UIBarStyle</span>              barStyle __TVOS_PROHIBITED;</div><div class="line"><span class="comment">// 代理</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nullable</span>,<span class="keyword">nonatomic</span>,<span class="keyword">weak</span>) <span class="keyword">id</span>&lt;<span class="built_in">UISearchBarDelegate</span>&gt; delegate;</div><div class="line"><span class="comment">// 当前搜索的文本</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nullable</span>,<span class="keyword">nonatomic</span>,<span class="keyword">copy</span>)   <span class="built_in">NSString</span>               *text;</div><div class="line"><span class="comment">// 搜索栏顶部显示的单行文本</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nullable</span>,<span class="keyword">nonatomic</span>,<span class="keyword">copy</span>)   <span class="built_in">NSString</span>               *prompt;</div><div class="line"><span class="comment">// 占位符文本</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nullable</span>,<span class="keyword">nonatomic</span>,<span class="keyword">copy</span>)   <span class="built_in">NSString</span>               *placeholder;</div><div class="line"><span class="comment">// 是否展示标签按钮 默认为NO</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>)        <span class="built_in">BOOL</span>                    showsBookmarkButton __TVOS_PROHIBITED;</div><div class="line"><span class="comment">// 是否显示取消按钮 默认为NO</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>)        <span class="built_in">BOOL</span>                    showsCancelButton __TVOS_PROHIBITED;</div><div class="line"><span class="comment">// 是否显示搜索结果的按钮 默认为NO</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>)        <span class="built_in">BOOL</span>                    showsSearchResultsButton <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">3</span>_2) __TVOS_PROHIBITED;</div><div class="line"><span class="comment">// 是否选择搜索结果按钮</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>, <span class="keyword">getter</span>=isSearchResultsButtonSelected) <span class="built_in">BOOL</span> searchResultsButtonSelected <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">3</span>_2) __TVOS_PROHIBITED;</div><div class="line"><span class="comment">// 用动画设置取消按钮的显示</span></div><div class="line">- (<span class="keyword">void</span>)setShowsCancelButton:(<span class="built_in">BOOL</span>)showsCancelButton animated:(<span class="built_in">BOOL</span>)animated <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">3</span>_0) __TVOS_PROHIBITED;</div><div class="line"><span class="comment">// 用于配置键盘的输入助手</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>, <span class="keyword">strong</span>) <span class="built_in">UITextInputAssistantItem</span> *inputAssistantItem <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">9</span>_0) __TVOS_PROHIBITED __WATCHOS_PROHIBITED;</div><div class="line"><span class="comment">// 搜索栏中关键要素的背景底色</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">null_resettable</span>, <span class="keyword">nonatomic</span>,<span class="keyword">strong</span>) <span class="built_in">UIColor</span> *tintColor;</div><div class="line"><span class="comment">// 搜索栏的背景底色</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nullable</span>, <span class="keyword">nonatomic</span>,<span class="keyword">strong</span>) <span class="built_in">UIColor</span> *barTintColor <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">7</span>_0) <span class="built_in">UI_APPEARANCE_SELECTOR</span>;</div><div class="line"><span class="comment">// 搜索栏的风格</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) <span class="built_in">UISearchBarStyle</span> searchBarStyle <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">7</span>_0);</div><div class="line"><span class="comment">// 搜索是否半透明</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>,<span class="keyword">assign</span>,<span class="keyword">getter</span>=isTranslucent) <span class="built_in">BOOL</span> translucent <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">3</span>_0);</div><div class="line"><span class="comment">// 一个指示范围按钮标题的字符串的数组</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nullable</span>, <span class="keyword">nonatomic</span>,<span class="keyword">copy</span>) <span class="built_in">NSArray</span>&lt;<span class="built_in">NSString</span> *&gt;   *scopeButtonTitles        <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">3</span>_0);</div><div class="line"><span class="comment">// 选中指示按钮的下标</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>)      <span class="built_in">NSInteger</span>  selectedScopeButtonIndex <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">3</span>_0);</div><div class="line"><span class="comment">// 是否显示范围栏 默认值是NO</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>)      <span class="built_in">BOOL</span>       showsScopeBar            <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">3</span>_0);</div><div class="line"><span class="comment">// 自定义输入框附件视图</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>, <span class="keyword">nonatomic</span>, <span class="keyword">readwrite</span>, <span class="keyword">strong</span>) <span class="built_in">UIView</span> *inputAccessoryView;</div><div class="line"><span class="comment">// 设置搜索栏的背景图片</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nullable</span>, <span class="keyword">nonatomic</span>,<span class="keyword">strong</span>) <span class="built_in">UIImage</span> *backgroundImage <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">5</span>_0) <span class="built_in">UI_APPEARANCE_SELECTOR</span>;</div><div class="line"><span class="comment">// 设置范围栏的背景图片</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nullable</span>, <span class="keyword">nonatomic</span>,<span class="keyword">strong</span>) <span class="built_in">UIImage</span> *scopeBarBackgroundImage <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">5</span>_0) <span class="built_in">UI_APPEARANCE_SELECTOR</span>;</div><div class="line"></div><div class="line"><span class="comment">// 设置提示栏背景图片</span></div><div class="line">- (<span class="keyword">void</span>)setBackgroundImage:(<span class="keyword">nullable</span> <span class="built_in">UIImage</span> *)backgroundImage forBarPosition:(<span class="built_in">UIBarPosition</span>)barPosition barMetrics:(<span class="built_in">UIBarMetrics</span>)barMetrics <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">7</span>_0) <span class="built_in">UI_APPEARANCE_SELECTOR</span>;</div><div class="line"><span class="comment">// 返回提示栏的背景图片</span></div><div class="line">- (<span class="keyword">nullable</span> <span class="built_in">UIImage</span> *)backgroundImageForBarPosition:(<span class="built_in">UIBarPosition</span>)barPosition barMetrics:(<span class="built_in">UIBarMetrics</span>)barMetrics <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">7</span>_0) <span class="built_in">UI_APPEARANCE_SELECTOR</span>;</div><div class="line"><span class="comment">// 设置指定搜索文本的图片</span></div><div class="line">- (<span class="keyword">void</span>)setSearchFieldBackgroundImage:(<span class="keyword">nullable</span> <span class="built_in">UIImage</span> *)backgroundImage forState:(<span class="built_in">UIControlState</span>)state <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">5</span>_0) <span class="built_in">UI_APPEARANCE_SELECTOR</span>;</div><div class="line"><span class="comment">// 返回指定搜索文本的图片</span></div><div class="line">- (<span class="keyword">nullable</span> <span class="built_in">UIImage</span> *)searchFieldBackgroundImageForState:(<span class="built_in">UIControlState</span>)state <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">5</span>_0) <span class="built_in">UI_APPEARANCE_SELECTOR</span>;</div><div class="line"><span class="comment">// 设置搜索栏图标类型和控件状态图片</span></div><div class="line">- (<span class="keyword">void</span>)setImage:(<span class="keyword">nullable</span> <span class="built_in">UIImage</span> *)iconImage forSearchBarIcon:(<span class="built_in">UISearchBarIcon</span>)icon state:(<span class="built_in">UIControlState</span>)state <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">5</span>_0) <span class="built_in">UI_APPEARANCE_SELECTOR</span>;</div><div class="line"><span class="comment">// 返回给定搜索栏图标类型和控件状态的图像</span></div><div class="line">- (<span class="keyword">nullable</span> <span class="built_in">UIImage</span> *)imageForSearchBarIcon:(<span class="built_in">UISearchBarIcon</span>)icon state:(<span class="built_in">UIControlState</span>)state <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">5</span>_0) <span class="built_in">UI_APPEARANCE_SELECTOR</span>;</div><div class="line"><span class="comment">// 设置指定范围下按钮的背景图片</span></div><div class="line">- (<span class="keyword">void</span>)setScopeBarButtonBackgroundImage:(<span class="keyword">nullable</span> <span class="built_in">UIImage</span> *)backgroundImage forState:(<span class="built_in">UIControlState</span>)state <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">5</span>_0) <span class="built_in">UI_APPEARANCE_SELECTOR</span>;</div><div class="line"><span class="comment">// 返回指定状态下按钮的背景图片</span></div><div class="line">- (<span class="keyword">nullable</span> <span class="built_in">UIImage</span> *)scopeBarButtonBackgroundImageForState:(<span class="built_in">UIControlState</span>)state <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">5</span>_0) <span class="built_in">UI_APPEARANCE_SELECTOR</span>;</div><div class="line"><span class="comment">// 设置左右分段控制控件的状态及隔离器的图片</span></div><div class="line">- (<span class="keyword">void</span>)setScopeBarButtonDividerImage:(<span class="keyword">nullable</span> <span class="built_in">UIImage</span> *)dividerImage forLeftSegmentState:(<span class="built_in">UIControlState</span>)leftState rightSegmentState:(<span class="built_in">UIControlState</span>)rightState <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">5</span>_0) <span class="built_in">UI_APPEARANCE_SELECTOR</span>;</div><div class="line"><span class="comment">// 返回左右分段控制控件的隔离器的图片</span></div><div class="line">- (<span class="keyword">nullable</span> <span class="built_in">UIImage</span> *)scopeBarButtonDividerImageForLeftSegmentState:(<span class="built_in">UIControlState</span>)leftState rightSegmentState:(<span class="built_in">UIControlState</span>)rightState <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">5</span>_0) <span class="built_in">UI_APPEARANCE_SELECTOR</span>;</div><div class="line"><span class="comment">// 为给定状态的“搜索栏”按钮的标题字符串设置文本属性</span></div><div class="line">- (<span class="keyword">void</span>)setScopeBarButtonTitleTextAttributes:(<span class="keyword">nullable</span> <span class="built_in">NSDictionary</span>&lt;<span class="built_in">NSString</span> *, <span class="keyword">id</span>&gt; *)attributes forState:(<span class="built_in">UIControlState</span>)state <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">5</span>_0) <span class="built_in">UI_APPEARANCE_SELECTOR</span>;</div><div class="line"><span class="comment">// 返回给定状态的“搜索栏”按钮的文本属性</span></div><div class="line">- (<span class="keyword">nullable</span> <span class="built_in">NSDictionary</span>&lt;<span class="built_in">NSString</span> *, <span class="keyword">id</span>&gt; *)scopeBarButtonTitleTextAttributesForState:(<span class="built_in">UIControlState</span>)state <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">5</span>_0) <span class="built_in">UI_APPEARANCE_SELECTOR</span>;</div><div class="line"><span class="comment">// 搜索栏中搜索文本字段背景的偏移量</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>) <span class="built_in">UIOffset</span> searchFieldBackgroundPositionAdjustment <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">5</span>_0) <span class="built_in">UI_APPEARANCE_SELECTOR</span>;</div><div class="line"><span class="comment">// 搜索文本字段背景中文本的偏移量</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>) <span class="built_in">UIOffset</span> searchTextPositionAdjustment <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">5</span>_0) <span class="built_in">UI_APPEARANCE_SELECTOR</span>;</div><div class="line"><span class="comment">// 返回给定图标的位置调整</span></div><div class="line">- (<span class="keyword">void</span>)setPositionAdjustment:(<span class="built_in">UIOffset</span>)adjustment forSearchBarIcon:(<span class="built_in">UISearchBarIcon</span>)icon <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">5</span>_0) <span class="built_in">UI_APPEARANCE_SELECTOR</span>;</div><div class="line">- (<span class="built_in">UIOffset</span>)positionAdjustmentForSearchBarIcon:(<span class="built_in">UISearchBarIcon</span>)icon <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">5</span>_0) <span class="built_in">UI_APPEARANCE_SELECTOR</span>;</div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@protocol</span> <span class="title">UISearchBarDelegate</span> &lt;<span class="title">UIBarPositioningDelegate</span>&gt;</span></div><div class="line"></div><div class="line"><span class="keyword">@optional</span></div><div class="line"><span class="comment">// 是否在指定的搜索栏中编辑</span></div><div class="line">- (<span class="built_in">BOOL</span>)searchBarShouldBeginEditing:(<span class="built_in">UISearchBar</span> *)searchBar;</div><div class="line"><span class="comment">// 当用户开始编辑搜索文本时调用</span></div><div class="line">- (<span class="keyword">void</span>)searchBarTextDidBeginEditing:(<span class="built_in">UISearchBar</span> *)searchBar;</div><div class="line"><span class="comment">// 是否搜索文本编辑完成</span></div><div class="line">- (<span class="built_in">BOOL</span>)searchBarShouldEndEditing:(<span class="built_in">UISearchBar</span> *)searchBar;</div><div class="line"><span class="comment">// 当用用户编辑完成时调用</span></div><div class="line">- (<span class="keyword">void</span>)searchBarTextDidEndEditing:(<span class="built_in">UISearchBar</span> *)searchBar;</div><div class="line"><span class="comment">// 当文本发生变化时调用（包括清除）</span></div><div class="line">- (<span class="keyword">void</span>)searchBar:(<span class="built_in">UISearchBar</span> *)searchBar textDidChange:(<span class="built_in">NSString</span> *)searchText;</div><div class="line"><span class="comment">// 文本发生改变前调用</span></div><div class="line">- (<span class="built_in">BOOL</span>)searchBar:(<span class="built_in">UISearchBar</span> *)searchBar shouldChangeTextInRange:(<span class="built_in">NSRange</span>)range replacementText:(<span class="built_in">NSString</span> *)text <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">3</span>_0);</div><div class="line"><span class="comment">// 当按下键盘的搜索按钮时调用</span></div><div class="line">- (<span class="keyword">void</span>)searchBarSearchButtonClicked:(<span class="built_in">UISearchBar</span> *)searchBar;</div><div class="line"><span class="comment">// 当按下书签按钮时调用</span></div><div class="line">- (<span class="keyword">void</span>)searchBarBookmarkButtonClicked:(<span class="built_in">UISearchBar</span> *)searchBar __TVOS_PROHIBITED;</div><div class="line"><span class="comment">// 当按下取消按钮时调用</span></div><div class="line">- (<span class="keyword">void</span>)searchBarCancelButtonClicked:(<span class="built_in">UISearchBar</span> *)searchBar __TVOS_PROHIBITED;</div><div class="line"><span class="comment">// 当按下搜索结果按钮时调用</span></div><div class="line">- (<span class="keyword">void</span>)searchBarResultsListButtonClicked:(<span class="built_in">UISearchBar</span> *)searchBar <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">3</span>_2) __TVOS_PROHIBITED;</div><div class="line"><span class="comment">// 当范围选择按钮改变是调用</span></div><div class="line">- (<span class="keyword">void</span>)searchBar:(<span class="built_in">UISearchBar</span> *)searchBar selectedScopeButtonIndexDidChange:(<span class="built_in">NSInteger</span>)selectedScope <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">3</span>_0);</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 搜索框后的图标样式</span></div><div class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span>(<span class="built_in">NSInteger</span>, <span class="built_in">UISearchBarIcon</span>) &#123;</div><div class="line">    <span class="built_in">UISearchBarIconSearch</span>, <span class="comment">// 放大镜</span></div><div class="line">    <span class="built_in">UISearchBarIconClear</span> __TVOS_PROHIBITED, <span class="comment">// 有一个x的圆</span></div><div class="line">    <span class="built_in">UISearchBarIconBookmark</span> __TVOS_PROHIBITED, <span class="comment">// 打开书的图标</span></div><div class="line">    <span class="built_in">UISearchBarIconResultsList</span> __TVOS_PROHIBITED, <span class="comment">// 菱形图标列表</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 搜索框的风格</span></div><div class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span>(<span class="built_in">NSUInteger</span>, <span class="built_in">UISearchBarStyle</span>) &#123;</div><div class="line">    <span class="built_in">UISearchBarStyleDefault</span>,    <span class="comment">// currently UISearchBarStyleProminent</span></div><div class="line">    <span class="built_in">UISearchBarStyleProminent</span>,  <span class="comment">// 用于邮件、消息和联系人</span></div><div class="line">    <span class="built_in">UISearchBarStyleMinimal</span>     <span class="comment">// 用于日历、笔记和音乐</span></div><div class="line">&#125; <span class="built_in">NS_ENUM_AVAILABLE_IOS</span>(<span class="number">7</span>_0);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;UISearchBar类实现一个基于文本的搜索的文本字段控制。该控件提供了一个搜索按钮，输入文字的文本字段书签“按钮，一个取消按钮。UISearchBar对象实际上并不执行任何搜索。您可以使用委托，符合UISearchBarDelegate协议的对象，实施行动时，输入文本和按钮被点击&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://wynter.wang/categories/iOS/"/>
    
    
      <category term="API" scheme="https://wynter.wang/tags/API/"/>
    
      <category term="iOS" scheme="https://wynter.wang/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS-UIKit框架学习—UITableView</title>
    <link href="https://wynter.wang/2017/02/16/iOS-UIKit%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E2%80%94UITableView/"/>
    <id>https://wynter.wang/2017/02/16/iOS-UIKit框架学习—UITableView/</id>
    <published>2017-02-16T02:48:40.000Z</published>
    <updated>2017-02-28T06:54:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>UITableView在iOS开发中是使用最广泛的一个控件，用于展示单个项目数据的列表，同时也可以进行选择和编辑操作。<br><a id="more"></a></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@class</span> <span class="title">UITableView</span>;</span></div><div class="line"></div><div class="line"><span class="built_in">NS_CLASS_AVAILABLE_IOS</span>(<span class="number">8</span>_0) __TVOS_PROHIBITED <span class="class"><span class="keyword">@interface</span> <span class="title">UITableViewRowAction</span> : <span class="title">NSObject</span> &lt;<span class="title">NSCopying</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">// 创建左划时显示的按钮</span></div><div class="line">+ (<span class="keyword">instancetype</span>)rowActionWithStyle:(<span class="built_in">UITableViewRowActionStyle</span>)style title:(<span class="keyword">nullable</span> <span class="built_in">NSString</span> *)title handler:(<span class="keyword">void</span> (^)(<span class="built_in">UITableViewRowAction</span> *action, <span class="built_in">NSIndexPath</span> *indexPath))handler;</div><div class="line"><span class="comment">// 滑动时cell的风格</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) <span class="built_in">UITableViewRowActionStyle</span> style;</div><div class="line"><span class="comment">// 标题</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>, <span class="keyword">nullable</span>) <span class="built_in">NSString</span> *title;</div><div class="line"><span class="comment">// 背景颜色</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>, <span class="keyword">nullable</span>) <span class="built_in">UIColor</span> *backgroundColor;</div><div class="line"><span class="comment">// 毛玻璃效果</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>, <span class="keyword">nullable</span>) <span class="built_in">UIVisualEffect</span>* backgroundEffect;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="comment">// UITableViewFocusUpdateContext ： 焦点更新的上下文</span></div><div class="line"><span class="built_in">NS_CLASS_AVAILABLE_IOS</span>(<span class="number">9</span>_0) <span class="class"><span class="keyword">@interface</span> <span class="title">UITableViewFocusUpdateContext</span> : <span class="title">UIFocusUpdateContext</span></span></div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>, <span class="keyword">readonly</span>, <span class="keyword">nullable</span>) <span class="built_in">NSIndexPath</span> *previouslyFocusedIndexPath;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>, <span class="keyword">readonly</span>, <span class="keyword">nullable</span>) <span class="built_in">NSIndexPath</span> *nextFocusedIndexPath;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="comment">//_______________________________________________________________________________________________________________</span></div><div class="line"><span class="comment">// this represents the display and behaviour of the cells.</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@protocol</span> <span class="title">UITableViewDelegate</span>&lt;<span class="title">NSObject</span>, <span class="title">UIScrollViewDelegate</span>&gt;</span></div><div class="line"></div><div class="line"><span class="keyword">@optional</span></div><div class="line"></div><div class="line"><span class="comment">// 即将显示tableviewcell时调用</span></div><div class="line">- (<span class="keyword">void</span>)tableView:(<span class="built_in">UITableView</span> *)tableView willDisplayCell:(<span class="built_in">UITableViewCell</span> *)cell forRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath;</div><div class="line"><span class="comment">// 即将显示header时调用，在cell之后调用</span></div><div class="line">- (<span class="keyword">void</span>)tableView:(<span class="built_in">UITableView</span> *)tableView willDisplayHeaderView:(<span class="built_in">UIView</span> *)view forSection:(<span class="built_in">NSInteger</span>)section <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">6</span>_0);</div><div class="line"><span class="comment">// 即将显示footer时调用，在header之后调用</span></div><div class="line">- (<span class="keyword">void</span>)tableView:(<span class="built_in">UITableView</span> *)tableView willDisplayFooterView:(<span class="built_in">UIView</span> *)view forSection:(<span class="built_in">NSInteger</span>)section <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">6</span>_0);</div><div class="line"><span class="comment">// 在删除cell之后调用，停止显示cell的时候调用,界面不显示cell时。</span></div><div class="line">- (<span class="keyword">void</span>)tableView:(<span class="built_in">UITableView</span> *)tableView didEndDisplayingCell:(<span class="built_in">UITableViewCell</span> *)cell forRowAtIndexPath:(<span class="built_in">NSIndexPath</span>*)indexPath <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">6</span>_0);</div><div class="line"><span class="comment">// 停止显示header的时候调用</span></div><div class="line">- (<span class="keyword">void</span>)tableView:(<span class="built_in">UITableView</span> *)tableView didEndDisplayingHeaderView:(<span class="built_in">UIView</span> *)view forSection:(<span class="built_in">NSInteger</span>)section <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">6</span>_0);</div><div class="line"><span class="comment">// 停止显示footer的时候调用</span></div><div class="line">- (<span class="keyword">void</span>)tableView:(<span class="built_in">UITableView</span> *)tableView didEndDisplayingFooterView:(<span class="built_in">UIView</span> *)view forSection:(<span class="built_in">NSInteger</span>)section <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">6</span>_0);</div><div class="line"></div><div class="line"><span class="comment">// 设置某行cell高度</span></div><div class="line">- (<span class="built_in">CGFloat</span>)tableView:(<span class="built_in">UITableView</span> *)tableView heightForRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath;</div><div class="line"><span class="comment">// 设置header高度</span></div><div class="line">- (<span class="built_in">CGFloat</span>)tableView:(<span class="built_in">UITableView</span> *)tableView heightForHeaderInSection:(<span class="built_in">NSInteger</span>)section;</div><div class="line"><span class="comment">// 设置footer高度</span></div><div class="line">- (<span class="built_in">CGFloat</span>)tableView:(<span class="built_in">UITableView</span> *)tableView heightForFooterInSection:(<span class="built_in">NSInteger</span>)section;</div><div class="line"></div><div class="line"><span class="comment">// 设置每行cell的估算高度</span></div><div class="line">- (<span class="built_in">CGFloat</span>)tableView:(<span class="built_in">UITableView</span> *)tableView estimatedHeightForRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">7</span>_0);</div><div class="line"><span class="comment">// 对可变的header 高度的估算</span></div><div class="line">- (<span class="built_in">CGFloat</span>)tableView:(<span class="built_in">UITableView</span> *)tableView estimatedHeightForHeaderInSection:(<span class="built_in">NSInteger</span>)section <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">7</span>_0);</div><div class="line"><span class="comment">// 对可变的footer 高度的估算</span></div><div class="line">- (<span class="built_in">CGFloat</span>)tableView:(<span class="built_in">UITableView</span> *)tableView estimatedHeightForFooterInSection:(<span class="built_in">NSInteger</span>)section <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">7</span>_0);</div><div class="line"></div><div class="line"><span class="comment">// 设置第section分组的headers自定义视图</span></div><div class="line">- (<span class="keyword">nullable</span> <span class="built_in">UIView</span> *)tableView:(<span class="built_in">UITableView</span> *)tableView viewForHeaderInSection:(<span class="built_in">NSInteger</span>)section;</div><div class="line"><span class="comment">// 设置第section分组的footer自定义视图</span></div><div class="line">- (<span class="keyword">nullable</span> <span class="built_in">UIView</span> *)tableView:(<span class="built_in">UITableView</span> *)tableView viewForFooterInSection:(<span class="built_in">NSInteger</span>)section;</div><div class="line"></div><div class="line"><span class="comment">// 可手动调用,在其他的触发事件中 传入tableview 以及indexPath参数，进行操作</span></div><div class="line">- (<span class="keyword">void</span>)tableView:(<span class="built_in">UITableView</span> *)tableView accessoryButtonTappedForRowWithIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath;</div><div class="line"></div><div class="line"><span class="comment">// Selection</span></div><div class="line"><span class="comment">// 设置是否允许cell高亮状态</span></div><div class="line">- (<span class="built_in">BOOL</span>)tableView:(<span class="built_in">UITableView</span> *)tableView shouldHighlightRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">6</span>_0);</div><div class="line"><span class="comment">// 按下cell未弹起时调用，即即将高亮时调用,如果return no 则点击的时候没有反应，但是还是会执行此方法</span></div><div class="line">- (<span class="keyword">void</span>)tableView:(<span class="built_in">UITableView</span> *)tableView didHighlightRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">6</span>_0);</div><div class="line"><span class="comment">// 按下cell弹起时调用</span></div><div class="line">- (<span class="keyword">void</span>)tableView:(<span class="built_in">UITableView</span> *)tableView didUnhighlightRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">6</span>_0);</div><div class="line"></div><div class="line"><span class="comment">// 将要选定指定的cell时调用</span></div><div class="line">- (<span class="keyword">nullable</span> <span class="built_in">NSIndexPath</span> *)tableView:(<span class="built_in">UITableView</span> *)tableView willSelectRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath;</div><div class="line"><span class="comment">// 将要取消选定的cell时调用</span></div><div class="line">- (<span class="keyword">nullable</span> <span class="built_in">NSIndexPath</span> *)tableView:(<span class="built_in">UITableView</span> *)tableView willDeselectRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">3</span>_0);</div><div class="line"><span class="comment">// 选择指定的cell时调用</span></div><div class="line">- (<span class="keyword">void</span>)tableView:(<span class="built_in">UITableView</span> *)tableView didSelectRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath;</div><div class="line"><span class="comment">// 取消选择指定cell时调用</span></div><div class="line">- (<span class="keyword">void</span>)tableView:(<span class="built_in">UITableView</span> *)tableView didDeselectRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">3</span>_0);</div><div class="line"></div><div class="line"><span class="comment">// 编辑</span></div><div class="line"><span class="comment">// 返回每一行cell的编辑模式， 可以再次设置add或者删除操作</span></div><div class="line">- (<span class="built_in">UITableViewCellEditingStyle</span>)tableView:(<span class="built_in">UITableView</span> *)tableView editingStyleForRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath;</div><div class="line"><span class="comment">// cell左滑删除时，删除按钮的标题</span></div><div class="line">- (<span class="keyword">nullable</span> <span class="built_in">NSString</span> *)tableView:(<span class="built_in">UITableView</span> *)tableView titleForDeleteConfirmationButtonForRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">3</span>_0) __TVOS_PROHIBITED;</div><div class="line"><span class="comment">// 自定义编辑左滑后出现的界面</span></div><div class="line">- (<span class="keyword">nullable</span> <span class="built_in">NSArray</span>&lt;<span class="built_in">UITableViewRowAction</span> *&gt; *)tableView:(<span class="built_in">UITableView</span> *)tableView editActionsForRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">8</span>_0) __TVOS_PROHIBITED;</div><div class="line"></div><div class="line"><span class="comment">// 编辑模式下是否缩进指定行背景</span></div><div class="line">- (<span class="built_in">BOOL</span>)tableView:(<span class="built_in">UITableView</span> *)tableView shouldIndentWhileEditingRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath;</div><div class="line"></div><div class="line"><span class="comment">// 进入编辑模式时调用</span></div><div class="line">- (<span class="keyword">void</span>)tableView:(<span class="built_in">UITableView</span> *)tableView willBeginEditingRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath __TVOS_PROHIBITED;</div><div class="line"><span class="comment">// 编辑结束时调用</span></div><div class="line">- (<span class="keyword">void</span>)tableView:(<span class="built_in">UITableView</span> *)tableView didEndEditingRowAtIndexPath:(<span class="keyword">nullable</span> <span class="built_in">NSIndexPath</span> *)indexPath __TVOS_PROHIBITED;</div><div class="line"></div><div class="line"><span class="comment">// 移动</span></div><div class="line"><span class="comment">// 在编辑状态下，返回可以进行移动重新排序的indexpath</span></div><div class="line">- (<span class="built_in">NSIndexPath</span> *)tableView:(<span class="built_in">UITableView</span> *)tableView targetIndexPathForMoveFromRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)sourceIndexPath toProposedIndexPath:(<span class="built_in">NSIndexPath</span> *)proposedDestinationIndexPath;</div><div class="line"></div><div class="line"><span class="comment">// 缩进</span></div><div class="line"><span class="comment">// 设置cell的缩进</span></div><div class="line">- (<span class="built_in">NSInteger</span>)tableView:(<span class="built_in">UITableView</span> *)tableView indentationLevelForRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath;</div><div class="line"></div><div class="line"><span class="comment">// 复制/粘贴</span></div><div class="line"><span class="comment">// 是否在指定行显示菜单，返回值为YES时，长按显示菜单</span></div><div class="line">- (<span class="built_in">BOOL</span>)tableView:(<span class="built_in">UITableView</span> *)tableView shouldShowMenuForRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">5</span>_0);</div><div class="line"><span class="comment">// 弹出菜单后回调用此方法。</span></div><div class="line">- (<span class="built_in">BOOL</span>)tableView:(<span class="built_in">UITableView</span> *)tableView canPerformAction:(SEL)action forRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath withSender:(<span class="keyword">nullable</span> <span class="keyword">id</span>)sender <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">5</span>_0);</div><div class="line"><span class="comment">// 选择菜单完成后，调用此方法。</span></div><div class="line">- (<span class="keyword">void</span>)tableView:(<span class="built_in">UITableView</span> *)tableView performAction:(SEL)action forRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath withSender:(<span class="keyword">nullable</span> <span class="keyword">id</span>)sender <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">5</span>_0);</div><div class="line"></div><div class="line"><span class="comment">// cell是否可以获得焦点</span></div><div class="line">- (<span class="built_in">BOOL</span>)tableView:(<span class="built_in">UITableView</span> *)tableView canFocusRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">9</span>_0);</div><div class="line"><span class="comment">// 是否更新聚焦范围内发生的内容</span></div><div class="line">- (<span class="built_in">BOOL</span>)tableView:(<span class="built_in">UITableView</span> *)tableView shouldUpdateFocusInContext:(<span class="built_in">UITableViewFocusUpdateContext</span> *)context <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">9</span>_0);</div><div class="line"><span class="comment">// 聚焦范围内容更新完成后调用</span></div><div class="line">- (<span class="keyword">void</span>)tableView:(<span class="built_in">UITableView</span> *)tableView didUpdateFocusInContext:(<span class="built_in">UITableViewFocusUpdateContext</span> *)context withAnimationCoordinator:(<span class="built_in">UIFocusAnimationCoordinator</span> *)coordinator <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">9</span>_0);</div><div class="line"><span class="comment">// 设置聚焦时首选视图</span></div><div class="line">- (<span class="keyword">nullable</span> <span class="built_in">NSIndexPath</span> *)indexPathForPreferredFocusedViewInTableView:(<span class="built_in">UITableView</span> *)tableView <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">9</span>_0);</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="built_in">NS_CLASS_AVAILABLE_IOS</span>(<span class="number">2</span>_0) <span class="class"><span class="keyword">@interface</span> <span class="title">UITableView</span> : <span class="title">UIScrollView</span> &lt;<span class="title">NSCoding</span>&gt;</span></div><div class="line"><span class="comment">// cell的构造方法,自定义cell时,如果要初始化设置cell属性时,可以重写该方法,在方法内部设置</span></div><div class="line">- (<span class="keyword">instancetype</span>)initWithFrame:(<span class="built_in">CGRect</span>)frame style:(<span class="built_in">UITableViewStyle</span>)style <span class="built_in">NS_DESIGNATED_INITIALIZER</span>;</div><div class="line">- (<span class="keyword">nullable</span> <span class="keyword">instancetype</span>)initWithCoder:(<span class="built_in">NSCoder</span> *)aDecoder <span class="built_in">NS_DESIGNATED_INITIALIZER</span>;</div><div class="line"><span class="comment">// UITableView的类型: plain类型和group分组类型</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) <span class="built_in">UITableViewStyle</span> style;</div><div class="line"><span class="comment">// 数据源</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">weak</span>, <span class="keyword">nullable</span>) <span class="keyword">id</span> &lt;<span class="built_in">UITableViewDataSource</span>&gt; dataSource;</div><div class="line"><span class="comment">// 代理</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">weak</span>, <span class="keyword">nullable</span>) <span class="keyword">id</span> &lt;<span class="built_in">UITableViewDelegate</span>&gt; delegate;</div><div class="line"><span class="comment">// 预读取数据</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">weak</span>) <span class="keyword">id</span>&lt;<span class="built_in">UITableViewDataSourcePrefetching</span>&gt; prefetchDataSource <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">10</span>_0);</div><div class="line"><span class="comment">// 行高</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) <span class="built_in">CGFloat</span> rowHeight;</div><div class="line"><span class="comment">// 分组Header的高度</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) <span class="built_in">CGFloat</span> sectionHeaderHeight;</div><div class="line"><span class="comment">// 分组Footer的高度</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) <span class="built_in">CGFloat</span> sectionFooterHeight;   <span class="comment">// will return the default</span></div><div class="line"><span class="comment">// 估计行高</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) <span class="built_in">CGFloat</span> estimatedRowHeight <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">7</span>_0); <span class="comment">//</span></div><div class="line"><span class="comment">// 分组Header估计高度</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) <span class="built_in">CGFloat</span> estimatedSectionHeaderHeight <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">7</span>_0);</div><div class="line"><span class="comment">// 分组Footer估计高度</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) <span class="built_in">CGFloat</span> estimatedSectionFooterHeight <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">7</span>_0);</div><div class="line"><span class="comment">// 分割线内边距</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) <span class="built_in">UIEdgeInsets</span> separatorInset <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">7</span>_0) <span class="built_in">UI_APPEARANCE_SELECTOR</span>;</div><div class="line"><span class="comment">// 背景view</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>, <span class="keyword">nullable</span>) <span class="built_in">UIView</span> *backgroundView <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">3</span>_2);</div><div class="line"><span class="comment">// 重新载入tableview所有cell  一般是在数据源有改变的时候</span></div><div class="line">- (<span class="keyword">void</span>)reloadData;</div><div class="line"><span class="comment">// 重新载入，section的索引标题。</span></div><div class="line">- (<span class="keyword">void</span>)reloadSectionIndexTitles <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">3</span>_0);</div><div class="line"><span class="comment">// 获取TableView共有多少组</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) <span class="built_in">NSInteger</span> numberOfSections;</div><div class="line"><span class="comment">// 获取第section组共有多少行</span></div><div class="line">- (<span class="built_in">NSInteger</span>)numberOfRowsInSection:(<span class="built_in">NSInteger</span>)section;</div><div class="line"><span class="comment">// 获取某一组的frame,头部frame,尾部frame,cell的frame</span></div><div class="line">- (<span class="built_in">CGRect</span>)rectForSection:(<span class="built_in">NSInteger</span>)section;</div><div class="line">- (<span class="built_in">CGRect</span>)rectForHeaderInSection:(<span class="built_in">NSInteger</span>)section;</div><div class="line">- (<span class="built_in">CGRect</span>)rectForFooterInSection:(<span class="built_in">NSInteger</span>)section;</div><div class="line">- (<span class="built_in">CGRect</span>)rectForRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath;</div><div class="line"><span class="comment">// 返回指定坐标点的indexPath</span></div><div class="line">- (<span class="keyword">nullable</span> <span class="built_in">NSIndexPath</span> *)indexPathForRowAtPoint:(<span class="built_in">CGPoint</span>)point;</div><div class="line"><span class="comment">// 返回指定cell所在的indexPath</span></div><div class="line">- (<span class="keyword">nullable</span> <span class="built_in">NSIndexPath</span> *)indexPathForCell:(<span class="built_in">UITableViewCell</span> *)cell;</div><div class="line"><span class="comment">// 返回指定范围内的所有indexPath的数组</span></div><div class="line">- (<span class="keyword">nullable</span> <span class="built_in">NSArray</span>&lt;<span class="built_in">NSIndexPath</span> *&gt; *)indexPathsForRowsInRect:(<span class="built_in">CGRect</span>)rect;</div><div class="line"><span class="comment">// 返回indexPath所指向的cell</span></div><div class="line">- (<span class="keyword">nullable</span> __kindof <span class="built_in">UITableViewCell</span> *)cellForRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath;</div><div class="line"><span class="comment">// 当前可以看到的cell数组</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) <span class="built_in">NSArray</span>&lt;__kindof <span class="built_in">UITableViewCell</span> *&gt; *visibleCells;</div><div class="line"><span class="comment">// 返回tableView中标识的可见的indexPath数组</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>, <span class="keyword">nullable</span>) <span class="built_in">NSArray</span>&lt;<span class="built_in">NSIndexPath</span> *&gt; *indexPathsForVisibleRows;</div><div class="line"><span class="comment">// 设置tableView的headerView</span></div><div class="line">- (<span class="keyword">nullable</span> <span class="built_in">UITableViewHeaderFooterView</span> *)headerViewForSection:(<span class="built_in">NSInteger</span>)section <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">6</span>_0);</div><div class="line">indexPathsForVisibleRows;</div><div class="line"><span class="comment">// 设置tableView的footerView</span></div><div class="line">- (<span class="keyword">nullable</span> <span class="built_in">UITableViewHeaderFooterView</span> *)footerViewForSection:(<span class="built_in">NSInteger</span>)section <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">6</span>_0);</div><div class="line"><span class="comment">// 根据传入的indexPath，滚动到相对应的位置，第二个参数是控制对应的cell再滚动后处于tableview的顶部/底部/中部等</span></div><div class="line">- (<span class="keyword">void</span>)scrollToRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath atScrollPosition:(<span class="built_in">UITableViewScrollPosition</span>)scrollPosition animated:(<span class="built_in">BOOL</span>)animated;</div><div class="line"><span class="comment">// 滚动到被选中项。滚动后处于tableview的顶部/底部/中部等</span></div><div class="line">- (<span class="keyword">void</span>)scrollToNearestSelectedRowAtScrollPosition:(<span class="built_in">UITableViewScrollPosition</span>)scrollPosition animated:(<span class="built_in">BOOL</span>)animated;</div><div class="line"></div><div class="line"><span class="comment">// 开始一系列的增删改移操作</span></div><div class="line">- (<span class="keyword">void</span>)beginUpdates;</div><div class="line"><span class="comment">// 操作结束更新数据</span></div><div class="line">- (<span class="keyword">void</span>)endUpdates;</div><div class="line"><span class="comment">// 对section进行插入,删除,刷新,移动操作</span></div><div class="line">- (<span class="keyword">void</span>)insertSections:(<span class="built_in">NSIndexSet</span> *)sections withRowAnimation:(<span class="built_in">UITableViewRowAnimation</span>)animation;</div><div class="line">- (<span class="keyword">void</span>)deleteSections:(<span class="built_in">NSIndexSet</span> *)sections withRowAnimation:(<span class="built_in">UITableViewRowAnimation</span>)animation;</div><div class="line">- (<span class="keyword">void</span>)reloadSections:(<span class="built_in">NSIndexSet</span> *)sections withRowAnimation:(<span class="built_in">UITableViewRowAnimation</span>)animation <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">3</span>_0);</div><div class="line">- (<span class="keyword">void</span>)moveSection:(<span class="built_in">NSInteger</span>)section toSection:(<span class="built_in">NSInteger</span>)newSection <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">5</span>_0);</div><div class="line"></div><div class="line"><span class="comment">// 对行进行插入,删除,刷新,移动批量操作</span></div><div class="line">- (<span class="keyword">void</span>)insertRowsAtIndexPaths:(<span class="built_in">NSArray</span>&lt;<span class="built_in">NSIndexPath</span> *&gt; *)indexPaths withRowAnimation:(<span class="built_in">UITableViewRowAnimation</span>)animation;</div><div class="line">- (<span class="keyword">void</span>)deleteRowsAtIndexPaths:(<span class="built_in">NSArray</span>&lt;<span class="built_in">NSIndexPath</span> *&gt; *)indexPaths withRowAnimation:(<span class="built_in">UITableViewRowAnimation</span>)animation;</div><div class="line">- (<span class="keyword">void</span>)reloadRowsAtIndexPaths:(<span class="built_in">NSArray</span>&lt;<span class="built_in">NSIndexPath</span> *&gt; *)indexPaths withRowAnimation:(<span class="built_in">UITableViewRowAnimation</span>)animation <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">3</span>_0);</div><div class="line">- (<span class="keyword">void</span>)moveRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath toIndexPath:(<span class="built_in">NSIndexPath</span> *)newIndexPath <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">5</span>_0);</div><div class="line"></div><div class="line"><span class="comment">// 编辑状态 默认为NO</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">getter</span>=isEditing) <span class="built_in">BOOL</span> editing;</div><div class="line"><span class="comment">// 设置编辑状态动画显示</span></div><div class="line">- (<span class="keyword">void</span>)setEditing:(<span class="built_in">BOOL</span>)editing animated:(<span class="built_in">BOOL</span>)animated;</div><div class="line"><span class="comment">// cell 是否可以选择 默认为YES</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) <span class="built_in">BOOL</span> allowsSelection <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">3</span>_0);</div><div class="line"><span class="comment">// 编辑模式是否可以选择 默认为NO</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) <span class="built_in">BOOL</span> allowsSelectionDuringEditing;</div><div class="line"><span class="comment">// 是否可以多选 默认为NO</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) <span class="built_in">BOOL</span> allowsMultipleSelection <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">5</span>_0);</div><div class="line"><span class="comment">// 编辑模式是否可以多选 默认为NO</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) <span class="built_in">BOOL</span> allowsMultipleSelectionDuringEditing <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">5</span>_0);</div><div class="line"></div><div class="line"><span class="comment">// 获取选中行的indexPath</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>, <span class="keyword">nullable</span>) <span class="built_in">NSIndexPath</span> *indexPathForSelectedRow;</div><div class="line"><span class="comment">// 返回一个多行选中的indexpath数组</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>, <span class="keyword">nullable</span>) <span class="built_in">NSArray</span>&lt;<span class="built_in">NSIndexPath</span> *&gt; *indexPathsForSelectedRows <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">5</span>_0);</div><div class="line"></div><div class="line"><span class="comment">// 调用此方法，此indexpath的cell被选中，若此cell不再可视范围内，自动按照最后一个参数的方式进行滚动</span></div><div class="line">- (<span class="keyword">void</span>)selectRowAtIndexPath:(<span class="keyword">nullable</span> <span class="built_in">NSIndexPath</span> *)indexPath animated:(<span class="built_in">BOOL</span>)animated scrollPosition:(<span class="built_in">UITableViewScrollPosition</span>)scrollPosition;</div><div class="line"><span class="comment">// 取消此indexpath的选中状态</span></div><div class="line">- (<span class="keyword">void</span>)deselectRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath animated:(<span class="built_in">BOOL</span>)animated;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 索引条设置</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) <span class="built_in">NSInteger</span> sectionIndexMinimumDisplayRowCount;</div><div class="line"><span class="comment">// 索引条字体颜色</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>, <span class="keyword">nullable</span>) <span class="built_in">UIColor</span> *sectionIndexColor <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">6</span>_0) <span class="built_in">UI_APPEARANCE_SELECTOR</span>;</div><div class="line"><span class="comment">// 索引条背景颜色</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>, <span class="keyword">nullable</span>) <span class="built_in">UIColor</span> *sectionIndexBackgroundColor <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">7</span>_0) <span class="built_in">UI_APPEARANCE_SELECTOR</span>;</div><div class="line"><span class="comment">// 按住时,索引条显示的背景颜色</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>, <span class="keyword">nullable</span>) <span class="built_in">UIColor</span> *sectionIndexTrackingBackgroundColor <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">6</span>_0) <span class="built_in">UI_APPEARANCE_SELECTOR</span>;</div><div class="line"><span class="comment">// 分割线的样式</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) <span class="built_in">UITableViewCellSeparatorStyle</span> separatorStyle __TVOS_PROHIBITED;</div><div class="line"><span class="comment">// 分割线的颜色</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>, <span class="keyword">nullable</span>) <span class="built_in">UIColor</span> *separatorColor <span class="built_in">UI_APPEARANCE_SELECTOR</span> __TVOS_PROHIBITED;</div><div class="line"><span class="comment">// 分割线的玻璃效果</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>, <span class="keyword">nullable</span>) <span class="built_in">UIVisualEffect</span> *separatorEffect <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">8</span>_0) <span class="built_in">UI_APPEARANCE_SELECTOR</span> __TVOS_PROHIBITED;</div><div class="line"><span class="comment">// 判断是否需要根据内容留有空白</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) <span class="built_in">BOOL</span> cellLayoutMarginsFollowReadableWidth <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">9</span>_0);</div><div class="line"></div><div class="line"><span class="comment">// tableView的头部视图，不要和section header混淆</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>, <span class="keyword">nullable</span>) <span class="built_in">UIView</span> *tableHeaderView;</div><div class="line"><span class="comment">// tableView的底部视图，不要和section footer混淆</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>, <span class="keyword">nullable</span>) <span class="built_in">UIView</span> *tableFooterView;</div><div class="line"><span class="comment">// 从缓冲池获取cell</span></div><div class="line">- (<span class="keyword">nullable</span> __kindof <span class="built_in">UITableViewCell</span> *)dequeueReusableCellWithIdentifier:(<span class="built_in">NSString</span> *)identifier;</div><div class="line"><span class="comment">// 从缓冲池获取指定下标的cell</span></div><div class="line">- (__kindof <span class="built_in">UITableViewCell</span> *)dequeueReusableCellWithIdentifier:(<span class="built_in">NSString</span> *)identifier forIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">6</span>_0);</div><div class="line"><span class="comment">// 从缓冲池获取header,footer</span></div><div class="line">- (<span class="keyword">nullable</span> __kindof <span class="built_in">UITableViewHeaderFooterView</span> *)dequeueReusableHeaderFooterViewWithIdentifier:(<span class="built_in">NSString</span> *)identifier <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">6</span>_0);</div><div class="line"></div><div class="line"><span class="comment">// 注册xib创建的cell</span></div><div class="line">- (<span class="keyword">void</span>)registerNib:(<span class="keyword">nullable</span> <span class="built_in">UINib</span> *)nib forCellReuseIdentifier:(<span class="built_in">NSString</span> *)identifier <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">5</span>_0);</div><div class="line"><span class="comment">// 注册cell</span></div><div class="line">- (<span class="keyword">void</span>)registerClass:(<span class="keyword">nullable</span> Class)cellClass forCellReuseIdentifier:(<span class="built_in">NSString</span> *)identifier <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">6</span>_0);</div><div class="line"><span class="comment">// 注册xib创建的header,footer</span></div><div class="line">- (<span class="keyword">void</span>)registerNib:(<span class="keyword">nullable</span> <span class="built_in">UINib</span> *)nib forHeaderFooterViewReuseIdentifier:(<span class="built_in">NSString</span> *)identifier <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">6</span>_0);</div><div class="line"><span class="comment">// 注册header,footer</span></div><div class="line">- (<span class="keyword">void</span>)registerClass:(<span class="keyword">nullable</span> Class)aClass forHeaderFooterViewReuseIdentifier:(<span class="built_in">NSString</span> *)identifier <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">6</span>_0);</div><div class="line"><span class="comment">// 是否自动将焦点上次集中索引的路径的单元格上 默认值为NO</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) <span class="built_in">BOOL</span> remembersLastFocusedIndexPath <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">9</span>_0); .</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@protocol</span> <span class="title">UITableViewDataSource</span>&lt;<span class="title">NSObject</span>&gt;</span></div><div class="line"></div><div class="line"><span class="keyword">@required</span></div><div class="line"></div><div class="line"><span class="comment">// 每组有多少行</span></div><div class="line">- (<span class="built_in">NSInteger</span>)tableView:(<span class="built_in">UITableView</span> *)tableView numberOfRowsInSection:(<span class="built_in">NSInteger</span>)section;</div><div class="line"><span class="comment">// 返回显示的cell</span></div><div class="line">- (<span class="built_in">UITableViewCell</span> *)tableView:(<span class="built_in">UITableView</span> *)tableView cellForRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath;</div><div class="line"></div><div class="line"><span class="keyword">@optional</span></div><div class="line"><span class="comment">// tablaView上有多少组</span></div><div class="line">- (<span class="built_in">NSInteger</span>)numberOfSectionsInTableView:(<span class="built_in">UITableView</span> *)tableView;</div><div class="line"><span class="comment">// 返回某个section对应的header标题</span></div><div class="line">- (<span class="keyword">nullable</span> <span class="built_in">NSString</span> *)tableView:(<span class="built_in">UITableView</span> *)tableView titleForHeaderInSection:(<span class="built_in">NSInteger</span>)section;</div><div class="line"><span class="comment">// 返回某个section对应的footer标题</span></div><div class="line">- (<span class="keyword">nullable</span> <span class="built_in">NSString</span> *)tableView:(<span class="built_in">UITableView</span> *)tableView titleForFooterInSection:(<span class="built_in">NSInteger</span>)section;</div><div class="line"><span class="comment">// 设置cell为可编辑模式</span></div><div class="line">- (<span class="built_in">BOOL</span>)tableView:(<span class="built_in">UITableView</span> *)tableView canEditRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath;</div><div class="line"><span class="comment">// 设置cell为可移动模式</span></div><div class="line">- (<span class="built_in">BOOL</span>)tableView:(<span class="built_in">UITableView</span> *)tableView canMoveRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath;</div><div class="line"><span class="comment">// 设置右边栏的索引目录数组 e.g. "ABCD...Z#"</span></div><div class="line">- (<span class="keyword">nullable</span> <span class="built_in">NSArray</span>&lt;<span class="built_in">NSString</span> *&gt; *)sectionIndexTitlesForTableView:(<span class="built_in">UITableView</span> *)tableView __TVOS_PROHIBITED;</div><div class="line"><span class="comment">// 点击右侧索引表项时调用 e.g. "B",1</span></div><div class="line">- (<span class="built_in">NSInteger</span>)tableView:(<span class="built_in">UITableView</span> *)tableView sectionForSectionIndexTitle:(<span class="built_in">NSString</span> *)title atIndex:(<span class="built_in">NSInteger</span>)index __TVOS_PROHIBITED;</div><div class="line"><span class="comment">// 提交编辑</span></div><div class="line">- (<span class="keyword">void</span>)tableView:(<span class="built_in">UITableView</span> *)tableView commitEditingStyle:(<span class="built_in">UITableViewCellEditingStyle</span>)editingStyle forRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath;</div><div class="line"><span class="comment">// 移动时使用</span></div><div class="line">- (<span class="keyword">void</span>)tableView:(<span class="built_in">UITableView</span> *)tableView moveRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)sourceIndexPath toIndexPath:(<span class="built_in">NSIndexPath</span> *)destinationIndexPath;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@protocol</span> <span class="title">UITableViewDataSourcePrefetching</span> &lt;<span class="title">NSObject</span>&gt;</span></div><div class="line"></div><div class="line"><span class="keyword">@required</span></div><div class="line"></div><div class="line"><span class="comment">// 设置预读取的优先排序数组</span></div><div class="line">- (<span class="keyword">void</span>)tableView:(<span class="built_in">UITableView</span> *)tableView prefetchRowsAtIndexPaths:(<span class="built_in">NSArray</span>&lt;<span class="built_in">NSIndexPath</span> *&gt; *)indexPaths;</div><div class="line"></div><div class="line"><span class="keyword">@optional</span></div><div class="line"></div><div class="line"><span class="comment">// 预读取indexPath数组</span></div><div class="line">- (<span class="keyword">void</span>)tableView:(<span class="built_in">UITableView</span> *)tableView cancelPrefetchingForRowsAtIndexPaths:(<span class="built_in">NSArray</span>&lt;<span class="built_in">NSIndexPath</span> *&gt; *)indexPaths;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NSIndexPath</span> (<span class="title">UITableView</span>)</span></div><div class="line"></div><div class="line"><span class="comment">// 获取indexPath</span></div><div class="line">+ (<span class="keyword">instancetype</span>)indexPathForRow:(<span class="built_in">NSInteger</span>)row inSection:(<span class="built_in">NSInteger</span>)section;</div><div class="line"><span class="comment">// 获取第几组</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) <span class="built_in">NSInteger</span> section;</div><div class="line"><span class="comment">// 获取第几行</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) <span class="built_in">NSInteger</span> row;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// UITableView风格样式</span></div><div class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span>(<span class="built_in">NSInteger</span>, <span class="built_in">UITableViewStyle</span>) &#123;</div><div class="line">    <span class="built_in">UITableViewStylePlain</span>,          <span class="comment">// 平铺式(补充：有section时，自动悬浮在顶部)</span></div><div class="line">    <span class="built_in">UITableViewStyleGrouped</span>         <span class="comment">// 分段式</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 选中某一行滚动到tableView顶、中、下的位置</span></div><div class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span>(<span class="built_in">NSInteger</span>, <span class="built_in">UITableViewScrollPosition</span>) &#123;</div><div class="line">    <span class="built_in">UITableViewScrollPositionNone</span>,</div><div class="line">    <span class="built_in">UITableViewScrollPositionTop</span>, <span class="comment">// 滚动到顶部</span></div><div class="line">    <span class="built_in">UITableViewScrollPositionMiddle</span>, <span class="comment">// 滚动到中部</span></div><div class="line">    <span class="built_in">UITableViewScrollPositionBottom</span> <span class="comment">// 滚到到底部</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 删除/添加时，cell过渡动画效果</span></div><div class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span>(<span class="built_in">NSInteger</span>, <span class="built_in">UITableViewRowAnimation</span>) &#123;</div><div class="line">    <span class="built_in">UITableViewRowAnimationFade</span>,       <span class="comment">// 褪去</span></div><div class="line">    <span class="built_in">UITableViewRowAnimationRight</span>,      <span class="comment">// 从右边滑入（或滑出）</span></div><div class="line">    <span class="built_in">UITableViewRowAnimationLeft</span>,       <span class="comment">// 从左边滑入（或滑出）</span></div><div class="line">    <span class="built_in">UITableViewRowAnimationTop</span>,        <span class="comment">// 从顶部插入（或删除）</span></div><div class="line">    <span class="built_in">UITableViewRowAnimationBottom</span>,     <span class="comment">// 从底部插入（或删除）</span></div><div class="line">    <span class="built_in">UITableViewRowAnimationNone</span>,       <span class="comment">// 无效果</span></div><div class="line">    <span class="built_in">UITableViewRowAnimationMiddle</span>,     <span class="comment">//</span></div><div class="line">    <span class="built_in">UITableViewRowAnimationAutomatic</span> = <span class="number">100</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 在编辑状态下左划cell时,cell右侧显示的按钮类型</span></div><div class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span>(<span class="built_in">NSInteger</span>, <span class="built_in">UITableViewRowActionStyle</span>) &#123;</div><div class="line">    <span class="built_in">UITableViewRowActionStyleDefault</span> = <span class="number">0</span>, <span class="comment">// 红色</span></div><div class="line">    <span class="built_in">UITableViewRowActionStyleDestructive</span> = <span class="built_in">UITableViewRowActionStyleDefault</span>,</div><div class="line">    <span class="built_in">UITableViewRowActionStyleNormal</span></div><div class="line">&#125; <span class="built_in">NS_ENUM_AVAILABLE_IOS</span>(<span class="number">8</span>_0) __TVOS_PROHIBITED;</div><div class="line"></div><div class="line"><span class="comment">// 设置索引的标题为搜索.</span></div><div class="line"><span class="built_in">UIKIT_EXTERN</span> <span class="built_in">NSString</span> *<span class="keyword">const</span> <span class="built_in">UITableViewIndexSearch</span> <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">3</span>_0) __TVOS_PROHIBITED;</div><div class="line"><span class="comment">// 选择发生改变后发送通知的key</span></div><div class="line"><span class="built_in">UIKIT_EXTERN</span> <span class="built_in">NSNotificationName</span> <span class="keyword">const</span> <span class="built_in">UITableViewSelectionDidChangeNotification</span>;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;UITableView在iOS开发中是使用最广泛的一个控件，用于展示单个项目数据的列表，同时也可以进行选择和编辑操作。&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://wynter.wang/categories/iOS/"/>
    
    
      <category term="API" scheme="https://wynter.wang/tags/API/"/>
    
      <category term="iOS" scheme="https://wynter.wang/tags/iOS/"/>
    
  </entry>
  
</feed>
